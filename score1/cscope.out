cscope 15 $HOME/public/a老师程序/score1 -c               0000228834
	@/home/hdp/public/a老师程序/score1/score.c

1 #include 
	~<stdio.h
>

3 #define 
	#MAX_SCORE_NUM
 6

4 #define 
	#MAX_MAN_NUM
 100

5 

	)

6 int 
	gCurManNum
 ;

7 int 
	gCurLessonNum
 ;

9 struct 
	sSTU_INFO


11 char 
	mName
[30] ;

12 float 
	mScore
[
MAX_SCORE_NUM
];

15 struct 
STU_INFO
 
	gStudent
[
MAX_MAN_NUM
] ;

17 void 
	$MovMaxToHead
(struct 
STU_INFO
 
buf
[] , int 
HeadPos
 , int 
Len
)

19 int 
i
;

20 struct 
STU_INFO
 
tmp
 ;

21 for(
i
 = 
HeadPos
 ; i < 
NUM
 ; i++)

23 if(
buf
[
i
].
Score
[1] > buf[
HeadPos
].Score[1])

25 
tmp
 = 
buf
[
HeadPos
] ;

26 
buf
[
HeadPos
] = buf[
i
] ;

27 
buf
[
i
] = 
tmp
 ;

30 
	}
}

32 void 
	$sort
(struct 
STU_INFO
 
Buf
[] , int 
Len
)

34 int 
i
 ;

35 for(
i
 = 0 ; i < 
Len
 ; i++)

37 
	`MovMaxToHead
(
Buf
 , 
i
 , 
Len
);

39 
	}
}

42 void 
	$DispStuInfo
()

44 int 
i
 ;

45 int 
j
 ;

46 
	`printf
("学生信息如下：\n");

47 for(
i
 = 0 ; i < 
CurManNum
 ; i++)

49 
	`printf
("%s\t" , 
Student
[
i
].
Name
);

50 for(
j
 = 0 ; j < 
MAX_SCORE_NUM
 ; j++)

52 
	`printf
("%.2f\t" , 
Student
[
i
].
Score
[
j
]);

54 
	`printf
("\n");

56 
	}
}

58 int 
	$getWordNum
(char 
buf
[])

60 int 
i
 ;

61 int 
wordCnt
 ;

62 
i
 = 0 ;

63 
wordCnt
 = 0 ;

67 for( ; 
i
 < 200 ; i++)

69 if(
buf
[
i
] != ' ' && buf[i] != '\t')

74 if(
buf
[
i
] == '\0')

79 if(
buf
[
i
] == '\0')

84 for( ; 
i
 < 200 ; i++)

86 if(
buf
[
i
] == ' ' || buf[i] == '\t' || buf[i] == '\0')

91 
wordCnt
++ ;

93 return 
wordCnt
 ;

94 
	}
}

96 void 
	$LoadFile
(void)

98 int 
i
 ;

99 int 
j
 ;

100 
FILE
 *
pf
 ;

101 char 
Buff
[200];

102 
pf
 = 
	`fopen
("score.txt" , "rt");

105 
	`fgets
(
Buff
 , 200 , 
pf
);

106 
	`printf
("%s\n" , 
Buff
);

107 
CurLessonNum
 = 0 ;

110 
CurLessonNum
 = 
	`getWordNum
(
Buff
) - 1;

111 
	`printf
("CurLessonNum = %d\n" , 
CurLessonNum
);

113 
	`rewind
(
pf
);

115 
CurManNum
 = 0 ;

116 for(
i
 = 0 ; i < 
MAX_MAN_NUM
 ; i++)

119 
	`fscanf
(
pf
 , "%s" , 
Student
[
i
].
Name
);

120 for(
j
 = 0 ; j < 
CurLessonNum
 ; j++)

122 
	`fscanf
(
pf
 , "%f" , &
Student
[
i
].
Score
[
j
]);

124 if(
	`feof
(
pf
))

128 
CurManNum
++ ;

130 
	`fclose
(
pf
);

132 
	}
}

133 void 
	$DispScoreArea
(int 
lessonNo
 , int 
Min
 , int 
Max
)

135 int 
Cnt
 ;

136 int 
i
 ;

137 
Cnt
 = 0 ;

138 
	`printf
("第%d门课程，分数段%d~%d之间的人如下：\n" , 
lessonNo
 , 
Min
 , 
Max
);

139 for(
i
 = 0 ; i < 
CurManNum
 ; i++)

141 if(
Student
[
i
].
Score
[
lessonNo
] >= 
Min
 && Student[i].Score[lessonNo] < 
Max
)

144 
	`printf
("%s " , 
Student
[
i
].
Name
);

145 
Cnt
++ ;

148 
	`printf
("\n共计%d人\n" , 
Cnt
);

149 
	}
}

151 void 
	$main
(void)

153 int 
i
 ;

154 
	`LoadFile
();

155 
	`DispStuInfo
();

157 for(
i
 = 0 ; i < 
CurLessonNum
 ; i++)

159 
	`DispScoreArea
(
i
 , 0 , 60);

160 
	`DispScoreArea
(
i
 , 60 , 70);

161 
	`DispScoreArea
(
i
 , 70 , 80);

162 
	`DispScoreArea
(
i
 , 80 , 90);

163 
	`DispScoreArea
(
i
 , 90 , 101);

166 
	}
}

	@/usr/include/stdio.h

23 #ifndef 
_STDIO_H


25 #if !
defined
 
__need_FILE
 && !defined 
__need___FILE


26 #define 
	#_STDIO_H
 1

	)

27 #include 
	~<features.h
>

29 
	g__BEGIN_DECLS


31 #define 
	#__need_size_t


	)

32 #define 
	#__need_NULL


	)

33 #include 
	~<stddef.h
>

35 #include 
	~<bits/types.h
>

36 #define 
	#__need_FILE


	)

37 #define 
	#__need___FILE


	)

41 #if !
defined
 
__FILE_defined
 && defined 
__need_FILE


44 struct 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 typedef struct 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #if 
defined
 
__USE_LARGEFILE64
 || defined 
__USE_SVID
 || defined 
__USE_POSIX
 \

51 || 
defined
 
	g__USE_BSD
 || defined 
	g__USE_ISOC99
 || defined 
	g__USE_XOPEN
 \

52 || 
defined
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 #define 
	#__FILE_defined
 1

	)

58 #undef 
__need_FILE


61 #if !
defined
 
____FILE_defined
 && defined 
__need___FILE


64 typedef struct 
_IO_FILE
 
	t__FILE
;

66 #define 
	#____FILE_defined
 1

	)

68 #undef 
__need___FILE


71 #ifdef 
_STDIO_H


72 #define 
	#_STDIO_USES_IOSTREAM


	)

74 #include 
	~<libio.h
>

76 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_XOPEN2K8


77 #ifdef 
__GNUC__


78 #ifndef 
_VA_LIST_DEFINED


79 typedef 
_G_va_list
 
	tva_list
;

80 #define 
	#_VA_LIST_DEFINED


	)

83 #include 
	~<stdarg.h
>

87 #ifdef 
__USE_XOPEN2K8


88 #ifndef 
__off_t_defined


89 #ifndef 
__USE_FILE_OFFSET64


90 typedef 
__off_t
 
	toff_t
;

92 typedef 
__off64_t
 
	toff_t
;

94 #define 
	#__off_t_defined


	)

96 #if 
defined
 
__USE_LARGEFILE64
 && !defined 
__off64_t_defined


97 typedef 
__off64_t
 
	toff64_t
;

98 #define 
	#__off64_t_defined


	)

101 #ifndef 
__ssize_t_defined


102 typedef 
__ssize_t
 
	tssize_t
;

103 #define 
	#__ssize_t_defined


	)

108 
__BEGIN_NAMESPACE_STD


109 #ifndef 
__USE_FILE_OFFSET64


110 typedef 
_G_fpos_t
 
	tfpos_t
;

112 typedef 
_G_fpos64_t
 
	tfpos_t
;

114 
__END_NAMESPACE_STD


115 #ifdef 
__USE_LARGEFILE64


116 typedef 
_G_fpos64_t
 
	tfpos64_t
;

120 #define 
	#_IOFBF
 0

	)

121 #define 
	#_IOLBF
 1

	)

122 #define 
	#_IONBF
 2

	)

126 #ifndef 
BUFSIZ


127 #define 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #ifndef 
EOF


134 #define 
	#EOF
 (-1)

	)

140 #define 
	#SEEK_SET
 0

	)

141 #define 
	#SEEK_CUR
 1

	)

142 #define 
	#SEEK_END
 2

	)

143 #ifdef 
__USE_GNU


144 #define 
	#SEEK_DATA
 3

	)

145 #define 
	#SEEK_HOLE
 4

	)

149 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN


151 #define 
	#P_tmpdir
 "/tmp"

	)

164 #include 
	~<bits/stdio_lim.h
>

168 extern struct 
_IO_FILE
 *
stdin
;

169 extern struct 
_IO_FILE
 *
stdout
;

170 extern struct 
_IO_FILE
 *
stderr
;

172 #define 
	#stdin
 
stdin


	)

173 #define 
	#stdout
 
stdout


	)

174 #define 
	#stderr
 
stderr


	)

176 
__BEGIN_NAMESPACE_STD


178 extern int 
	$remove
 (const char *
__filename
) 
__THROW
;

180 extern int 
	$rename
 (const char *
__old
, const char *
__new
) 
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifdef 
__USE_ATFILE


185 extern int 
	$renameat
 (int 
__oldfd
, const char *
__old
, int 
__newfd
,

186 const char *
__new
) 
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #ifndef 
__USE_FILE_OFFSET64


195 extern 
FILE
 *
	$tmpfile
 (void) 
__wur
;

197 #ifdef 
__REDIRECT


198 extern 
FILE
 *
	`__REDIRECT
 (
tmpfile
, (void), 
tmpfile64
) 
__wur
;

200 #define 
	#tmpfile
 
tmpfile64


	)

204 #ifdef 
__USE_LARGEFILE64


205 extern 
FILE
 *
	$tmpfile64
 (void) 
__wur
;

209 extern char *
	$tmpnam
 (char *
__s
) 
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifdef 
__USE_MISC


215 extern char *
	$tmpnam_r
 (char *
__s
) 
__THROW
 
__wur
;

219 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN


227 extern char *
	$tempnam
 (const char *
__dir
, const char *
__pfx
)

228 
__THROW
 
__attribute_malloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 extern int 
	`fclose
 (
FILE
 *
__stream
);

242 extern int 
	`fflush
 (
FILE
 *
__stream
);

243 
__END_NAMESPACE_STD


245 #ifdef 
__USE_MISC


252 extern int 
	`fflush_unlocked
 (
FILE
 *
__stream
);

255 #ifdef 
__USE_GNU


262 extern int 
	`fcloseall
 (void);

266 
__BEGIN_NAMESPACE_STD


267 #ifndef 
__USE_FILE_OFFSET64


272 extern 
FILE
 *
	$fopen
 (const char *
__restrict
 
__filename
,

273 const char *
__restrict
 
__modes
) 
__wur
;

278 extern 
FILE
 *
	$freopen
 (const char *
__restrict
 
__filename
,

279 const char *
__restrict
 
__modes
,

280 
FILE
 *
__restrict
 
__stream
) 
__wur
;

282 #ifdef 
__REDIRECT


283 extern 
FILE
 *
	`__REDIRECT
 (
fopen
, (const char *
__restrict
 
__filename
,

284 const char *
__restrict
 
__modes
), 
fopen64
)

285 
__wur
;

286 extern 
FILE
 *
	`__REDIRECT
 (
freopen
, (const char *
__restrict
 
__filename
,

287 const char *
__restrict
 
__modes
,

288 
FILE
 *
__restrict
 
__stream
), 
freopen64
)

289 
__wur
;

291 #define 
	#fopen
 
fopen64


	)

292 #define 
	#freopen
 
freopen64


	)

295 
__END_NAMESPACE_STD


296 #ifdef 
__USE_LARGEFILE64


297 extern 
FILE
 *
	$fopen64
 (const char *
__restrict
 
__filename
,

298 const char *
__restrict
 
__modes
) 
__wur
;

299 extern 
FILE
 *
	$freopen64
 (const char *
__restrict
 
__filename
,

300 const char *
__restrict
 
__modes
,

301 
FILE
 *
__restrict
 
__stream
) 
__wur
;

304 #ifdef 
__USE_POSIX


306 extern 
FILE
 *
	$fdopen
 (int 
__fd
, const char *
__modes
) 
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 extern 
FILE
 *
	$fopencookie
 (void *
__restrict
 
__magic_cookie
,

313 const char *
__restrict
 
__modes
,

314 
_IO_cookie_io_functions_t
 
__io_funcs
) 
__THROW
 
__wur
;

317 #ifdef 
__USE_XOPEN2K8


319 extern 
FILE
 *
	$fmemopen
 (void *
__s
, 
size_t
 
__len
, const char *
__modes
)

320 
__THROW
 
__wur
;

325 extern 
FILE
 *
	$open_memstream
 (char **
__bufloc
, 
size_t
 *
__sizeloc
) 
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 extern void 
	$setbuf
 (
FILE
 *
__restrict
 
__stream
, char *__restrict 
__buf
) 
__THROW
;

336 extern int 
	$setvbuf
 (
FILE
 *
__restrict
 
__stream
, char *__restrict 
__buf
,

337 int 
__modes
, 
size_t
 
__n
) 
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 extern void 
	$setbuffer
 (
FILE
 *
__restrict
 
__stream
, char *__restrict 
__buf
,

344 
size_t
 
__size
) 
__THROW
;

347 extern void 
	$setlinebuf
 (
FILE
 *
__stream
) 
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 extern int 
	`fprintf
 (
FILE
 *
__restrict
 
__stream
,

357 const char *
__restrict
 
__format
, ...);

362 extern int 
	`printf
 (const char *
__restrict
 
__format
, ...);

364 extern int 
	$sprintf
 (char *
__restrict
 
__s
,

365 const char *
__restrict
 
__format
, ...) 
__THROWNL
;

371 extern int 
	`vfprintf
 (
FILE
 *
__restrict
 
__s
, const char *__restrict 
__format
,

372 
_G_va_list
 
__arg
);

377 extern int 
	`vprintf
 (const char *
__restrict
 
__format
, 
_G_va_list
 
__arg
);

379 extern int 
	$vsprintf
 (char *
__restrict
 
__s
, const char *__restrict 
__format
,

380 
_G_va_list
 
__arg
) 
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #if 
defined
 
__USE_BSD
 || defined 
__USE_ISOC99
 || defined 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 extern int 
	$snprintf
 (char *
__restrict
 
__s
, 
size_t
 
__maxlen
,

387 const char *
__restrict
 
__format
, ...)

388 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 4)));

390 extern int 
	$vsnprintf
 (char *
__restrict
 
__s
, 
size_t
 
__maxlen
,

391 const char *
__restrict
 
__format
, 
_G_va_list
 
__arg
)

392 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifdef 
__USE_GNU


399 extern int 
	$vasprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__f
,

400 
_G_va_list
 
__arg
)

401 
__THROWNL
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 2, 0))) 
__wur
;

402 extern int 
	$__asprintf
 (char **
__restrict
 
__ptr
,

403 const char *
__restrict
 
__fmt
, ...)

404 
__THROWNL
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 2, 3))) 
__wur
;

405 extern int 
	$asprintf
 (char **
__restrict
 
__ptr
,

406 const char *
__restrict
 
__fmt
, ...)

407 
__THROWNL
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 2, 3))) 
__wur
;

410 #ifdef 
__USE_XOPEN2K8


412 extern int 
	$vdprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
,

413 
_G_va_list
 
__arg
)

414 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 0)));

415 extern int 
	$dprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
, ...)

416 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 extern int 
	$fscanf
 (
FILE
 *
__restrict
 
__stream
,

426 const char *
__restrict
 
__format
, ...) 
__wur
;

431 extern int 
	$scanf
 (const char *
__restrict
 
__format
, ...) 
__wur
;

433 extern int 
	$sscanf
 (const char *
__restrict
 
__s
,

434 const char *
__restrict
 
__format
, ...) 
__THROW
;

436 #if 
defined
 
__USE_ISOC99
 && !defined 
__USE_GNU
 \

437 && (!
defined
 
__LDBL_COMPAT
 || !defined 
__REDIRECT
) \

438 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

439 #ifdef 
__REDIRECT


443 extern int 
	`__REDIRECT
 (
fscanf
, (
FILE
 *
__restrict
 
__stream
,

444 const char *
__restrict
 
__format
, ...),

445 
__isoc99_fscanf
) 
__wur
;

446 extern int 
	`__REDIRECT
 (
scanf
, (const char *
__restrict
 
__format
, ...),

447 
__isoc99_scanf
) 
__wur
;

448 extern int 
	`__REDIRECT_NTH
 (
sscanf
, (const char *
__restrict
 
__s
,

449 const char *
__restrict
 
__format
, ...),

450 
__isoc99_sscanf
);

452 extern int 
	$__isoc99_fscanf
 (
FILE
 *
__restrict
 
__stream
,

453 const char *
__restrict
 
__format
, ...) 
__wur
;

454 extern int 
	$__isoc99_scanf
 (const char *
__restrict
 
__format
, ...) 
__wur
;

455 extern int 
	$__isoc99_sscanf
 (const char *
__restrict
 
__s
,

456 const char *
__restrict
 
__format
, ...) 
__THROW
;

457 #define 
	#fscanf
 
__isoc99_fscanf


	)

458 #define 
	#scanf
 
__isoc99_scanf


	)

459 #define 
	#sscanf
 
__isoc99_sscanf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 extern int 
	$vfscanf
 (
FILE
 *
__restrict
 
__s
, const char *__restrict 
__format
,

472 
_G_va_list
 
__arg
)

473 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 2, 0))) 
__wur
;

479 extern int 
	$vscanf
 (const char *
__restrict
 
__format
, 
_G_va_list
 
__arg
)

480 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 1, 0))) 
__wur
;

483 extern int 
	$vsscanf
 (const char *
__restrict
 
__s
,

484 const char *
__restrict
 
__format
, 
_G_va_list
 
__arg
)

485 
__THROW
 
	`__attribute__
 ((
	`__format__
 (
__scanf__
, 2, 0)));

487 #if !
defined
 
__USE_GNU
 \

488 && (!
defined
 
__LDBL_COMPAT
 || !defined 
__REDIRECT
) \

489 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

490 #ifdef 
__REDIRECT


494 extern int 
	`__REDIRECT
 (
vfscanf
,

495 (
FILE
 *
__restrict
 
__s
,

496 const char *
__restrict
 
__format
, 
_G_va_list
 
__arg
),

497 
__isoc99_vfscanf
)

498 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 2, 0))) 
__wur
;

499 extern int 
	`__REDIRECT
 (
vscanf
, (const char *
__restrict
 
__format
,

500 
_G_va_list
 
__arg
), 
__isoc99_vscanf
)

501 
	`__attribute__
 ((
	$__format__
 (
__scanf__
, 1, 0))) 
__wur
;

502 extern int 
	`__REDIRECT_NTH
 (
vsscanf
,

503 (const char *
__restrict
 
__s
,

504 const char *
__restrict
 
__format
,

505 
_G_va_list
 
__arg
), 
__isoc99_vsscanf
)

506 
	`__attribute__
 ((
	`__format__
 (
__scanf__
, 2, 0)));

508 extern int 
	$__isoc99_vfscanf
 (
FILE
 *
__restrict
 
__s
,

509 const char *
__restrict
 
__format
,

510 
_G_va_list
 
__arg
) 
__wur
;

511 extern int 
	$__isoc99_vscanf
 (const char *
__restrict
 
__format
,

512 
_G_va_list
 
__arg
) 
__wur
;

513 extern int 
	$__isoc99_vsscanf
 (const char *
__restrict
 
__s
,

514 const char *
__restrict
 
__format
,

515 
_G_va_list
 
__arg
) 
__THROW
;

516 #define 
	#vfscanf
 
__isoc99_vfscanf


	)

517 #define 
	#vscanf
 
__isoc99_vscanf


	)

518 #define 
	#vsscanf
 
__isoc99_vsscanf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 extern int 
	`fgetc
 (
FILE
 *
__stream
);

532 extern int 
	`getc
 (
FILE
 *
__stream
);

538 extern int 
	`getchar
 (void);

539 
__END_NAMESPACE_STD


543 #define 
	#getc
(
_fp
) 
	`_IO_getc
 (_fp)

	)

545 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


550 extern int 
	`getc_unlocked
 (
FILE
 *
__stream
);

551 extern int 
	`getchar_unlocked
 (void);

554 #ifdef 
__USE_MISC


561 extern int 
	`fgetc_unlocked
 (
FILE
 *
__stream
);

565 
__BEGIN_NAMESPACE_STD


573 extern int 
	`fputc
 (int 
__c
, 
FILE
 *
__stream
);

574 extern int 
	`putc
 (int 
__c
, 
FILE
 *
__stream
);

580 extern int 
	`putchar
 (int 
__c
);

581 
__END_NAMESPACE_STD


585 #define 
	#putc
(
_ch
, 
_fp
) 
	`_IO_putc
 (_ch, _fp)

	)

587 #ifdef 
__USE_MISC


594 extern int 
	`fputc_unlocked
 (int 
__c
, 
FILE
 *
__stream
);

597 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


602 extern int 
	`putc_unlocked
 (int 
__c
, 
FILE
 *
__stream
);

603 extern int 
	`putchar_unlocked
 (int 
__c
);

607 #if 
defined
 
__USE_SVID
 || defined 
__USE_MISC
 \

608 || (
defined
 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K
)

610 extern int 
	`getw
 (
FILE
 *
__stream
);

613 extern int 
	`putw
 (int 
__w
, 
FILE
 *
__stream
);

617 
__BEGIN_NAMESPACE_STD


622 extern char *
	$fgets
 (char *
__restrict
 
__s
, int 
__n
, 
FILE
 *__restrict 
__stream
)

623 
__wur
;

625 #if !
defined
 
__USE_ISOC11
 \

626 || (
defined
 
__cplusplus
 && __cplusplus <= 201103L)

638 extern char *
	$gets
 (char *
__s
) 
__wur
 
__attribute_deprecated__
;

640 
__END_NAMESPACE_STD


642 #ifdef 
__USE_GNU


649 extern char *
	$fgets_unlocked
 (char *
__restrict
 
__s
, int 
__n
,

650 
FILE
 *
__restrict
 
__stream
) 
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 extern 
_IO_ssize_t
 
	$__getdelim
 (char **
__restrict
 
__lineptr
,

666 
size_t
 *
__restrict
 
__n
, int 
__delimiter
,

667 
FILE
 *
__restrict
 
__stream
) 
__wur
;

668 extern 
_IO_ssize_t
 
	$getdelim
 (char **
__restrict
 
__lineptr
,

669 
size_t
 *
__restrict
 
__n
, int 
__delimiter
,

670 
FILE
 *
__restrict
 
__stream
) 
__wur
;

678 extern 
_IO_ssize_t
 
	$getline
 (char **
__restrict
 
__lineptr
,

679 
size_t
 *
__restrict
 
__n
,

680 
FILE
 *
__restrict
 
__stream
) 
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 extern int 
	`fputs
 (const char *
__restrict
 
__s
, 
FILE
 *__restrict 
__stream
);

695 extern int 
	`puts
 (const char *
__s
);

702 extern int 
	`ungetc
 (int 
__c
, 
FILE
 *
__stream
);

709 extern 
size_t
 
	$fread
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
) 
__wur
;

715 extern 
size_t
 
	`fwrite
 (const void *
__restrict
 
__ptr
, size_t 
__size
,

716 
size_t
 
__n
, 
FILE
 *
__restrict
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifdef 
__USE_GNU


726 extern int 
	`fputs_unlocked
 (const char *
__restrict
 
__s
,

727 
FILE
 *
__restrict
 
__stream
);

730 #ifdef 
__USE_MISC


737 extern 
size_t
 
	$fread_unlocked
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
) 
__wur
;

739 extern 
size_t
 
	`fwrite_unlocked
 (const void *
__restrict
 
__ptr
, size_t 
__size
,

740 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
);

744 
__BEGIN_NAMESPACE_STD


749 extern int 
	`fseek
 (
FILE
 *
__stream
, long int 
__off
, int 
__whence
);

754 extern long int 
	$ftell
 (
FILE
 *
__stream
) 
__wur
;

759 extern void 
	`rewind
 (
FILE
 *
__stream
);

760 
__END_NAMESPACE_STD


767 #if 
defined
 
__USE_LARGEFILE
 || defined 
__USE_XOPEN2K


768 #ifndef 
__USE_FILE_OFFSET64


773 extern int 
	`fseeko
 (
FILE
 *
__stream
, 
__off_t
 
__off
, int 
__whence
);

778 extern 
__off_t
 
	$ftello
 (
FILE
 *
__stream
) 
__wur
;

780 #ifdef 
__REDIRECT


781 extern int 
	`__REDIRECT
 (
fseeko
,

782 (
FILE
 *
__stream
, 
__off64_t
 
__off
, int 
__whence
),

783 
fseeko64
);

784 extern 
__off64_t
 
	`__REDIRECT
 (
ftello
, (
FILE
 *
__stream
), 
ftello64
);

786 #define 
	#fseeko
 
fseeko64


	)

787 #define 
	#ftello
 
ftello64


	)

792 
__BEGIN_NAMESPACE_STD


793 #ifndef 
__USE_FILE_OFFSET64


798 extern int 
	`fgetpos
 (
FILE
 *
__restrict
 
__stream
, 
fpos_t
 *__restrict 
__pos
);

803 extern int 
	`fsetpos
 (
FILE
 *
__stream
, const 
fpos_t
 *
__pos
);

805 #ifdef 
__REDIRECT


806 extern int 
	`__REDIRECT
 (
fgetpos
, (
FILE
 *
__restrict
 
__stream
,

807 
fpos_t
 *
__restrict
 
__pos
), 
fgetpos64
);

808 extern int 
	`__REDIRECT
 (
fsetpos
,

809 (
FILE
 *
__stream
, const 
fpos_t
 *
__pos
), 
fsetpos64
);

811 #define 
	#fgetpos
 
fgetpos64


	)

812 #define 
	#fsetpos
 
fsetpos64


	)

815 
__END_NAMESPACE_STD


817 #ifdef 
__USE_LARGEFILE64


818 extern int 
	`fseeko64
 (
FILE
 *
__stream
, 
__off64_t
 
__off
, int 
__whence
);

819 extern 
__off64_t
 
	$ftello64
 (
FILE
 *
__stream
) 
__wur
;

820 extern int 
	`fgetpos64
 (
FILE
 *
__restrict
 
__stream
, 
fpos64_t
 *__restrict 
__pos
);

821 extern int 
	`fsetpos64
 (
FILE
 *
__stream
, const 
fpos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 extern void 
	$clearerr
 (
FILE
 *
__stream
) 
__THROW
;

828 extern int 
	$feof
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

830 extern int 
	$ferror
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifdef 
__USE_MISC


835 extern void 
	$clearerr_unlocked
 (
FILE
 *
__stream
) 
__THROW
;

836 extern int 
	$feof_unlocked
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

837 extern int 
	$ferror_unlocked
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 extern void 
	`perror
 (const char *
__s
);

847 
__END_NAMESPACE_STD


853 #include 
	~<bits/sys_errlist.h
>

856 #ifdef 
__USE_POSIX


858 extern int 
	$fileno
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

861 #ifdef 
__USE_MISC


863 extern int 
	$fileno_unlocked
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

867 #if (
defined
 
__USE_POSIX2
 || defined 
__USE_SVID
 || defined 
__USE_BSD
 || \

868 
defined
 
__USE_MISC
)

873 extern 
FILE
 *
	$popen
 (const char *
__command
, const char *
__modes
) 
__wur
;

879 extern int 
	`pclose
 (
FILE
 *
__stream
);

883 #ifdef 
__USE_POSIX


885 extern char *
	$ctermid
 (char *
__s
) 
__THROW
;

889 #ifdef 
__USE_XOPEN


891 extern char *
	`cuserid
 (char *
__s
);

895 #ifdef 
__USE_GNU


896 struct 
obstack
;

899 extern int 
	$obstack_printf
 (struct 
obstack
 *
__restrict
 
__obstack
,

900 const char *
__restrict
 
__format
, ...)

901 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 3)));

902 extern int 
	$obstack_vprintf
 (struct 
obstack
 *
__restrict
 
__obstack
,

903 const char *
__restrict
 
__format
,

904 
_G_va_list
 
__args
)

905 
__THROWNL
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 2, 0)));

909 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


913 extern void 
	$flockfile
 (
FILE
 *
__stream
) 
__THROW
;

917 extern int 
	$ftrylockfile
 (
FILE
 *
__stream
) 
__THROW
 
__wur
;

920 extern void 
	$funlockfile
 (
FILE
 *
__stream
) 
__THROW
;

923 #if 
defined
 
__USE_XOPEN
 && !defined 
__USE_XOPEN2K
 && !defined 
__USE_GNU


927 #define 
	#__need_getopt


	)

928 #include 
	~<getopt.h
>

933 #ifdef 
__USE_EXTERN_INLINES


934 #include 
	~<bits/stdio.h
>

936 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__extern_always_inline


937 #include 
	~<bits/stdio2.h
>

939 #ifdef 
__LDBL_COMPAT


940 #include 
	~<bits/stdio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/bits/stdio-ldbl.h

19 #ifndef 
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
fprintf
)

25 
	$__LDBL_REDIR_DECL
 (
printf
)

26 
	$__LDBL_REDIR_DECL
 (
sprintf
)

27 
	$__LDBL_REDIR_DECL
 (
vfprintf
)

28 
	$__LDBL_REDIR_DECL
 (
vprintf
)

29 
	$__LDBL_REDIR_DECL
 (
vsprintf
)

30 #if 
defined
 
__USE_ISOC99
 && !defined 
__USE_GNU
 \

31 && !
defined
 
__REDIRECT
 \

32 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fscanf
, 
__nldbl___isoc99_fscanf
)

34 
	$__LDBL_REDIR1_DECL
 (
scanf
, 
__nldbl___isoc99_scanf
)

35 
	$__LDBL_REDIR1_DECL
 (
sscanf
, 
__nldbl___isoc99_sscanf
)

37 
	$__LDBL_REDIR_DECL
 (
fscanf
)

38 
	$__LDBL_REDIR_DECL
 (
scanf
)

39 
	$__LDBL_REDIR_DECL
 (
sscanf
)

41 
__END_NAMESPACE_STD


43 #if 
defined
 
__USE_BSD
 || defined 
__USE_ISOC99
 || defined 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
snprintf
)

46 
	$__LDBL_REDIR_DECL
 (
vsnprintf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #if !
defined
 
__USE_GNU
 && !defined 
__REDIRECT
 \

53 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfscanf
, 
__nldbl___isoc99_vfscanf
)

55 
	$__LDBL_REDIR1_DECL
 (
vscanf
, 
__nldbl___isoc99_vscanf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsscanf
, 
__nldbl___isoc99_vsscanf
)

58 
	$__LDBL_REDIR_DECL
 (
vfscanf
)

59 
	$__LDBL_REDIR_DECL
 (
vsscanf
)

60 
	$__LDBL_REDIR_DECL
 (
vscanf
)

62 
__END_NAMESPACE_C99


65 #ifdef 
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vdprintf
)

67 
	$__LDBL_REDIR_DECL
 (
dprintf
)

70 #ifdef 
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
vasprintf
)

72 
	$__LDBL_REDIR_DECL
 (
__asprintf
)

73 
	$__LDBL_REDIR_DECL
 (
asprintf
)

74 
	$__LDBL_REDIR_DECL
 (
obstack_printf
)

75 
	$__LDBL_REDIR_DECL
 (
obstack_vprintf
)

78 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


79 
	$__LDBL_REDIR_DECL
 (
__sprintf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__vsprintf_chk
)

81 #if 
defined
 
__USE_BSD
 || defined 
__USE_ISOC99
 || defined 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__snprintf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__vsnprintf_chk
)

85 #if 
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__fprintf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__printf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vfprintf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__vprintf_chk
)

90 #ifdef 
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__dprintf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vdprintf_chk
)

94 #ifdef 
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__asprintf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__vasprintf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__obstack_printf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__obstack_vprintf_chk
)

	@/usr/include/bits/stdio.h

19 #ifndef 
_STDIO_H


23 #ifndef 
__extern_inline


24 #define 
	#__STDIO_INLINE
 
inline


	)

26 #define 
	#__STDIO_INLINE
 
__extern_inline


	)

30 #ifdef 
__USE_EXTERN_INLINES


33 #if !(
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function
)

35 
__STDIO_INLINE
 int

36 
	$vprintf
 (const char *
__restrict
 
__fmt
, 
_G_va_list
 
__arg
)

38 return 
	`vfprintf
 (
stdout
, 
__fmt
, 
__arg
);

39 
	}
}

43 
__STDIO_INLINE
 int

44 
	$getchar
 (void)

46 return 
	`_IO_getc
 (
stdin
);

47 
	}
}

50 #ifdef 
__USE_MISC


52 
__STDIO_INLINE
 int

53 
	$fgetc_unlocked
 (
FILE
 *
__fp
)

55 return 
	`_IO_getc_unlocked
 (
__fp
);

56 
	}
}

60 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


62 
__STDIO_INLINE
 int

63 
	$getc_unlocked
 (
FILE
 *
__fp
)

65 return 
	`_IO_getc_unlocked
 (
__fp
);

66 
	}
}

69 
__STDIO_INLINE
 int

70 
	$getchar_unlocked
 (void)

72 return 
	`_IO_getc_unlocked
 (
stdin
);

73 
	}
}

78 
__STDIO_INLINE
 int

79 
	$putchar
 (int 
__c
)

81 return 
	`_IO_putc
 (
__c
, 
stdout
);

82 
	}
}

85 #ifdef 
__USE_MISC


87 
__STDIO_INLINE
 int

88 
	$fputc_unlocked
 (int 
__c
, 
FILE
 *
__stream
)

90 return 
	`_IO_putc_unlocked
 (
__c
, 
__stream
);

91 
	}
}

95 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


97 
__STDIO_INLINE
 int

98 
	$putc_unlocked
 (int 
__c
, 
FILE
 *
__stream
)

100 return 
	`_IO_putc_unlocked
 (
__c
, 
__stream
);

101 
	}
}

104 
__STDIO_INLINE
 int

105 
	$putchar_unlocked
 (int 
__c
)

107 return 
	`_IO_putc_unlocked
 (
__c
, 
stdout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$getline
 (char **
__lineptr
, 
size_t
 *
__n
, 
FILE
 *
__stream
)

117 return 
	`__getdelim
 (
__lineptr
, 
__n
, '\n', 
__stream
);

118 
	}
}

122 #ifdef 
__USE_MISC


124 
__STDIO_INLINE
 int

125 
__NTH
 (
	$feof_unlocked
 (
FILE
 *
__stream
))

127 return 
	`_IO_feof_unlocked
 (
__stream
);

128 
	}
}

131 
__STDIO_INLINE
 int

132 
__NTH
 (
	$ferror_unlocked
 (
FILE
 *
__stream
))

134 return 
	`_IO_ferror_unlocked
 (
__stream
);

135 
	}
}

141 #if 
defined
 
__USE_MISC
 && defined 
__GNUC__
 && defined 
__OPTIMIZE__
 \

142 && !
defined
 
	g__cplusplus


144 #define 
	#fread_unlocked
(
ptr
, 
size
, 
n
, 
stream
) \

145 (
	`__extension__
 ((
	`__builtin_constant_p
 (
size
) && __builtin_constant_p (
n
) \

146 && (
size_t
) (
size
) * (size_t) (
n
) <= 8 \

147 && (
size_t
) (
size
) != 0) \

148 ? ({ char *
__ptr
 = (char *) (
ptr
); \

149 
FILE
 *
__stream
 = (
stream
); \

150 
size_t
 
__cnt
; \

151 for (
__cnt
 = (
size_t
) (
size
) * (size_t) (
n
); \

152 
__cnt
 > 0; --__cnt) \

154 int 
__c
 = 
	`_IO_getc_unlocked
 (
__stream
); \

155 if (
__c
 == 
EOF
) \

157 *
__ptr
++ = 
__c
; \

159 ((
size_t
) (
size
) * (size_t) (
n
) - 
__cnt
) \

160 / (
size_t
) (
size
); }) \

161 : (((
	`__builtin_constant_p
 (
size
) && (
size_t
) (size) == 0) \

162 || (
	`__builtin_constant_p
 (
n
) && (
size_t
) (n) == 0)) \

164 ? ((void) (
ptr
), (void) (
stream
), (void) (
size
), \

165 (void) (
n
), (
size_t
) 0) \

166 : 
	`fread_unlocked
 (
ptr
, 
size
, 
n
, 
stream
))))

	)

168 #define 
	#fwrite_unlocked
(
ptr
, 
size
, 
n
, 
stream
) \

169 (
	`__extension__
 ((
	`__builtin_constant_p
 (
size
) && __builtin_constant_p (
n
) \

170 && (
size_t
) (
size
) * (size_t) (
n
) <= 8 \

171 && (
size_t
) (
size
) != 0) \

172 ? ({ const char *
__ptr
 = (const char *) (
ptr
); \

173 
FILE
 *
__stream
 = (
stream
); \

174 
size_t
 
__cnt
; \

175 for (
__cnt
 = (
size_t
) (
size
) * (size_t) (
n
); \

176 
__cnt
 > 0; --__cnt) \

177 if (
	`_IO_putc_unlocked
 (*
__ptr
++, 
__stream
) == 
EOF
) \

179 ((
size_t
) (
size
) * (size_t) (
n
) - 
__cnt
) \

180 / (
size_t
) (
size
); }) \

181 : (((
	`__builtin_constant_p
 (
size
) && (
size_t
) (size) == 0) \

182 || (
	`__builtin_constant_p
 (
n
) && (
size_t
) (n) == 0)) \

184 ? ((void) (
ptr
), (void) (
stream
), (void) (
size
), \

185 (void) (
n
), (
size_t
) 0) \

186 : 
	`fwrite_unlocked
 (
ptr
, 
size
, 
n
, 
stream
))))

	)

190 #undef 
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #ifndef 
_STDIO_H


23 extern int 
	$__sprintf_chk
 (char *
__restrict
 
__s
, int 
__flag
, 
size_t
 
__slen
,

24 const char *
__restrict
 
__format
, ...) 
__THROW
;

25 extern int 
	$__vsprintf_chk
 (char *
__restrict
 
__s
, int 
__flag
, 
size_t
 
__slen
,

26 const char *
__restrict
 
__format
,

27 
_G_va_list
 
__ap
) 
__THROW
;

29 #ifdef 
__va_arg_pack


30 
__fortify_function
 int

31 
	`__NTH
 (
	$sprintf
 (char *
__restrict
 
__s
, const char *__restrict 
__fmt
, ...))

33 return 
	`__builtin___sprintf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_arg_pack
 ());

35 
	}
}

36 #elif !
defined
 
__cplusplus


37 #define 
	#sprintf
(
str
, ...) \

38 
	`__builtin___sprintf_chk
 (
str
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__fortify_function
 int

43 
__NTH
 (
	$vsprintf
 (char *
__restrict
 
__s
, const char *__restrict 
__fmt
,

44 
_G_va_list
 
__ap
))

46 return 
	`__builtin___vsprintf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__ap
);

48 
	}
}

50 #if 
defined
 
__USE_BSD
 || defined 
__USE_ISOC99
 || defined 
__USE_UNIX98


52 extern int 
	$__snprintf_chk
 (char *
__restrict
 
__s
, 
size_t
 
__n
, int 
__flag
,

53 
size_t
 
__slen
, const char *
__restrict
 
__format
,

54 ...) 
__THROW
;

55 extern int 
	$__vsnprintf_chk
 (char *
__restrict
 
__s
, 
size_t
 
__n
, int 
__flag
,

56 
size_t
 
__slen
, const char *
__restrict
 
__format
,

57 
_G_va_list
 
__ap
) 
__THROW
;

59 #ifdef 
__va_arg_pack


60 
__fortify_function
 int

61 
	`__NTH
 (
	$snprintf
 (char *
__restrict
 
__s
, 
size_t
 
__n
,

62 const char *
__restrict
 
__fmt
, ...))

64 return 
	`__builtin___snprintf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_arg_pack
 ());

66 
	}
}

67 #elif !
defined
 
__cplusplus


68 #define 
	#snprintf
(
str
, 
len
, ...) \

69 
	`__builtin___snprintf_chk
 (
str
, 
len
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__fortify_function
 int

74 
__NTH
 (
	$vsnprintf
 (char *
__restrict
 
__s
, 
size_t
 
__n
,

75 const char *
__restrict
 
__fmt
, 
_G_va_list
 
__ap
))

77 return 
	`__builtin___vsnprintf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__ap
);

79 
	}
}

83 #if 
__USE_FORTIFY_LEVEL
 > 1

85 extern int 
__fprintf_chk
 (
FILE
 *
__restrict
 
__stream
, int 
__flag
,

86 const char *
__restrict
 
__format
, ...);

87 extern int 
__printf_chk
 (int 
__flag
, const char *
__restrict
 
__format
, ...);

88 extern int 
__vfprintf_chk
 (
FILE
 *
__restrict
 
__stream
, int 
__flag
,

89 const char *
__restrict
 
__format
, 
_G_va_list
 
__ap
);

90 extern int 
__vprintf_chk
 (int 
__flag
, const char *
__restrict
 
__format
,

91 
_G_va_list
 
__ap
);

93 #ifdef 
__va_arg_pack


94 
__fortify_function
 int

95 
	$fprintf
 (
FILE
 *
__restrict
 
__stream
, const char *__restrict 
__fmt
, ...)

97 return 
	`__fprintf_chk
 (
__stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_arg_pack
 ());

99 
	}
}

101 
__fortify_function
 int

102 
	$printf
 (const char *
__restrict
 
__fmt
, ...)

104 return 
	`__printf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_arg_pack
 ());

105 
	}
}

106 #elif !
defined
 
__cplusplus


107 #define 
	#printf
(...) \

108 
	`__printf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 #define 
	#fprintf
(
stream
, ...) \

110 
	`__fprintf_chk
 (
stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__fortify_function
 int

114 
	$vprintf
 (const char *
__restrict
 
__fmt
, 
_G_va_list
 
__ap
)

116 #ifdef 
__USE_EXTERN_INLINES


117 return 
	`__vfprintf_chk
 (
stdout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

119 return 
	`__vprintf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

121 
	}
}

123 
__fortify_function
 int

124 
	$vfprintf
 (
FILE
 *
__restrict
 
__stream
,

125 const char *
__restrict
 
__fmt
, 
_G_va_list
 
__ap
)

127 return 
	`__vfprintf_chk
 (
__stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

128 
	}
}

130 #ifdef 
__USE_XOPEN2K8


131 extern int 
	$__dprintf_chk
 (int 
__fd
, int 
__flag
, const char *
__restrict
 
__fmt
,

132 ...) 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 4)));

133 extern int 
	$__vdprintf_chk
 (int 
__fd
, int 
__flag
,

134 const char *
__restrict
 
__fmt
, 
_G_va_list
 
__arg
)

135 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 0)));

137 #ifdef 
__va_arg_pack


138 
__fortify_function
 int

139 
	$dprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
, ...)

141 return 
	`__dprintf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_arg_pack
 ());

143 
	}
}

144 #elif !
defined
 
__cplusplus


145 #define 
	#dprintf
(
fd
, ...) \

146 
	`__dprintf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__fortify_function
 int

150 
	$vdprintf
 (int 
__fd
, const char *
__restrict
 
__fmt
, 
_G_va_list
 
__ap
)

152 return 
	`__vdprintf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

153 
	}
}

156 #ifdef 
__USE_GNU


158 extern int 
	$__asprintf_chk
 (char **
__restrict
 
__ptr
, int 
__flag
,

159 const char *
__restrict
 
__fmt
, ...)

160 
__THROW
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 3, 4))) 
__wur
;

161 extern int 
	$__vasprintf_chk
 (char **
__restrict
 
__ptr
, int 
__flag
,

162 const char *
__restrict
 
__fmt
, 
_G_va_list
 
__arg
)

163 
__THROW
 
	`__attribute__
 ((
	$__format__
 (
__printf__
, 3, 0))) 
__wur
;

164 extern int 
	$__obstack_printf_chk
 (struct 
obstack
 *
__restrict
 
__obstack
,

165 int 
__flag
, const char *
__restrict
 
__format
,

167 
__THROW
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 4)));

168 extern int 
	$__obstack_vprintf_chk
 (struct 
obstack
 *
__restrict
 
__obstack
,

169 int 
__flag
,

170 const char *
__restrict
 
__format
,

171 
_G_va_list
 
__args
)

172 
__THROW
 
	`__attribute__
 ((
	`__format__
 (
__printf__
, 3, 0)));

174 #ifdef 
__va_arg_pack


175 
__fortify_function
 int

176 
	`__NTH
 (
	$asprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__fmt
, ...))

178 return 
	`__asprintf_chk
 (
__ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_arg_pack
 ());

180 
	}
}

182 
__fortify_function
 int

183 
__NTH
 (
	$__asprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__fmt
,

186 return 
	`__asprintf_chk
 (
__ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_arg_pack
 ());

188 
	}
}

190 
__fortify_function
 int

191 
__NTH
 (
	$obstack_printf
 (struct 
obstack
 *
__restrict
 
__obstack
,

192 const char *
__restrict
 
__fmt
, ...))

194 return 
	`__obstack_printf_chk
 (
__obstack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_arg_pack
 ());

196 
	}
}

197 #elif !
defined
 
__cplusplus


198 #define 
	#asprintf
(
ptr
, ...) \

199 
	`__asprintf_chk
 (
ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 #define 
	#__asprintf
(
ptr
, ...) \

201 
	`__asprintf_chk
 (
ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 #define 
	#obstack_printf
(
obstack
, ...) \

203 
	`__obstack_printf_chk
 (
obstack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__fortify_function
 int

207 
__NTH
 (
	$vasprintf
 (char **
__restrict
 
__ptr
, const char *__restrict 
__fmt
,

208 
_G_va_list
 
__ap
))

210 return 
	`__vasprintf_chk
 (
__ptr
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

211 
	}
}

213 
__fortify_function
 int

214 
__NTH
 (
	$obstack_vprintf
 (struct 
obstack
 *
__restrict
 
__obstack
,

215 const char *
__restrict
 
__fmt
, 
_G_va_list
 
__ap
))

217 return 
	`__obstack_vprintf_chk
 (
__obstack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__ap
);

219 
	}
}

225 #if !
defined
 
__USE_ISOC11
 \

226 || (
defined
 
	g__cplusplus
 && __cplusplus <= 201103L && !defined 
__USE_GNU
)

227 extern char *
	$__gets_chk
 (char *
__str
, 
size_t
) 
__wur
;

228 extern char *
	`__REDIRECT
 (
__gets_warn
, (char *
__str
), 
gets
)

229 
__wur
 
	`__warnattr
 ("please use fgets or getline instead, gets can't "

232 
__fortify_function
 
__wur
 char *

233 
	$gets
 (char *
__str
)

235 if (
	`__bos
 (
__str
) != (
size_t
) -1)

236 return 
	`__gets_chk
 (
__str
, 
	`__bos
 (__str));

237 return 
	`__gets_warn
 (
__str
);

238 
	}
}

241 extern char *
	$__fgets_chk
 (char *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

242 
FILE
 *
__restrict
 
__stream
) 
__wur
;

243 extern char *
	`__REDIRECT
 (
__fgets_alias
,

244 (char *
__restrict
 
__s
, int 
__n
,

245 
FILE
 *
__restrict
 
__stream
), 
fgets
) 
__wur
;

246 extern char *
	`__REDIRECT
 (
__fgets_chk_warn
,

247 (char *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

248 
FILE
 *
__restrict
 
__stream
), 
__fgets_chk
)

249 
__wur
 
	`__warnattr
 ("fgets called with bigger size than length "

252 
__fortify_function
 
__wur
 char *

253 
	$fgets
 (char *
__restrict
 
__s
, int 
__n
, 
FILE
 *__restrict 
__stream
)

255 if (
	`__bos
 (
__s
) != (
size_t
) -1)

257 if (!
	`__builtin_constant_p
 (
__n
) || __n <= 0)

258 return 
	`__fgets_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__stream
);

260 if ((
size_t
) 
__n
 > 
	`__bos
 (
__s
))

261 return 
	`__fgets_chk_warn
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__stream
);

263 return 
	`__fgets_alias
 (
__s
, 
__n
, 
__stream
);

264 
	}
}

266 extern 
size_t
 
	$__fread_chk
 (void *
__restrict
 
__ptr
, 
size_t
 
__ptrlen
,

267 
size_t
 
__size
, size_t 
__n
,

268 
FILE
 *
__restrict
 
__stream
) 
__wur
;

269 extern 
size_t
 
	`__REDIRECT
 (
__fread_alias
,

270 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
),

272 
fread
) 
__wur
;

273 extern 
size_t
 
	`__REDIRECT
 (
__fread_chk_warn
,

274 (void *
__restrict
 
__ptr
, 
size_t
 
__ptrlen
,

275 
size_t
 
__size
, size_t 
__n
,

276 
FILE
 *
__restrict
 
__stream
),

277 
__fread_chk
)

278 
__wur
 
	`__warnattr
 ("fread called with bigger size * nmemb than length "

281 
__fortify_function
 
__wur
 
size_t


282 
	$fread
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
, size_t 
__n
,

283 
FILE
 *
__restrict
 
__stream
)

285 if (
	`__bos0
 (
__ptr
) != (
size_t
) -1)

287 if (!
	`__builtin_constant_p
 (
__size
)

288 || !
	`__builtin_constant_p
 (
__n
)

289 || (
__size
 | 
__n
) >= (((
size_t
) 1) << (8 * sizeof (size_t) / 2)))

290 return 
	`__fread_chk
 (
__ptr
, 
	`__bos0
 (__ptr), 
__size
, 
__n
, 
__stream
);

292 if (
__size
 * 
__n
 > 
	`__bos0
 (
__ptr
))

293 return 
	`__fread_chk_warn
 (
__ptr
, 
	`__bos0
 (__ptr), 
__size
, 
__n
, 
__stream
);

295 return 
	`__fread_alias
 (
__ptr
, 
__size
, 
__n
, 
__stream
);

296 
	}
}

298 #ifdef 
__USE_GNU


299 extern char *
	$__fgets_unlocked_chk
 (char *
__restrict
 
__s
, 
size_t
 
__size
,

300 int 
__n
, 
FILE
 *
__restrict
 
__stream
) 
__wur
;

301 extern char *
	`__REDIRECT
 (
__fgets_unlocked_alias
,

302 (char *
__restrict
 
__s
, int 
__n
,

303 
FILE
 *
__restrict
 
__stream
), 
fgets_unlocked
) 
__wur
;

304 extern char *
	`__REDIRECT
 (
__fgets_unlocked_chk_warn
,

305 (char *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

306 
FILE
 *
__restrict
 
__stream
), 
__fgets_unlocked_chk
)

307 
__wur
 
	`__warnattr
 ("fgets_unlocked called with bigger size than length "

310 
__fortify_function
 
__wur
 char *

311 
	$fgets_unlocked
 (char *
__restrict
 
__s
, int 
__n
, 
FILE
 *__restrict 
__stream
)

313 if (
	`__bos
 (
__s
) != (
size_t
) -1)

315 if (!
	`__builtin_constant_p
 (
__n
) || __n <= 0)

316 return 
	`__fgets_unlocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__stream
);

318 if ((
size_t
) 
__n
 > 
	`__bos
 (
__s
))

319 return 
	`__fgets_unlocked_chk_warn
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__stream
);

321 return 
	`__fgets_unlocked_alias
 (
__s
, 
__n
, 
__stream
);

322 
	}
}

325 #ifdef 
__USE_MISC


326 #undef 
fread_unlocked


327 extern 
size_t
 
	$__fread_unlocked_chk
 (void *
__restrict
 
__ptr
, 
size_t
 
__ptrlen
,

328 
size_t
 
__size
, size_t 
__n
,

329 
FILE
 *
__restrict
 
__stream
) 
__wur
;

330 extern 
size_t
 
	`__REDIRECT
 (
__fread_unlocked_alias
,

331 (void *
__restrict
 
__ptr
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__restrict
 
__stream
),

333 
fread_unlocked
) 
__wur
;

334 extern 
size_t
 
	`__REDIRECT
 (
__fread_unlocked_chk_warn
,

335 (void *
__restrict
 
__ptr
, 
size_t
 
__ptrlen
,

336 
size_t
 
__size
, size_t 
__n
,

337 
FILE
 *
__restrict
 
__stream
),

338 
__fread_unlocked_chk
)

339 
__wur
 
	`__warnattr
 ("fread_unlocked called with bigger size * nmemb than "

342 
__fortify_function
 
__wur
 
size_t


343 
	$fread_unlocked
 (void *
__restrict
 
__ptr
, 
size_t
 
__size
, size_t 
__n
,

344 
FILE
 *
__restrict
 
__stream
)

346 if (
	`__bos0
 (
__ptr
) != (
size_t
) -1)

348 if (!
	`__builtin_constant_p
 (
__size
)

349 || !
	`__builtin_constant_p
 (
__n
)

350 || (
__size
 | 
__n
) >= (((
size_t
) 1) << (8 * sizeof (size_t) / 2)))

351 return 
	`__fread_unlocked_chk
 (
__ptr
, 
	`__bos0
 (__ptr), 
__size
, 
__n
,

352 
__stream
);

354 if (
__size
 * 
__n
 > 
	`__bos0
 (
__ptr
))

355 return 
	`__fread_unlocked_chk_warn
 (
__ptr
, 
	`__bos0
 (__ptr), 
__size
, 
__n
,

356 
__stream
);

359 #ifdef 
__USE_EXTERN_INLINES


360 if (
	`__builtin_constant_p
 (
__size
)

361 && 
	`__builtin_constant_p
 (
__n
)

362 && (
__size
 | 
__n
) < (((
size_t
) 1) << (8 * sizeof (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__cnt
 = 
__size
 * 
__n
;

366 char *
__cptr
 = (char *) 
__ptr
;

367 if (
__cnt
 == 0)

370 for (; 
__cnt
 > 0; --__cnt)

372 int 
__c
 = 
	`_IO_getc_unlocked
 (
__stream
);

373 if (
__c
 == 
EOF
)

375 *
__cptr
++ = 
__c
;

377 return (
__cptr
 - (char *) 
__ptr
) / 
__size
;

380 return 
	`__fread_unlocked_alias
 (
__ptr
, 
__size
, 
__n
, 
__stream
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #if !
defined
 
_STDIO_H
 && !defined 
__need_FOPEN_MAX
 && !defined 
__need_IOV_MAX


22 #ifdef 
_STDIO_H


23 #define 
	#L_tmpnam
 20

	)

24 #define 
	#TMP_MAX
 238328

	)

25 #define 
	#FILENAME_MAX
 4096

	)

27 #ifdef 
__USE_POSIX


28 #define 
	#L_ctermid
 9

	)

29 #if !
defined
 
__USE_XOPEN2K
 || defined 
__USE_GNU


30 #define 
	#L_cuserid
 9

	)

35 #if 
defined
 
__need_FOPEN_MAX
 || defined 
_STDIO_H


36 #undef 
FOPEN_MAX


37 #define 
	#FOPEN_MAX
 16

	)

40 #if 
defined
 
__need_IOV_MAX
 && !defined 
IOV_MAX


41 #define 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/sys_errlist.h

19 #ifndef 
_STDIO_H


25 #ifdef 
__USE_BSD


26 extern int 
sys_nerr
;

27 extern const char *const 
sys_errlist
[];

29 #ifdef 
__USE_GNU


30 extern int 
_sys_nerr
;

31 extern const char *const 
_sys_errlist
[];

	@/usr/include/bits/types.h

23 #ifndef 
_BITS_TYPES_H


24 #define 
	#_BITS_TYPES_H
 1

	)

26 #include 
	~<features.h
>

27 #include 
	~<bits/wordsize.h
>

30 typedef unsigned char 
	t__u_char
;

31 typedef unsigned short int 
	t__u_short
;

32 typedef unsigned int 
	t__u_int
;

33 typedef unsigned long int 
	t__u_long
;

36 typedef signed char 
	t__int8_t
;

37 typedef unsigned char 
	t__uint8_t
;

38 typedef signed short int 
	t__int16_t
;

39 typedef unsigned short int 
	t__uint16_t
;

40 typedef signed int 
	t__int32_t
;

41 typedef unsigned int 
	t__uint32_t
;

42 #if 
__WORDSIZE
 == 64

43 typedef signed long int 
	t__int64_t
;

44 typedef unsigned long int 
	t__uint64_t
;

45 #elif 
defined
 
__GLIBC_HAVE_LONG_LONG


46 
__extension__
 typedef signed long long int 
	t__int64_t
;

47 
__extension__
 typedef unsigned long long int 
	t__uint64_t
;

51 #if 
__WORDSIZE
 == 64

52 typedef long int 
	t__quad_t
;

53 typedef unsigned long int 
	t__u_quad_t
;

54 #elif 
defined
 
__GLIBC_HAVE_LONG_LONG


55 
__extension__
 typedef long long int 
	t__quad_t
;

56 
__extension__
 typedef unsigned long long int 
	t__u_quad_t
;

60 long 
	m__val
[2];

61 } 
	t__quad_t
;

64 
__u_long
 
	m__val
[2];

65 } 
	t__u_quad_t
;

98 #define 
	#__S16_TYPE
 short int

	)

99 #define 
	#__U16_TYPE
 unsigned short int

	)

100 #define 
	#__S32_TYPE
 int

	)

101 #define 
	#__U32_TYPE
 unsigned int

	)

102 #define 
	#__SLONGWORD_TYPE
 long int

	)

103 #define 
	#__ULONGWORD_TYPE
 unsigned long int

	)

104 #if 
__WORDSIZE
 == 32

105 #define 
	#__SQUAD_TYPE
 
__quad_t


	)

106 #define 
	#__UQUAD_TYPE
 
__u_quad_t


	)

107 #define 
	#__SWORD_TYPE
 int

	)

108 #define 
	#__UWORD_TYPE
 unsigned int

	)

109 #define 
	#__SLONG32_TYPE
 long int

	)

110 #define 
	#__ULONG32_TYPE
 unsigned long int

	)

111 #define 
	#__S64_TYPE
 
__quad_t


	)

112 #define 
	#__U64_TYPE
 
__u_quad_t


	)

115 #define 
	#__STD_TYPE
 
__extension__
 typedef

	)

116 #elif 
__WORDSIZE
 == 64

117 #define 
	t__SQUAD_TYPE
 long int

	)

118 #define 
	t__UQUAD_TYPE
 unsigned long int

	)

119 #define 
	t__SWORD_TYPE
 long int

	)

120 #define 
	t__UWORD_TYPE
 unsigned long int

	)

121 #define 
	t__SLONG32_TYPE
 int

	)

122 #define 
	t__ULONG32_TYPE
 unsigned int

	)

123 #define 
	t__S64_TYPE
 long int

	)

124 #define 
	t__U64_TYPE
 unsigned long int

	)

126 #define 
	t__STD_TYPE
 typedef

	)

130 #include 
	~<bits/typesizes.h
>

133 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

134 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

135 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

136 
__STD_TYPE
 
__INO_T_TYPE
 
	g__ino_t
;

137 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__ino64_t
;

138 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

139 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__nlink_t
;

140 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

141 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

142 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

143 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

144 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__clock_t
;

145 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__rlim_t
;

146 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__rlim64_t
;

147 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

148 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

149 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__useconds_t
;

150 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__suseconds_t
;

152 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

153 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

156 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__clockid_t
;

159 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timer_t
;

162 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

167 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blkcnt_t
;

168 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blkcnt64_t
;

171 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblkcnt_t
;

172 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblkcnt64_t
;

175 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfilcnt_t
;

176 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfilcnt64_t
;

179 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsword_t
;

181 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__syscall_slong_t
;

186 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__syscall_ulong_t
;

190 typedef 
__off64_t
 
	t__loff_t
;

191 typedef 
__quad_t
 *
	t__qaddr_t
;

192 typedef char *
	t__caddr_t
;

195 
__STD_TYPE
 
__SWORD_TYPE
 
	g__intptr_t
;

198 
__STD_TYPE
 
__U32_TYPE
 
	g__socklen_t
;

201 #undef 
__STD_TYPE


	@/usr/include/features.h

18 #ifndef 
_FEATURES_H


19 #define 
	#_FEATURES_H
 1

	)

98 #undef 
__USE_ISOC11


99 #undef 
__USE_ISOC99


100 #undef 
__USE_ISOC95


101 #undef 
__USE_ISOCXX11


102 #undef 
__USE_POSIX


103 #undef 
__USE_POSIX2


104 #undef 
__USE_POSIX199309


105 #undef 
__USE_POSIX199506


106 #undef 
__USE_XOPEN


107 #undef 
__USE_XOPEN_EXTENDED


108 #undef 
__USE_UNIX98


109 #undef 
__USE_XOPEN2K


110 #undef 
__USE_XOPEN2KXSI


111 #undef 
__USE_XOPEN2K8


112 #undef 
__USE_XOPEN2K8XSI


113 #undef 
__USE_LARGEFILE


114 #undef 
__USE_LARGEFILE64


115 #undef 
__USE_FILE_OFFSET64


116 #undef 
__USE_BSD


117 #undef 
__USE_SVID


118 #undef 
__USE_MISC


119 #undef 
__USE_ATFILE


120 #undef 
__USE_GNU


121 #undef 
__USE_REENTRANT


122 #undef 
__USE_FORTIFY_LEVEL


123 #undef 
__FAVOR_BSD


124 #undef 
__KERNEL_STRICT_NAMES


128 #ifndef 
_LOOSE_KERNEL_NAMES


129 #define 
	#__KERNEL_STRICT_NAMES


	)

133 #define 
	#__USE_ANSI
 1

	)

142 #if 
defined
 
__GNUC__
 && defined 
__GNUC_MINOR__


143 #define 
	#__GNUC_PREREQ
(
maj
, 
min
) \

144 ((
__GNUC__
 << 16) + 
__GNUC_MINOR__
 >= ((
maj
) << 16) + (
min
))

	)

146 #define 
	#__GNUC_PREREQ
(
maj
, 
min
) 0

	)

151 #if 
defined
 
_BSD_SOURCE
 && \

152 !(
defined
 
	g_POSIX_SOURCE
 || defined 
	g_POSIX_C_SOURCE
 || \

153 
defined
 
	g_XOPEN_SOURCE
 || defined 
	g_GNU_SOURCE
 || defined 
	g_SVID_SOURCE
)

154 #define 
	#__FAVOR_BSD
 1

	)

158 #ifdef 
_GNU_SOURCE


159 #undef 
_ISOC95_SOURCE


160 #define 
	#_ISOC95_SOURCE
 1

	)

161 #undef 
_ISOC99_SOURCE


162 #define 
	#_ISOC99_SOURCE
 1

	)

163 #undef 
_ISOC11_SOURCE


164 #define 
	#_ISOC11_SOURCE
 1

	)

165 #undef 
_POSIX_SOURCE


166 #define 
	#_POSIX_SOURCE
 1

	)

167 #undef 
_POSIX_C_SOURCE


168 #define 
	#_POSIX_C_SOURCE
 200809L

	)

169 #undef 
_XOPEN_SOURCE


170 #define 
	#_XOPEN_SOURCE
 700

	)

171 #undef 
_XOPEN_SOURCE_EXTENDED


172 #define 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

173 #undef 
_LARGEFILE64_SOURCE


174 #define 
	#_LARGEFILE64_SOURCE
 1

	)

175 #undef 
_BSD_SOURCE


176 #define 
	#_BSD_SOURCE
 1

	)

177 #undef 
_SVID_SOURCE


178 #define 
	#_SVID_SOURCE
 1

	)

179 #undef 
_ATFILE_SOURCE


180 #define 
	#_ATFILE_SOURCE
 1

	)

185 #if (!
defined
 
__STRICT_ANSI__
 && !defined 
_ISOC99_SOURCE
 && \

186 !
defined
 
	g_POSIX_SOURCE
 && !defined 
	g_POSIX_C_SOURCE
 && \

187 !
defined
 
	g_XOPEN_SOURCE
 && !defined 
	g_BSD_SOURCE
 && !defined 
	g_SVID_SOURCE
)

188 #define 
	#_BSD_SOURCE
 1

	)

189 #define 
	#_SVID_SOURCE
 1

	)

193 #if (
defined
 
_ISOC11_SOURCE
 \

194 || (
defined
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

195 #define 
	#__USE_ISOC11
 1

	)

199 #if (
defined
 
_ISOC99_SOURCE
 || defined 
_ISOC11_SOURCE
 \

200 || (
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

201 #define 
	#__USE_ISOC99
 1

	)

205 #if (
defined
 
_ISOC99_SOURCE
 || defined 
_ISOC11_SOURCE
 \

206 || (
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

207 #define 
	#__USE_ISOC95
 1

	)

214 #if ((
defined
 
__cplusplus
 && __cplusplus >= 201103L) \

215 || 
defined
 
__GXX_EXPERIMENTAL_CXX0X__
)

216 #define 
	#__USE_ISOCXX11
 1

	)

221 #if ((!
defined
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

222 !
defined
 
_POSIX_SOURCE
 && !defined 
_POSIX_C_SOURCE
)

223 #define 
	#_POSIX_SOURCE
 1

	)

224 #if 
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

225 #define 
	#_POSIX_C_SOURCE
 2

	)

226 #elif 
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

227 #define 
	#_POSIX_C_SOURCE
 199506L

	)

228 #elif 
defined
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

229 #define 
	#_POSIX_C_SOURCE
 200112L

	)

231 #define 
	#_POSIX_C_SOURCE
 200809L

	)

233 #define 
	#__USE_POSIX_IMPLICITLY
 1

	)

236 #if 
defined
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >= 1 || defined 
_XOPEN_SOURCE


237 #define 
	#__USE_POSIX
 1

	)

240 #if 
defined
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 2 || defined 
_XOPEN_SOURCE


241 #define 
	#__USE_POSIX2
 1

	)

244 #if (
_POSIX_C_SOURCE
 - 0) >= 199309L

245 #define 
	#__USE_POSIX199309
 1

	)

248 #if (
_POSIX_C_SOURCE
 - 0) >= 199506L

249 #define 
	#__USE_POSIX199506
 1

	)

252 #if (
_POSIX_C_SOURCE
 - 0) >= 200112L

253 #define 
	#__USE_XOPEN2K
 1

	)

254 #undef 
__USE_ISOC95


255 #define 
	#__USE_ISOC95
 1

	)

256 #undef 
__USE_ISOC99


257 #define 
	#__USE_ISOC99
 1

	)

260 #if (
_POSIX_C_SOURCE
 - 0) >= 200809L

261 #define 
	#__USE_XOPEN2K8
 1

	)

262 #undef 
_ATFILE_SOURCE


263 #define 
	#_ATFILE_SOURCE
 1

	)

266 #ifdef 
_XOPEN_SOURCE


267 #define 
	#__USE_XOPEN
 1

	)

268 #if (
_XOPEN_SOURCE
 - 0) >= 500

269 #define 
	#__USE_XOPEN_EXTENDED
 1

	)

270 #define 
	#__USE_UNIX98
 1

	)

271 #undef 
_LARGEFILE_SOURCE


272 #define 
	#_LARGEFILE_SOURCE
 1

	)

273 #if (
_XOPEN_SOURCE
 - 0) >= 600

274 #if (
_XOPEN_SOURCE
 - 0) >= 700

275 #define 
	#__USE_XOPEN2K8
 1

	)

276 #define 
	#__USE_XOPEN2K8XSI
 1

	)

278 #define 
	#__USE_XOPEN2K
 1

	)

279 #define 
	#__USE_XOPEN2KXSI
 1

	)

280 #undef 
__USE_ISOC95


281 #define 
	#__USE_ISOC95
 1

	)

282 #undef 
__USE_ISOC99


283 #define 
	#__USE_ISOC99
 1

	)

286 #ifdef 
_XOPEN_SOURCE_EXTENDED


287 #define 
	#__USE_XOPEN_EXTENDED
 1

	)

292 #ifdef 
_LARGEFILE_SOURCE


293 #define 
	#__USE_LARGEFILE
 1

	)

296 #ifdef 
_LARGEFILE64_SOURCE


297 #define 
	#__USE_LARGEFILE64
 1

	)

300 #if 
defined
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

301 #define 
	#__USE_FILE_OFFSET64
 1

	)

304 #if 
defined
 
_BSD_SOURCE
 || defined 
_SVID_SOURCE


305 #define 
	#__USE_MISC
 1

	)

308 #ifdef 
_BSD_SOURCE


309 #define 
	#__USE_BSD
 1

	)

312 #ifdef 
_SVID_SOURCE


313 #define 
	#__USE_SVID
 1

	)

316 #ifdef 
_ATFILE_SOURCE


317 #define 
	#__USE_ATFILE
 1

	)

320 #ifdef 
_GNU_SOURCE


321 #define 
	#__USE_GNU
 1

	)

324 #if 
defined
 
_REENTRANT
 || defined 
_THREAD_SAFE


325 #define 
	#__USE_REENTRANT
 1

	)

328 #if 
defined
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

329 && 
__GNUC_PREREQ
 (4, 1) && 
defined
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

330 #if 
_FORTIFY_SOURCE
 > 1

331 #define 
	#__USE_FORTIFY_LEVEL
 2

	)

333 #define 
	#__USE_FORTIFY_LEVEL
 1

	)

336 #define 
	#__USE_FORTIFY_LEVEL
 0

	)

341 #include 
	~<stdc-predef.h
>

349 #undef 
__GNU_LIBRARY__


350 #define 
	#__GNU_LIBRARY__
 6

	)

354 #define 
	#__GLIBC__
 2

	)

355 #define 
	#__GLIBC_MINOR__
 17

	)

357 #define 
	#__GLIBC_PREREQ
(
maj
, 
min
) \

358 ((
__GLIBC__
 << 16) + 
__GLIBC_MINOR__
 >= ((
maj
) << 16) + (
min
))

	)

361 #if 
defined
 
__GNUC__
 \

362 || (
defined
 
	g__PGI
 && defined 
	g__i386__
 ) \

363 || (
defined
 
	g__INTEL_COMPILER
 && (defined 
	g__i386__
 || defined 
	g__ia64__
)) \

364 || (
defined
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

365 #define 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

369 #ifndef 
__ASSEMBLER__


370 #ifndef 
_SYS_CDEFS_H


371 #include 
	~<sys/cdefs.h
>

376 #if 
defined
 
__USE_FILE_OFFSET64
 && !defined 
__REDIRECT


377 #define 
	#__USE_LARGEFILE
 1

	)

378 #define 
	#__USE_LARGEFILE64
 1

	)

384 #if 
__GNUC_PREREQ
 (2, 7) && 
defined
 
__OPTIMIZE__
 \

385 && !
defined
 
	g__OPTIMIZE_SIZE__
 && !defined 
	g__NO_INLINE__
 \

386 && 
defined
 
	g__extern_inline


387 #define 
	#__USE_EXTERN_INLINES
 1

	)

395 #include 
	~<gnu/stubs.h
>

	@/usr/include/getopt.h

20 #ifndef 
_GETOPT_H


22 #ifndef 
__need_getopt


23 #define 
	#_GETOPT_H
 1

	)

33 #if !
defined
 
__GNU_LIBRARY__


34 #include 
	~<ctype.h
>

37 #ifndef 
__THROW


38 #ifndef 
__GNUC_PREREQ


39 #define 
	#__GNUC_PREREQ
(
maj
, 
min
) (0)

	)

41 #if 
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (2,8)

42 #define 
	#__THROW
 
	`throw
 ()

	)

44 #define 
	#__THROW


	)

48 #ifdef 
__cplusplus


58 extern char *
optarg
;

72 extern int 
optind
;

77 extern int 
opterr
;

81 extern int 
optopt
;

83 #ifndef 
__need_getopt


105 struct 
	soption


107 const char *
	gname
;

110 int 
	ghas_arg
;

111 int *
	gflag
;

112 int 
	gval
;

117 #define 
	#no_argument
 0

	)

118 #define 
	#required_argument
 1

	)

119 #define 
	#optional_argument
 2

	)

147 #ifdef 
__GNU_LIBRARY__


151 extern int 
getopt
 (int 
___argc
, char *const *
___argv
, const char *
__shortopts
)

152 
__THROW
;

154 #if 
defined
 
__need_getopt
 && defined 
__USE_POSIX2
 \

155 && !
defined
 
	g__USE_POSIX_IMPLICITLY
 && !defined 
	g__USE_GNU


159 #ifdef 
__REDIRECT


160 extern int 
__REDIRECT_NTH
 (
getopt
, (int 
___argc
, char *const *
___argv
,

161 const char *
__shortopts
),

162 
__posix_getopt
);

164 extern int 
__posix_getopt
 (int 
___argc
, char *const *
___argv
,

165 const char *
__shortopts
) 
__THROW
;

166 #define 
	#getopt
 
__posix_getopt


	)

170 extern int 
getopt
 ();

173 #ifndef 
__need_getopt


174 extern int 
getopt_long
 (int 
___argc
, char *const *
___argv
,

175 const char *
__shortopts
,

176 const struct 
option
 *
__longopts
, int *
__longind
)

177 
__THROW
;

178 extern int 
getopt_long_only
 (int 
___argc
, char *const *
___argv
,

179 const char *
__shortopts
,

180 const struct 
option
 *
__longopts
, int *
__longind
)

181 
__THROW
;

185 #ifdef 
__cplusplus


190 #undef 
__need_getopt


	@/usr/include/libio.h

29 #ifndef 
_IO_STDIO_H


30 #define 
	#_IO_STDIO_H


	)

32 #include 
	~<_G_config.h
>

34 #define 
	#_IO_fpos_t
 
_G_fpos_t


	)

35 #define 
	#_IO_fpos64_t
 
_G_fpos64_t


	)

36 #define 
	#_IO_size_t
 
size_t


	)

37 #define 
	#_IO_ssize_t
 
__ssize_t


	)

38 #define 
	#_IO_off_t
 
__off_t


	)

39 #define 
	#_IO_off64_t
 
__off64_t


	)

40 #define 
	#_IO_pid_t
 
__pid_t


	)

41 #define 
	#_IO_uid_t
 
__uid_t


	)

42 #define 
	#_IO_iconv_t
 
_G_iconv_t


	)

43 #define 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

44 #define 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

45 #define 
	#_IO_va_list
 
_G_va_list


	)

46 #define 
	#_IO_wint_t
 
wint_t


	)

49 #define 
	#__need___va_list


	)

50 #include 
	~<stdarg.h
>

51 #ifdef 
__GNUC_VA_LIST


52 #undef 
_IO_va_list


53 #define 
	#_IO_va_list
 
__gnuc_va_list


	)

56 #ifndef 
__P


57 #include 
	~<sys/cdefs.h
>

60 #define 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

62 #ifndef 
EOF


63 #define 
	#EOF
 (-1)

	)

65 #ifndef 
NULL


66 #if 
defined
 
__GNUG__
 && \

67 (
	g__GNUC__
 > 2 || (__GNUC__ == 2 && 
__GNUC_MINOR__
 >= 8))

68 #define 
	#NULL
 (
__null
)

	)

70 #if !
defined
(
__cplusplus
)

71 #define 
	#NULL
 ((void*)0)

	)

73 #define 
	#NULL
 (0)

	)

78 #define 
	#_IOS_INPUT
 1

	)

79 #define 
	#_IOS_OUTPUT
 2

	)

80 #define 
	#_IOS_ATEND
 4

	)

81 #define 
	#_IOS_APPEND
 8

	)

82 #define 
	#_IOS_TRUNC
 16

	)

83 #define 
	#_IOS_NOCREATE
 32

	)

84 #define 
	#_IOS_NOREPLACE
 64

	)

85 #define 
	#_IOS_BIN
 128

	)

93 #define 
	#_IO_MAGIC
 0xFBAD0000

	)

94 #define 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

95 #define 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

96 #define 
	#_IO_USER_BUF
 1

	)

97 #define 
	#_IO_UNBUFFERED
 2

	)

98 #define 
	#_IO_NO_READS
 4

	)

99 #define 
	#_IO_NO_WRITES
 8

	)

100 #define 
	#_IO_EOF_SEEN
 0x10

	)

101 #define 
	#_IO_ERR_SEEN
 0x20

	)

102 #define 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

103 #define 
	#_IO_LINKED
 0x80

	)

104 #define 
	#_IO_IN_BACKUP
 0x100

	)

105 #define 
	#_IO_LINE_BUF
 0x200

	)

106 #define 
	#_IO_TIED_PUT_GET
 0x400

	)

107 #define 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

108 #define 
	#_IO_IS_APPENDING
 0x1000

	)

109 #define 
	#_IO_IS_FILEBUF
 0x2000

	)

110 #define 
	#_IO_BAD_SEEN
 0x4000

	)

111 #define 
	#_IO_USER_LOCK
 0x8000

	)

113 #define 
	#_IO_FLAGS2_MMAP
 1

	)

114 #define 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

115 #ifdef 
_LIBC


116 #define 
	#_IO_FLAGS2_FORTIFY
 4

	)

118 #define 
	#_IO_FLAGS2_USER_WBUF
 8

	)

119 #ifdef 
_LIBC


120 #define 
	#_IO_FLAGS2_SCANF_STD
 16

	)

121 #define 
	#_IO_FLAGS2_NOCLOSE
 32

	)

122 #define 
	#_IO_FLAGS2_CLOEXEC
 64

	)

126 #define 
	#_IO_SKIPWS
 01

	)

127 #define 
	#_IO_LEFT
 02

	)

128 #define 
	#_IO_RIGHT
 04

	)

129 #define 
	#_IO_INTERNAL
 010

	)

130 #define 
	#_IO_DEC
 020

	)

131 #define 
	#_IO_OCT
 040

	)

132 #define 
	#_IO_HEX
 0100

	)

133 #define 
	#_IO_SHOWBASE
 0200

	)

134 #define 
	#_IO_SHOWPOINT
 0400

	)

135 #define 
	#_IO_UPPERCASE
 01000

	)

136 #define 
	#_IO_SHOWPOS
 02000

	)

137 #define 
	#_IO_SCIENTIFIC
 04000

	)

138 #define 
	#_IO_FIXED
 010000

	)

139 #define 
	#_IO_UNITBUF
 020000

	)

140 #define 
	#_IO_STDIO
 040000

	)

141 #define 
	#_IO_DONT_CLOSE
 0100000

	)

142 #define 
	#_IO_BOOLALPHA
 0200000

	)

145 struct 
_IO_jump_t
; struct 
	g_IO_FILE
;

148 #ifdef 
_IO_MTSAFE_IO


149 #if 
defined
 
__GLIBC__
 && __GLIBC__ >= 2

150 #include 
	~<bits/stdio-lock.h
>

155 typedef void 
	t_IO_lock_t
;

161 struct 
	s_IO_marker
 {

162 struct 
_IO_marker
 *
	m_next
;

163 struct 
_IO_FILE
 *
	m_sbuf
;

167 int 
	m_pos
;

169 void 
set_streampos
(
streampos
 
sp
) { 
	m_spos
 = sp; }

170 void 
set_offset
(int 
offset
) { 
	m_pos
 = offset; 
	m_spos
 = (
streampos
)(-2); }

171 
	mpublic
:

172 
streammarker
(
streambuf
 *
sb
);

173 ~
streammarker
();

174 int 
saving
() { return 
	m_spos
 == -2; }

175 int 
delta
(
streammarker
&);

176 int 
delta
();

181 enum 
	e__codecvt_result


183 
	m__codecvt_ok
,

184 
	m__codecvt_partial
,

185 
	m__codecvt_error
,

186 
	m__codecvt_noconv


189 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


192 struct 
	s_IO_codecvt


194 void (*
	m__codecvt_destr
) (struct 
	m_IO_codecvt
 *);

195 enum 
__codecvt_result
 (*
__codecvt_do_out
) (struct 
	m_IO_codecvt
 *,

196 
	m__mbstate_t
 *,

197 const 
	mwchar_t
 *,

198 const 
	mwchar_t
 *,

199 const 
	mwchar_t
 **, char *,

201 enum 
__codecvt_result
 (*
__codecvt_do_unshift
) (struct 
	m_IO_codecvt
 *,

202 
	m__mbstate_t
 *, char *,

204 enum 
__codecvt_result
 (*
__codecvt_do_in
) (struct 
	m_IO_codecvt
 *,

205 
	m__mbstate_t
 *,

207 const char **, 
	mwchar_t
 *,

208 
	mwchar_t
 *, wchar_t **);

209 int (*
	m__codecvt_do_encoding
) (struct 
	m_IO_codecvt
 *);

210 int (*
	m__codecvt_do_always_noconv
) (struct 
	m_IO_codecvt
 *);

211 int (*
	m__codecvt_do_length
) (struct 
	m_IO_codecvt
 *, 
	m__mbstate_t
 *,

212 const char *, const char *, 
	m_IO_size_t
);

213 int (*
	m__codecvt_do_max_length
) (struct 
	m_IO_codecvt
 *);

215 
_IO_iconv_t
 
	m__cd_in
;

216 
_IO_iconv_t
 
	m__cd_out
;

220 struct 
	s_IO_wide_data


222 
wchar_t
 *
	m_IO_read_ptr
;

223 
wchar_t
 *
	m_IO_read_end
;

224 
wchar_t
 *
	m_IO_read_base
;

225 
wchar_t
 *
	m_IO_write_base
;

226 
wchar_t
 *
	m_IO_write_ptr
;

227 
wchar_t
 *
	m_IO_write_end
;

228 
wchar_t
 *
	m_IO_buf_base
;

229 
wchar_t
 *
	m_IO_buf_end
;

231 
wchar_t
 *
	m_IO_save_base
;

232 
wchar_t
 *
	m_IO_backup_base
;

234 
wchar_t
 *
	m_IO_save_end
;

236 
__mbstate_t
 
	m_IO_state
;

237 
__mbstate_t
 
	m_IO_last_state
;

238 struct 
_IO_codecvt
 
	m_codecvt
;

240 
wchar_t
 
	m_shortbuf
[1];

242 const struct 
_IO_jump_t
 *
	m_wide_vtable
;

246 struct 
	s_IO_FILE
 {

247 int 
	m_flags
;

248 #define 
	#_IO_file_flags
 
_flags


	)

252 char* 
	m_IO_read_ptr
;

253 char* 
	m_IO_read_end
;

254 char* 
	m_IO_read_base
;

255 char* 
	m_IO_write_base
;

256 char* 
	m_IO_write_ptr
;

257 char* 
	m_IO_write_end
;

258 char* 
	m_IO_buf_base
;

259 char* 
	m_IO_buf_end
;

261 char *
	m_IO_save_base
;

262 char *
	m_IO_backup_base
;

263 char *
	m_IO_save_end
;

265 struct 
_IO_marker
 *
	m_markers
;

267 struct 
_IO_FILE
 *
	m_chain
;

269 int 
	m_fileno
;

271 int 
	m_blksize
;

273 int 
	m_flags2
;

275 
_IO_off_t
 
	m_old_offset
;

277 #define 
	#__HAVE_COLUMN


	)

279 unsigned short 
	m_cur_column
;

280 signed char 
	m_vtable_offset
;

281 char 
	m_shortbuf
[1];

285 
_IO_lock_t
 *
	m_lock
;

286 #ifdef 
_IO_USE_OLD_IO_FILE


289 struct 
	s_IO_FILE_complete


291 struct 
_IO_FILE
 
	m_file
;

293 #if 
defined
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

294 
_IO_off64_t
 
	m_offset
;

295 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


297 struct 
_IO_codecvt
 *
	m_codecvt
;

298 struct 
_IO_wide_data
 *
	m_wide_data
;

299 struct 
_IO_FILE
 *
	m_freeres_list
;

300 void *
	m_freeres_buf
;

301 
size_t
 
	m_freeres_size
;

303 void *
	m__pad1
;

304 void *
	m__pad2
;

305 void *
	m__pad3
;

306 void *
	m__pad4
;

307 
size_t
 
	m__pad5
;

309 int 
	m_mode
;

311 char 
	m_unused2
[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (
size_t
)];

315 #ifndef 
__cplusplus


316 typedef struct 
_IO_FILE
 
	t_IO_FILE
;

319 struct 
	g_IO_FILE_plus
;

321 extern struct 
_IO_FILE_plus
 
_IO_2_1_stdin_
;

322 extern struct 
_IO_FILE_plus
 
_IO_2_1_stdout_
;

323 extern struct 
_IO_FILE_plus
 
_IO_2_1_stderr_
;

324 #ifndef 
_LIBC


325 #define 
	#_IO_stdin
 ((
_IO_FILE
*)(&
_IO_2_1_stdin_
))

	)

326 #define 
	#_IO_stdout
 ((
_IO_FILE
*)(&
_IO_2_1_stdout_
))

	)

327 #define 
	#_IO_stderr
 ((
_IO_FILE
*)(&
_IO_2_1_stderr_
))

	)

329 extern 
_IO_FILE
 *
_IO_stdin
 
attribute_hidden
;

330 extern 
_IO_FILE
 *
_IO_stdout
 
attribute_hidden
;

331 extern 
_IO_FILE
 *
_IO_stderr
 
attribute_hidden
;

339 typedef 
__ssize_t
 
	t__io_read_fn
 (void *
	t__cookie
, char *
	t__buf
, 
	tsize_t
 
	t__nbytes
);

347 typedef 
__ssize_t
 
	t__io_write_fn
 (void *
	t__cookie
, const char *
	t__buf
,

348 
	tsize_t
 
	t__n
);

356 typedef int 
	t__io_seek_fn
 (void *
	t__cookie
, 
	t_IO_off64_t
 *
	t__pos
, int 
	t__w
);

359 typedef int 
	t__io_close_fn
 (void *
	t__cookie
);

362 #ifdef 
_GNU_SOURCE


364 typedef 
__io_read_fn
 
	tcookie_read_function_t
;

365 typedef 
__io_write_fn
 
	tcookie_write_function_t
;

366 typedef 
__io_seek_fn
 
	tcookie_seek_function_t
;

367 typedef 
__io_close_fn
 
	tcookie_close_function_t
;

372 
__io_read_fn
 *
	mread
;

373 
__io_write_fn
 *
	mwrite
;

374 
__io_seek_fn
 *
	mseek
;

375 
__io_close_fn
 *
	mclose
;

376 } 
	t_IO_cookie_io_functions_t
;

377 typedef 
_IO_cookie_io_functions_t
 
	tcookie_io_functions_t
;

379 struct 
	g_IO_cookie_file
;

382 extern void 
_IO_cookie_init
 (struct 
_IO_cookie_file
 *
__cfile
, int 
__read_write
,

383 void *
__cookie
, 
_IO_cookie_io_functions_t
 
__fns
);

387 #ifdef 
__cplusplus


391 extern int 
__underflow
 (
_IO_FILE
 *);

392 extern int 
__uflow
 (
_IO_FILE
 *);

393 extern int 
__overflow
 (
_IO_FILE
 *, int);

394 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


395 extern 
_IO_wint_t
 
__wunderflow
 (
_IO_FILE
 *);

396 extern 
_IO_wint_t
 
__wuflow
 (
_IO_FILE
 *);

397 extern 
_IO_wint_t
 
__woverflow
 (
_IO_FILE
 *, _IO_wint_t);

400 #if 
__GNUC__
 >= 3

401 #define 
	#_IO_BE
(
expr
, 
res
) 
	`__builtin_expect
 ((expr), res)

	)

403 #define 
	#_IO_BE
(
expr
, 
res
) (expr)

	)

406 #define 
	#_IO_getc_unlocked
(
_fp
) \

407 (
	`_IO_BE
 ((
_fp
)->
_IO_read_ptr
 >= (_fp)->
_IO_read_end
, 0) \

408 ? 
	`__uflow
 (
_fp
) : *(unsigned char *) (_fp)->
_IO_read_ptr
++)

	)

409 #define 
	#_IO_peekc_unlocked
(
_fp
) \

410 (
	`_IO_BE
 ((
_fp
)->
_IO_read_ptr
 >= (_fp)->
_IO_read_end
, 0) \

411 && 
	`__underflow
 (
_fp
) == 
EOF
 ? EOF \

412 : *(unsigned char *) (
_fp
)->
_IO_read_ptr
)

	)

413 #define 
	#_IO_putc_unlocked
(
_ch
, 
_fp
) \

414 (
	`_IO_BE
 ((
_fp
)->
_IO_write_ptr
 >= (_fp)->
_IO_write_end
, 0) \

415 ? 
	`__overflow
 (
_fp
, (unsigned char) (
_ch
)) \

416 : (unsigned char) (*(
_fp
)->
_IO_write_ptr
++ = (
_ch
)))

	)

418 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


419 #define 
	#_IO_getwc_unlocked
(
_fp
) \

420 (
	`_IO_BE
 ((
_fp
)->
_wide_data
 == 
NULL
 \

421 || ((
_fp
)->
_wide_data
->
_IO_read_ptr
 \

422 >= (
_fp
)->
_wide_data
->
_IO_read_end
), 0) \

423 ? 
	`__wuflow
 (
_fp
) : (
_IO_wint_t
) *(_fp)->
_wide_data
->
_IO_read_ptr
++)

	)

424 #define 
	#_IO_putwc_unlocked
(
_wch
, 
_fp
) \

425 (
	`_IO_BE
 ((
_fp
)->
_wide_data
 == 
NULL
 \

426 || ((
_fp
)->
_wide_data
->
_IO_write_ptr
 \

427 >= (
_fp
)->
_wide_data
->
_IO_write_end
), 0) \

428 ? 
	`__woverflow
 (
_fp
, 
_wch
) \

429 : (
_IO_wint_t
) (*(
_fp
)->
_wide_data
->
_IO_write_ptr
++ = (
_wch
)))

	)

432 #define 
	#_IO_feof_unlocked
(
__fp
) (((__fp)->
_flags
 & 
_IO_EOF_SEEN
) != 0)

	)

433 #define 
	#_IO_ferror_unlocked
(
__fp
) (((__fp)->
_flags
 & 
_IO_ERR_SEEN
) != 0)

	)

435 extern int 
_IO_getc
 (
_IO_FILE
 *
__fp
);

436 extern int 
_IO_putc
 (int 
__c
, 
_IO_FILE
 *
__fp
);

437 extern int 
_IO_feof
 (
_IO_FILE
 *
__fp
) 
__THROW
;

438 extern int 
_IO_ferror
 (
_IO_FILE
 *
__fp
) 
__THROW
;

440 extern int 
_IO_peekc_locked
 (
_IO_FILE
 *
__fp
);

443 #define 
	#_IO_PENDING_OUTPUT_COUNT
(
_fp
) \

444 ((
_fp
)->
_IO_write_ptr
 - (_fp)->
_IO_write_base
)

	)

446 extern void 
_IO_flockfile
 (
_IO_FILE
 *) 
__THROW
;

447 extern void 
_IO_funlockfile
 (
_IO_FILE
 *) 
__THROW
;

448 extern int 
_IO_ftrylockfile
 (
_IO_FILE
 *) 
__THROW
;

450 #ifdef 
_IO_MTSAFE_IO


451 #define 
	#_IO_peekc
(
_fp
) 
	`_IO_peekc_locked
 (_fp)

	)

452 #define 
	#_IO_flockfile
(
_fp
) \

453 if (((
_fp
)->
_flags
 & 
_IO_USER_LOCK
) == 0) 
	`_IO_flockfile
 (_fp)

	)

454 #define 
	#_IO_funlockfile
(
_fp
) \

455 if (((
_fp
)->
_flags
 & 
_IO_USER_LOCK
) == 0) 
	`_IO_funlockfile
 (_fp)

	)

457 #define 
	#_IO_peekc
(
_fp
) 
	`_IO_peekc_unlocked
 (_fp)

	)

458 #define 
	#_IO_flockfile
(
_fp
)

	)

459 #define 
	#_IO_funlockfile
(
_fp
)

	)

460 #define 
	#_IO_ftrylockfile
(
_fp
)

	)

461 #define 
	#_IO_cleanup_region_start
(
_fct
, 
_fp
)

	)

462 #define 
	#_IO_cleanup_region_end
(
_Doit
)

	)

465 extern int 
_IO_vfscanf
 (
_IO_FILE
 * 
__restrict
, const char * __restrict,

466 
_IO_va_list
, int *
__restrict
);

467 extern int 
_IO_vfprintf
 (
_IO_FILE
 *
__restrict
, const char *__restrict,

468 
_IO_va_list
);

469 extern 
_IO_ssize_t
 
_IO_padn
 (
_IO_FILE
 *, int, _IO_ssize_t);

470 extern 
_IO_size_t
 
_IO_sgetn
 (
_IO_FILE
 *, void *, _IO_size_t);

472 extern 
_IO_off64_t
 
_IO_seekoff
 (
_IO_FILE
 *, _IO_off64_t, int, int);

473 extern 
_IO_off64_t
 
_IO_seekpos
 (
_IO_FILE
 *, _IO_off64_t, int);

475 extern void 
_IO_free_backup_area
 (
_IO_FILE
 *) 
__THROW
;

477 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


478 extern 
_IO_wint_t
 
_IO_getwc
 (
_IO_FILE
 *
__fp
);

479 extern 
_IO_wint_t
 
_IO_putwc
 (
wchar_t
 
__wc
, 
_IO_FILE
 *
__fp
);

480 extern int 
_IO_fwide
 (
_IO_FILE
 *
__fp
, int 
__mode
) 
__THROW
;

481 #if 
__GNUC__
 >= 2

484 #if 
defined
 
_LIBC
 && defined 
SHARED


485 #include 
	~<shlib-compat.h
>

486 #if 
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

487 #define 
	#_IO_fwide_maybe_incompatible
 \

488 (
	`__builtin_expect
 (&
_IO_stdin_used
 == 
NULL
, 0))

	)

489 extern const int 
_IO_stdin_used
;

490 
weak_extern
 (
_IO_stdin_used
);

493 #ifndef 
_IO_fwide_maybe_incompatible


494 #define 
	#_IO_fwide_maybe_incompatible
 (0)

	)

498 #define 
	#_IO_fwide
(
__fp
, 
__mode
) \

499 ({ int 
__result
 = (
__mode
); \

500 if (
__result
 < 0 && ! 
_IO_fwide_maybe_incompatible
) \

502 if ((
__fp
)->
_mode
 == 0) \

504 (
__fp
)->
_mode
 = -1; \

505 
__result
 = (
__fp
)->
_mode
; \

507 else if (
	`__builtin_constant_p
 (
__mode
) && (__mode) == 0) \

508 
__result
 = 
_IO_fwide_maybe_incompatible
 ? -1 : (
__fp
)->
_mode
; \

510 
__result
 = 
	`_IO_fwide
 (
__fp
, __result); \

511 
__result
; })

	)

514 extern int 
_IO_vfwscanf
 (
_IO_FILE
 * 
__restrict
, const 
wchar_t
 * __restrict,

515 
_IO_va_list
, int *
__restrict
);

516 extern int 
_IO_vfwprintf
 (
_IO_FILE
 *
__restrict
, const 
wchar_t
 *__restrict,

517 
_IO_va_list
);

518 extern 
_IO_ssize_t
 
_IO_wpadn
 (
_IO_FILE
 *, 
wint_t
, _IO_ssize_t);

519 extern void 
_IO_free_wbackup_area
 (
_IO_FILE
 *) 
__THROW
;

522 #ifdef 
__LDBL_COMPAT


523 #include 
	~<bits/libio-ldbl.h
>

526 #ifdef 
__cplusplus


	@/usr/include/_G_config.h

4 #ifndef 
_G_config_h


5 #define 
	#_G_config_h
 1

	)

9 #include 
	~<bits/types.h
>

10 #define 
	#__need_size_t


	)

11 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


12 #define 
	#__need_wchar_t


	)

14 #define 
	#__need_NULL


	)

15 #include 
	~<stddef.h
>

16 #define 
	#__need_mbstate_t


	)

17 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


18 #define 
	#__need_wint_t


	)

20 #include 
	~<wchar.h
>

23 
__off_t
 
	m__pos
;

24 
__mbstate_t
 
	m__state
;

25 } 
	t_G_fpos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mbstate_t
 
	m__state
;

30 } 
	t_G_fpos64_t
;

31 #if 
defined
 
_LIBC
 || defined 
_GLIBCPP_USE_WCHAR_T


32 #include 
	~<gconv.h
>

35 struct 
__gconv_info
 
	m__cd
;

38 struct 
__gconv_info
 
	m__cd
;

39 struct 
__gconv_step_data
 
	m__data
;

40 } 
	m__combined
;

41 } 
	t_G_iconv_t
;

46 #define 
	#_G_va_list
 
__gnuc_va_list


	)

48 #define 
	#_G_HAVE_MMAP
 1

	)

49 #define 
	#_G_HAVE_MREMAP
 1

	)

51 #define 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 #define 
	#_G_HAVE_ST_BLKSIZE
 
	`defined
 (
_STATBUF_ST_BLKSIZE
)

	)

56 #define 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/bits/libio-ldbl.h

19 #ifndef 
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfscanf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vfprintf
)

	@/usr/include/bits/stdio-lock.h

19 #ifndef 
_BITS_STDIO_LOCK_H


20 #define 
	#_BITS_STDIO_LOCK_H
 1

	)

22 #include 
	~<bits/libc-lock.h
>

23 #include 
	~<lowlevellock.h
>

27 #define 
	#_IO_lock_inexpensive
 1

	)

29 typedef struct { int 
	mlock
; int 
	mcnt
; void *
	mowner
; } 
	t_IO_lock_t
;

31 #define 
	#_IO_lock_initializer
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

33 #define 
	#_IO_lock_init
(
_name
) \

34 ((
_name
) = (
_IO_lock_t
) 
_IO_lock_initializer
 , 0)

	)

36 #define 
	#_IO_lock_fini
(
_name
) \

37 ((void) 0)

	)

39 #define 
	#_IO_lock_lock
(
_name
) \

41 void *
__self
 = 
THREAD_SELF
; \

42 if ((
_name
).
owner
 != 
__self
) \

44 
	`lll_lock
 ((
_name
).
lock
, 
LLL_PRIVATE
); \

45 (
_name
).
owner
 = 
__self
; \

47 ++(
_name
).
cnt
; \

48 } while (0)

	)

50 #define 
	#_IO_lock_trylock
(
_name
) \

52 int 
__result
 = 0; \

53 void *
__self
 = 
THREAD_SELF
; \

54 if ((
_name
).
owner
 != 
__self
) \

56 if (
	`lll_trylock
 ((
_name
).
lock
) == 0) \

58 (
_name
).
owner
 = 
__self
; \

59 (
_name
).
cnt
 = 1; \

62 
__result
 = 
EBUSY
; \

65 ++(
_name
).
cnt
; \

66 
__result
; \

67 })

	)

69 #define 
	#_IO_lock_unlock
(
_name
) \

71 if (--(
_name
).
cnt
 == 0) \

73 (
_name
).
owner
 = 
NULL
; \

74 
	`lll_unlock
 ((
_name
).
lock
, 
LLL_PRIVATE
); \

76 } while (0)

	)

80 #define 
	#_IO_cleanup_region_start
(
_fct
, 
_fp
) \

81 
	`__libc_cleanup_region_start
 (((
_fp
)->
_flags
 & 
_IO_USER_LOCK
) == 0, 
_fct
, _fp)

	)

82 #define 
	#_IO_cleanup_region_start_noarg
(
_fct
) \

83 
	`__libc_cleanup_region_start
 (1, 
_fct
, 
NULL
)

	)

84 #define 
	#_IO_cleanup_region_end
(
_doit
) \

85 
	`__libc_cleanup_region_end
 (
_doit
)

	)

87 #if 
defined
 
_LIBC
 && !defined 
NOT_IN_libc


89 #ifdef 
__EXCEPTIONS


90 #define 
	#_IO_acquire_lock
(
_fp
) \

92 
_IO_FILE
 *
_IO_acquire_lock_file
 \

93 
	`__attribute__
((
	`cleanup
 (
_IO_acquire_lock_fct
))) \

94 = (
_fp
); \

95 
	`_IO_flockfile
 (
_IO_acquire_lock_file
);

	)

96 #define 
	#_IO_acquire_lock_clear_flags2
(
_fp
) \

98 
_IO_FILE
 *
_IO_acquire_lock_file
 \

99 
	`__attribute__
((
	`cleanup
 (
_IO_acquire_lock_clear_flags2_fct
))) \

100 = (
_fp
); \

101 
	`_IO_flockfile
 (
_IO_acquire_lock_file
);

	)

103 #define 
	#_IO_acquire_lock
(
_fp
) 
_IO_acquire_lock_needs_exceptions_enabled


	)

104 #define 
	#_IO_acquire_lock_clear_flags2
(
_fp
) 
	`_IO_acquire_lock
 (_fp)

	)

106 #define 
	#_IO_release_lock
(
_fp
) ; } while (0)

	)

	@/usr/include/bits/typesizes.h

19 #ifndef 
_BITS_TYPES_H


23 #ifndef 
_BITS_TYPESIZES_H


24 #define 
	#_BITS_TYPESIZES_H
 1

	)

30 #if 
defined
 
__x86_64__
 && defined 
__ILP32__


31 #define 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 #define 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 #define 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 #define 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 #define 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 #define 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 #define 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 #define 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 #define 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 #define 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifdef 
__x86_64__


45 #define 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 #define 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 #define 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 #define 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 #define 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 #define 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 #define 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 #define 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 #define 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 #define 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 #define 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 #define 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 #define 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 #define 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 #define 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 #define 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 #define 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 #define 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 #define 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 #define 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 #define 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 #define 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 #define 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 #define 
	#__TIMER_T_TYPE
 void *

	)

71 #define 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 #define 
	#__FSID_T_TYPE
 struct { int 
__val
[2]; }

	)

73 #define 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifdef 
__x86_64__


79 #define 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 #define 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 #define 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

3 #if 
defined
 
__x86_64__
 && !defined 
__ILP32__


4 #define 
	#__WORDSIZE
 64

	)

6 #define 
	#__WORDSIZE
 32

	)

9 #ifdef 
__x86_64__


10 #define 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 #define 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/ctype.h

23 #ifndef 
_CTYPE_H


24 #define 
	#_CTYPE_H
 1

	)

26 #include 
	~<features.h
>

27 #include 
	~<bits/types.h
>

29 
	g__BEGIN_DECLS


31 #ifndef 
_ISbit


40 #include 
	~<endian.h
>

41 #if 
__BYTE_ORDER
 == 
__BIG_ENDIAN


42 #define 
	#_ISbit
(
bit
) (1 << (bit))

	)

44 #define 
	#_ISbit
(
bit
) ((bit) < 8 ? ((1 << (bit)) << 8) : ((1 << (bit)) >> 8))

	)

49 
	m_ISupper
 = 
_ISbit
 (0),

50 
	m_ISlower
 = 
_ISbit
 (1),

51 
	m_ISalpha
 = 
_ISbit
 (2),

52 
	m_ISdigit
 = 
_ISbit
 (3),

53 
	m_ISxdigit
 = 
_ISbit
 (4),

54 
	m_ISspace
 = 
_ISbit
 (5),

55 
	m_ISprint
 = 
_ISbit
 (6),

56 
	m_ISgraph
 = 
_ISbit
 (7),

57 
	m_ISblank
 = 
_ISbit
 (8),

58 
	m_IScntrl
 = 
_ISbit
 (9),

59 
	m_ISpunct
 = 
_ISbit
 (10),

60 
	m_ISalnum
 = 
_ISbit
 (11)

80 extern const unsigned short int **
	$__ctype_b_loc
 (void)

81 
__THROW
 
	`__attribute__
 ((
__const__
));

82 extern const 
__int32_t
 **
	$__ctype_tolower_loc
 (void)

83 
__THROW
 
	`__attribute__
 ((
__const__
));

84 extern const 
__int32_t
 **
	$__ctype_toupper_loc
 (void)

85 
__THROW
 
	`__attribute__
 ((
__const__
));

88 #ifndef 
__cplusplus


89 #define 
	#__isctype
(
c
, 
type
) \

90 ((*
	`__ctype_b_loc
 ())[(int) (
c
)] & (unsigned short int) 
type
)

	)

91 #elif 
defined
 
__USE_EXTERN_INLINES


92 #define 
	#__isctype_f
(
type
) \

93 
__extern_inline
 int \

94 
is
##
	`type
 (int 
__c
) 
__THROW
 \

96 return (*
	`__ctype_b_loc
 ())[(int) (
__c
)] & (unsigned short int) 
_IS
##
type
; \

97 
	}

	)
}

100 #define 
	#__isascii
(
c
) (((c) & ~0x7f) == 0)

	)

101 #define 
	#__toascii
(
c
) ((c) & 0x7f)

	)

103 #define 
	#__exctype
(
name
) extern int 
	`name
 (int) 
__THROW


	)

105 
__BEGIN_NAMESPACE_STD


111 
__exctype
 (
isalnum
);

112 
__exctype
 (
isalpha
);

113 
__exctype
 (
iscntrl
);

114 
__exctype
 (
isdigit
);

115 
__exctype
 (
islower
);

116 
__exctype
 (
isgraph
);

117 
__exctype
 (
isprint
);

118 
__exctype
 (
ispunct
);

119 
__exctype
 (
isspace
);

120 
__exctype
 (
isupper
);

121 
__exctype
 (
isxdigit
);

125 extern int 
	$tolower
 (int 
__c
) 
__THROW
;

128 extern int 
	$toupper
 (int 
__c
) 
__THROW
;

130 
__END_NAMESPACE_STD


134 #ifdef 
__USE_ISOC99


135 
__BEGIN_NAMESPACE_C99


137 
	`__exctype
 (
isblank
);

139 
__END_NAMESPACE_C99


142 #ifdef 
__USE_GNU


144 extern int 
	$isctype
 (int 
__c
, int 
__mask
) 
__THROW
;

147 #if 
defined
 
__USE_SVID
 || defined 
__USE_MISC
 || defined 
__USE_XOPEN


151 extern int 
	$isascii
 (int 
__c
) 
__THROW
;

155 extern int 
	$toascii
 (int 
__c
) 
__THROW
;

159 
	`__exctype
 (
_toupper
);

160 
	`__exctype
 (
_tolower
);

164 #define 
	#__tobody
(
c
, 
f
, 
a
, 
args
) \

165 (
__extension__
 \

166 ({ int 
__res
; \

167 if (sizeof (
c
) > 1) \

169 if (
	`__builtin_constant_p
 (
c
)) \

171 int 
__c
 = (
c
); \

172 
__res
 = 
__c
 < -128 || __c > 255 ? __c : (
a
)[__c]; \

175 
__res
 = 
f
 
args
; \

178 
__res
 = (
a
)[(int) (
c
)]; \

179 
__res
; 
	}
}))

	)

181 #if !
defined
 
__NO_CTYPE


182 #ifdef 
__isctype_f


183 
	$__isctype_f
 (
alnum
)

184 
	$__isctype_f
 (
alpha
)

185 
	$__isctype_f
 (
cntrl
)

186 
	$__isctype_f
 (
digit
)

187 
	$__isctype_f
 (
lower
)

188 
	$__isctype_f
 (
graph
)

189 
	$__isctype_f
 (
print
)

190 
	$__isctype_f
 (
punct
)

191 
	$__isctype_f
 (
space
)

192 
	$__isctype_f
 (
upper
)

193 
	$__isctype_f
 (
xdigit
)

194 #ifdef 
__USE_ISOC99


195 
	$__isctype_f
 (
blank
)

197 #elif 
defined
 
__isctype


198 #define 
	#isalnum
(
c
) 
	`__isctype
((c), 
_ISalnum
)

	)

199 #define 
	#isalpha
(
c
) 
	`__isctype
((c), 
_ISalpha
)

	)

200 #define 
	#iscntrl
(
c
) 
	`__isctype
((c), 
_IScntrl
)

	)

201 #define 
	#isdigit
(
c
) 
	`__isctype
((c), 
_ISdigit
)

	)

202 #define 
	#islower
(
c
) 
	`__isctype
((c), 
_ISlower
)

	)

203 #define 
	#isgraph
(
c
) 
	`__isctype
((c), 
_ISgraph
)

	)

204 #define 
	#isprint
(
c
) 
	`__isctype
((c), 
_ISprint
)

	)

205 #define 
	#ispunct
(
c
) 
	`__isctype
((c), 
_ISpunct
)

	)

206 #define 
	#isspace
(
c
) 
	`__isctype
((c), 
_ISspace
)

	)

207 #define 
	#isupper
(
c
) 
	`__isctype
((c), 
_ISupper
)

	)

208 #define 
	#isxdigit
(
c
) 
	`__isctype
((c), 
_ISxdigit
)

	)

209 #ifdef 
__USE_ISOC99


210 #define 
	#isblank
(
c
) 
	`__isctype
((c), 
_ISblank
)

	)

214 #ifdef 
__USE_EXTERN_INLINES


215 
__extern_inline
 int

216 
	`__NTH
 (
	$tolower
 (int 
__c
))

218 return 
__c
 >= -128 && __c < 256 ? (*
	`__ctype_tolower_loc
 ())[__c] : __c;

219 
	}
}

221 
__extern_inline
 int

222 
__NTH
 (
	$toupper
 (int 
__c
))

224 return 
__c
 >= -128 && __c < 256 ? (*
	`__ctype_toupper_loc
 ())[__c] : __c;

225 
	}
}

228 #if 
__GNUC__
 >= 2 && 
defined
 
__OPTIMIZE__
 && !defined 
__cplusplus


229 #define 
	#tolower
(
c
) 
	`__tobody
 (c, 
tolower
, *
	`__ctype_tolower_loc
 (), (c))

	)

230 #define 
	#toupper
(
c
) 
	`__tobody
 (c, 
toupper
, *
	`__ctype_toupper_loc
 (), (c))

	)

233 #if 
defined
 
__USE_SVID
 || defined 
__USE_MISC
 || defined 
__USE_XOPEN


234 #define 
	#isascii
(
c
) 
	`__isascii
 (c)

	)

235 #define 
	#toascii
(
c
) 
	`__toascii
 (c)

	)

237 #define 
	#_tolower
(
c
) ((int) (*
	`__ctype_tolower_loc
 ())[(int) (c)])

	)

238 #define 
	#_toupper
(
c
) ((int) (*
	`__ctype_toupper_loc
 ())[(int) (c)])

	)

244 #ifdef 
__USE_XOPEN2K8


258 #include 
	~<xlocale.h
>

262 #define 
	#__isctype_l
(
c
, 
type
, 
locale
) \

263 ((
locale
)->
__ctype_b
[(int) (
c
)] & (unsigned short int) 
type
)

	)

265 #define 
	#__exctype_l
(
name
) \

266 extern int 
	`name
 (int, 
__locale_t
) 
__THROW


	)

272 
__exctype_l
 (
isalnum_l
);

273 
__exctype_l
 (
isalpha_l
);

274 
__exctype_l
 (
iscntrl_l
);

275 
__exctype_l
 (
isdigit_l
);

276 
__exctype_l
 (
islower_l
);

277 
__exctype_l
 (
isgraph_l
);

278 
__exctype_l
 (
isprint_l
);

279 
__exctype_l
 (
ispunct_l
);

280 
__exctype_l
 (
isspace_l
);

281 
__exctype_l
 (
isupper_l
);

282 
__exctype_l
 (
isxdigit_l
);

284 
__exctype_l
 (
isblank_l
);

288 extern int 
	$__tolower_l
 (int 
__c
, 
__locale_t
 
__l
) 
__THROW
;

289 extern int 
	$tolower_l
 (int 
__c
, 
__locale_t
 
__l
) 
__THROW
;

292 extern int 
	$__toupper_l
 (int 
__c
, 
__locale_t
 
__l
) 
__THROW
;

293 extern int 
	$toupper_l
 (int 
__c
, 
__locale_t
 
__l
) 
__THROW
;

295 #if 
__GNUC__
 >= 2 && 
defined
 
__OPTIMIZE__
 && !defined 
__cplusplus


296 #define 
	#__tolower_l
(
c
, 
locale
) \

297 
	`__tobody
 (
c
, 
__tolower_l
, (
locale
)->
__ctype_tolower
, (c, locale))

	)

298 #define 
	#__toupper_l
(
c
, 
locale
) \

299 
	`__tobody
 (
c
, 
__toupper_l
, (
locale
)->
__ctype_toupper
, (c, locale))

	)

300 #define 
	#tolower_l
(
c
, 
locale
) 
	`__tolower_l
 ((c), (locale))

	)

301 #define 
	#toupper_l
(
c
, 
locale
) 
	`__toupper_l
 ((c), (locale))

	)

305 #ifndef 
__NO_CTYPE


306 #define 
	#__isalnum_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISalnum
, (l))

	)

307 #define 
	#__isalpha_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISalpha
, (l))

	)

308 #define 
	#__iscntrl_l
(
c
,
l
) 
	`__isctype_l
((c), 
_IScntrl
, (l))

	)

309 #define 
	#__isdigit_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISdigit
, (l))

	)

310 #define 
	#__islower_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISlower
, (l))

	)

311 #define 
	#__isgraph_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISgraph
, (l))

	)

312 #define 
	#__isprint_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISprint
, (l))

	)

313 #define 
	#__ispunct_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISpunct
, (l))

	)

314 #define 
	#__isspace_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISspace
, (l))

	)

315 #define 
	#__isupper_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISupper
, (l))

	)

316 #define 
	#__isxdigit_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISxdigit
, (l))

	)

318 #define 
	#__isblank_l
(
c
,
l
) 
	`__isctype_l
((c), 
_ISblank
, (l))

	)

320 #if 
defined
 
__USE_SVID
 || defined 
__USE_MISC


321 #define 
	#__isascii_l
(
c
,
l
) ((l), 
	`__isascii
 (c))

	)

322 #define 
	#__toascii_l
(
c
,
l
) ((l), 
	`__toascii
 (c))

	)

325 #define 
	#isalnum_l
(
c
,
l
) 
	`__isalnum_l
 ((c), (l))

	)

326 #define 
	#isalpha_l
(
c
,
l
) 
	`__isalpha_l
 ((c), (l))

	)

327 #define 
	#iscntrl_l
(
c
,
l
) 
	`__iscntrl_l
 ((c), (l))

	)

328 #define 
	#isdigit_l
(
c
,
l
) 
	`__isdigit_l
 ((c), (l))

	)

329 #define 
	#islower_l
(
c
,
l
) 
	`__islower_l
 ((c), (l))

	)

330 #define 
	#isgraph_l
(
c
,
l
) 
	`__isgraph_l
 ((c), (l))

	)

331 #define 
	#isprint_l
(
c
,
l
) 
	`__isprint_l
 ((c), (l))

	)

332 #define 
	#ispunct_l
(
c
,
l
) 
	`__ispunct_l
 ((c), (l))

	)

333 #define 
	#isspace_l
(
c
,
l
) 
	`__isspace_l
 ((c), (l))

	)

334 #define 
	#isupper_l
(
c
,
l
) 
	`__isupper_l
 ((c), (l))

	)

335 #define 
	#isxdigit_l
(
c
,
l
) 
	`__isxdigit_l
 ((c), (l))

	)

337 #define 
	#isblank_l
(
c
,
l
) 
	`__isblank_l
 ((c), (l))

	)

339 #if 
defined
 
__USE_SVID
 || defined 
__USE_MISC


340 #define 
	#isascii_l
(
c
,
l
) 
	`__isascii_l
 ((c), (l))

	)

341 #define 
	#toascii_l
(
c
,
l
) 
	`__toascii_l
 ((c), (l))

	)

348 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #if !
defined
 
__x86_64__


7 #include 
	~<gnu/stubs-32.h
>

9 #if 
defined
 
__x86_64__
 && defined 
__LP64__


10 #include 
	~<gnu/stubs-64.h
>

12 #if 
defined
 
__x86_64__
 && defined 
__ILP32__


13 #include 
	~<gnu/stubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #ifndef 
_STDC_PREDEF_H


19 #define 
	#_STDC_PREDEF_H
 1

	)

30 #include 
	~<bits/predefs.h
>

34 #define 
	#__STDC_ISO_10646__
 201103L

	)

37 #define 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

19 #ifndef 
_SYS_CDEFS_H


20 #define 
	#_SYS_CDEFS_H
 1

	)

23 #ifndef 
_FEATURES_H


24 #include 
	~<features.h
>

30 #if 
defined
 
__GNUC__
 && !defined 
__STDC__


35 #undef 
__P


36 #undef 
__PMT


38 #ifdef 
__GNUC__


42 #if 
__GNUC_PREREQ
 (4, 6) && !
defined
 
_LIBC


43 #define 
	#__LEAF
 , 
__leaf__


	)

44 #define 
	#__LEAF_ATTR
 
	`__attribute__
 ((
__leaf__
))

	)

46 #define 
	#__LEAF


	)

47 #define 
	#__LEAF_ATTR


	)

55 #if !
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (3, 3)

56 #define 
	#__THROW
 
	`__attribute__
 ((
__nothrow__
 
__LEAF
))

	)

57 #define 
	#__THROWNL
 
	`__attribute__
 ((
__nothrow__
))

	)

58 #define 
	#__NTH
(
fct
) 
	`__attribute__
 ((
__nothrow__
 
__LEAF
)) 
	)
fct

60 #if 
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (2,8)

61 #define 
	#__THROW
 
	`throw
 ()

	)

62 #define 
	#__THROWNL
 
	`throw
 ()

	)

63 #define 
	#__NTH
(
fct
) 
__LEAF_ATTR
 fct 
	`throw
 ()

	)

65 #define 
	#__THROW


	)

66 #define 
	#__THROWNL


	)

67 #define 
	#__NTH
(
fct
) 
	)
fct

73 #define 
	#__inline


	)

75 #define 
	#__THROW


	)

76 #define 
	#__THROWNL


	)

77 #define 
	#__NTH
(
fct
) 
	)
fct

83 #define 
	#__P
(
args
) 
	)
args

84 #define 
	#__PMT
(
args
) 
	)
args

89 #define 
	#__CONCAT
(
x
,
y
) x ## 
	)
y

90 #define 
	#__STRING
(
x
) #x

	)

93 #define 
	#__ptr_t
 void *

	)

94 #define 
	#__long_double_t
 long double

	)

98 #ifdef 
__cplusplus


99 #define 
	#__BEGIN_DECLS
 extern "C" {

	)

100 #define 
	#__END_DECLS
 }

	)

102 #define 
	#__BEGIN_DECLS


	)

103 #define 
	#__END_DECLS


	)

112 #if 
defined
 
__cplusplus
 && defined 
_GLIBCPP_USE_NAMESPACES


113 #define 
	#__BEGIN_NAMESPACE_STD
 
namespace
 
std
 {

	)

114 #define 
	#__END_NAMESPACE_STD
 }

	)

115 #define 
	#__USING_NAMESPACE_STD
(
name
) 
using
 
std
::name;

	)

116 #define 
	#__BEGIN_NAMESPACE_C99
 
namespace
 
__c99
 {

	)

117 #define 
	#__END_NAMESPACE_C99
 }

	)

118 #define 
	#__USING_NAMESPACE_C99
(
name
) 
using
 
__c99
::name;

	)

123 #define 
	#__BEGIN_NAMESPACE_STD


	)

124 #define 
	#__END_NAMESPACE_STD


	)

125 #define 
	#__USING_NAMESPACE_STD
(
name
)

	)

126 #define 
	#__BEGIN_NAMESPACE_C99


	)

127 #define 
	#__END_NAMESPACE_C99


	)

128 #define 
	#__USING_NAMESPACE_C99
(
name
)

	)

133 #ifndef 
__BOUNDED_POINTERS__


134 #define 
	#__bounded


	)

135 #define 
	#__unbounded


	)

136 #define 
	#__ptrvalue


	)

141 #define 
	#__bos
(
ptr
) 
	`__builtin_object_size
 (ptr, 
__USE_FORTIFY_LEVEL
 > 1)

	)

142 #define 
	#__bos0
(
ptr
) 
	`__builtin_object_size
 (ptr, 0)

	)

143 #define 
	#__fortify_function
 
__extern_always_inline
 
__attribute_artificial__


	)

145 #if 
__GNUC_PREREQ
 (4,3)

146 #define 
	#__warndecl
(
name
, 
msg
) \

147 extern void 
	`name
 (void) 
	`__attribute__
((
	`__warning__
 (
msg
)))

	)

148 #define 
	#__warnattr
(
msg
) 
	`__attribute__
((
	`__warning__
 (msg)))

	)

149 #define 
	#__errordecl
(
name
, 
msg
) \

150 extern void 
	`name
 (void) 
	`__attribute__
((
	`__error__
 (
msg
)))

	)

152 #define 
	#__warndecl
(
name
, 
msg
) extern void 
	`name
 (void)

	)

153 #define 
	#__warnattr
(
msg
)

	)

154 #define 
	#__errordecl
(
name
, 
msg
) extern void 
	`name
 (void)

	)

158 #if 
__GNUC_PREREQ
 (2,97)

160 #define 
	#__flexarr
 []

	)

162 #ifdef 
__GNUC__


163 #define 
	#__flexarr
 [0]

	)

165 #if 
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

166 #define 
	#__flexarr
 []

	)

169 #define 
	#__flexarr
 [1]

	)

185 #if 
defined
 
__GNUC__
 && __GNUC__ >= 2

187 #define 
	#__REDIRECT
(
name
, 
proto
, 
alias
) name proto 
	`__asm__
 (
	`__ASMNAME
 (#alias))

	)

188 #ifdef 
__cplusplus


189 #define 
	#__REDIRECT_NTH
(
name
, 
proto
, 
alias
) \

190 
name
 
proto
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#alias))

	)

191 #define 
	#__REDIRECT_NTHNL
(
name
, 
proto
, 
alias
) \

192 
name
 
proto
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#alias))

	)

194 #define 
	#__REDIRECT_NTH
(
name
, 
proto
, 
alias
) \

195 
name
 
proto
 
	`__asm__
 (
	`__ASMNAME
 (#alias)) 
__THROW


	)

196 #define 
	#__REDIRECT_NTHNL
(
name
, 
proto
, 
alias
) \

197 
name
 
proto
 
	`__asm__
 (
	`__ASMNAME
 (#alias)) 
__THROWNL


	)

199 #define 
	#__ASMNAME
(
cname
) 
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, cname)

	)

200 #define 
	#__ASMNAME2
(
prefix
, 
cname
) 
	`__STRING
 (prefix) 
	)
cname

213 #if !
defined
 
__GNUC__
 || __GNUC__ < 2

214 #define 
	#__attribute__
(
xyz
)

	)

220 #if 
__GNUC_PREREQ
 (2,96)

221 #define 
	#__attribute_malloc__
 
	`__attribute__
 ((
__malloc__
))

	)

223 #define 
	#__attribute_malloc__


	)

229 #if 
__GNUC_PREREQ
 (2,96)

230 #define 
	#__attribute_pure__
 
	`__attribute__
 ((
__pure__
))

	)

232 #define 
	#__attribute_pure__


	)

236 #if 
__GNUC_PREREQ
 (2,5)

237 #define 
	#__attribute_const__
 
	`__attribute__
 ((
__const__
))

	)

239 #define 
	#__attribute_const__


	)

245 #if 
__GNUC_PREREQ
 (3,1)

246 #define 
	#__attribute_used__
 
	`__attribute__
 ((
__used__
))

	)

247 #define 
	#__attribute_noinline__
 
	`__attribute__
 ((
__noinline__
))

	)

249 #define 
	#__attribute_used__
 
	`__attribute__
 ((
__unused__
))

	)

250 #define 
	#__attribute_noinline__


	)

254 #if 
__GNUC_PREREQ
 (3,2)

255 #define 
	#__attribute_deprecated__
 
	`__attribute__
 ((
__deprecated__
))

	)

257 #define 
	#__attribute_deprecated__


	)

266 #if 
__GNUC_PREREQ
 (2,8)

267 #define 
	#__attribute_format_arg__
(
x
) 
	`__attribute__
 ((
	`__format_arg__
 (x)))

	)

269 #define 
	#__attribute_format_arg__
(
x
)

	)

276 #if 
__GNUC_PREREQ
 (2,97)

277 #define 
	#__attribute_format_strfmon__
(
a
,
b
) \

278 
	`__attribute__
 ((
	`__format__
 (
__strfmon__
, 
a
, 
b
)))

	)

280 #define 
	#__attribute_format_strfmon__
(
a
,
b
)

	)

285 #if 
__GNUC_PREREQ
 (3,3)

286 #define 
	#__nonnull
(
params
) 
	`__attribute__
 ((
__nonnull__
 params))

	)

288 #define 
	#__nonnull
(
params
)

	)

293 #if 
__GNUC_PREREQ
 (3,4)

294 #define 
	#__attribute_warn_unused_result__
 \

295 
	`__attribute__
 ((
__warn_unused_result__
))

	)

296 #if 
__USE_FORTIFY_LEVEL
 > 0

297 #define 
	#__wur
 
__attribute_warn_unused_result__


	)

300 #define 
	#__attribute_warn_unused_result__


	)

302 #ifndef 
__wur


303 #define 
	#__wur


	)

307 #if 
__GNUC_PREREQ
 (3,2)

308 #define 
	#__always_inline
 
__inline
 
	`__attribute__
 ((
__always_inline__
))

	)

310 #define 
	#__always_inline
 
__inline


	)

315 #if 
__GNUC_PREREQ
 (4,3)

316 #define 
	#__attribute_artificial__
 
	`__attribute__
 ((
__artificial__
))

	)

318 #define 
	#__attribute_artificial__


	)

323 #if (!
defined
 
__cplusplus
 || 
__GNUC_PREREQ
 (4,3)) && defined 
__GNUC__


324 #if 
defined
 
__GNUC_STDC_INLINE__
 || defined 
__cplusplus


325 #define 
	#__extern_inline
 extern 
__inline
 
	`__attribute__
 ((
__gnu_inline__
))

	)

326 #define 
	#__extern_always_inline
 \

327 extern 
__always_inline
 
	`__attribute__
 ((
__gnu_inline__
))

	)

329 #define 
	#__extern_inline
 extern 
__inline


	)

330 #define 
	#__extern_always_inline
 extern 
__always_inline


	)

332 #elif 
defined
 
__GNUC__


333 #define 
	#__extern_inline
 extern 
__inline


	)

334 #define 
	#__extern_always_inline
 \

335 extern 
__always_inline


	)

337 #define 
	#__extern_inline


	)

338 #define 
	#__extern_always_inline


	)

343 #if 
__GNUC_PREREQ
 (4,3)

344 #define 
	#__va_arg_pack
() 
	`__builtin_va_arg_pack
 ()

	)

345 #define 
	#__va_arg_pack_len
() 
	`__builtin_va_arg_pack_len
 ()

	)

352 #if !
__GNUC_PREREQ
 (2,8)

353 #define 
	#__extension__


	)

357 #if !
__GNUC_PREREQ
 (2,92)

358 #define 
	#__restrict


	)

364 #if 
__GNUC_PREREQ
 (3,1) && !
defined
 
__GNUG__


365 #define 
	#__restrict_arr
 
__restrict


	)

367 #ifdef 
__GNUC__


368 #define 
	#__restrict_arr


	)

370 #if 
defined
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

371 #define 
	#__restrict_arr
 
restrict


	)

374 #define 
	#__restrict_arr


	)

379 #if 
__GNUC__
 >= 3

380 #define 
	#__glibc_unlikely
(
cond
) 
	`__builtin_expect
((cond), 0)

	)

382 #define 
	#__glibc_unlikely
(
cond
) (cond)

	)

385 #include 
	~<bits/wordsize.h
>

387 #if 
defined
 
__LONG_DOUBLE_MATH_OPTIONAL
 && defined 
__NO_LONG_DOUBLE_MATH


388 #define 
	#__LDBL_COMPAT
 1

	)

389 #ifdef 
__REDIRECT


390 #define 
	#__LDBL_REDIR1
(
name
, 
proto
, 
alias
) 
	`__REDIRECT
 (name, proto, alias)

	)

391 #define 
	#__LDBL_REDIR
(
name
, 
proto
) \

392 
	`__LDBL_REDIR1
 (
name
, 
proto
, 
__nldbl_
##name)

	)

393 #define 
	#__LDBL_REDIR1_NTH
(
name
, 
proto
, 
alias
) 
	`__REDIRECT_NTH
 (name, proto, alias)

	)

394 #define 
	#__LDBL_REDIR_NTH
(
name
, 
proto
) \

395 
	`__LDBL_REDIR1_NTH
 (
name
, 
proto
, 
__nldbl_
##name)

	)

396 #define 
	#__LDBL_REDIR1_DECL
(
name
, 
alias
) \

397 extern 
	`__typeof
 (
name
) name 
	`__asm
 (
	`__ASMNAME
 (#alias));

	)

398 #define 
	#__LDBL_REDIR_DECL
(
name
) \

399 extern 
	`__typeof
 (
name
) name 
	`__asm
 (
	`__ASMNAME
 ("__nldbl_" #name));

	)

400 #define 
	#__REDIRECT_LDBL
(
name
, 
proto
, 
alias
) \

401 
	`__LDBL_REDIR1
 (
name
, 
proto
, 
__nldbl_
##
alias
)

	)

402 #define 
	#__REDIRECT_NTH_LDBL
(
name
, 
proto
, 
alias
) \

403 
	`__LDBL_REDIR1_NTH
 (
name
, 
proto
, 
__nldbl_
##
alias
)

	)

406 #if !
defined
 
__LDBL_COMPAT
 || !defined 
__REDIRECT


407 #define 
	#__LDBL_REDIR1
(
name
, 
proto
, 
alias
) name 
	)
proto

408 #define 
	#__LDBL_REDIR
(
name
, 
proto
) name 
	)
proto

409 #define 
	#__LDBL_REDIR1_NTH
(
name
, 
proto
, 
alias
) name proto 
__THROW


	)

410 #define 
	#__LDBL_REDIR_NTH
(
name
, 
proto
) name proto 
__THROW


	)

411 #define 
	#__LDBL_REDIR_DECL
(
name
)

	)

412 #ifdef 
__REDIRECT


413 #define 
	#__REDIRECT_LDBL
(
name
, 
proto
, 
alias
) 
	`__REDIRECT
 (name, proto, alias)

	)

414 #define 
	#__REDIRECT_NTH_LDBL
(
name
, 
proto
, 
alias
) \

415 
	`__REDIRECT_NTH
 (
name
, 
proto
, 
alias
)

	)

	@/usr/include/bits/libc-lock.h

19 #ifndef 
_BITS_LIBC_LOCK_H


20 #define 
	#_BITS_LIBC_LOCK_H
 1

	)

22 #include 
	~<pthread.h
>

23 #define 
	#__need_NULL


	)

24 #include 
	~<stddef.h
>

27 #ifdef 
_LIBC


28 #include 
	~<lowlevellock.h
>

29 #include 
	~<tls.h
>

30 #include 
	~<pthread-functions.h
>

31 #include 
	~<errno.h
>

32 #include 
	~<gnu/option-groups.h
>

36 #if 
defined
 
_LIBC
 || defined 
_IO_MTSAFE_IO


37 #if (
defined
 
NOT_IN_libc
 && !defined 
IS_IN_libpthread
) || !defined 
_LIBC


38 typedef struct { 
pthread_mutex_t
 
	mmutex
; } 
	t__libc_lock_recursive_t
;

40 typedef struct { int 
	mlock
; int 
	mcnt
; void *
	mowner
; } 
	t__libc_lock_recursive_t
;

43 typedef struct 
__libc_lock_recursive_opaque__
 
	t__libc_lock_recursive_t
;

53 #define 
	#__libc_lock_define_recursive
(
CLASS
,
NAME
) \

54 
CLASS
 
__libc_lock_recursive_t
 
NAME
;

	)

58 #if 
defined
 
_LIBC
 && (!defined 
NOT_IN_libc
 || defined 
IS_IN_libpthread
)

59 #if 
LLL_LOCK_INITIALIZER
 == 0

60 #define 
	#__libc_lock_define_initialized_recursive
(
CLASS
,
NAME
) \

61 
CLASS
 
__libc_lock_recursive_t
 
NAME
;

	)

63 #define 
	#__libc_lock_define_initialized_recursive
(
CLASS
,
NAME
) \

64 
CLASS
 
__libc_lock_recursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

66 #define 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

67 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

69 #define 
	#__libc_lock_define_initialized_recursive
(
CLASS
,
NAME
) \

70 
CLASS
 
__libc_lock_recursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

71 #define 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

72 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

76 #if 
defined
 
_LIBC
 && (!defined 
NOT_IN_libc
 || defined 
IS_IN_libpthread
)

77 #define 
	#__libc_lock_init_recursive
(
NAME
) \

78 ((
NAME
) = (
__libc_lock_recursive_t
) 
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

80 #define 
	#__libc_lock_init_recursive
(
NAME
) \

82 if (
__pthread_mutex_init
 != 
NULL
) \

84 
pthread_mutexattr_t
 
__attr
; \

85 
	`__pthread_mutexattr_init
 (&
__attr
); \

86 
	`__pthread_mutexattr_settype
 (&
__attr
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

87 
	`__pthread_mutex_init
 (&(
NAME
).
mutex
, &
__attr
); \

88 
	`__pthread_mutexattr_destroy
 (&
__attr
); \

90 } while (0)

	)

94 #if 
defined
 
_LIBC
 && (!defined 
NOT_IN_libc
 || defined 
IS_IN_libpthread
)

95 #define 
	#__libc_lock_fini_recursive
(
NAME
) ((void) 0)

	)

97 #define 
	#__libc_lock_fini_recursive
(
NAME
) \

98 
	`__libc_maybe_call
 (
__pthread_mutex_destroy
, (&(
NAME
)), 0)

	)

102 #if 
defined
 
_LIBC
 && (!defined 
NOT_IN_libc
 || defined 
IS_IN_libpthread
)

103 #if 
__OPTION_EGLIBC_BIG_MACROS
 != 1

107 extern void 
__libc_lock_lock_recursive_fn
 (
__libc_lock_recursive_t
 *);

108 
libc_hidden_proto
 (
__libc_lock_lock_recursive_fn
);

110 #if 
__OPTION_EGLIBC_BIG_MACROS


111 #define 
	#__libc_lock_lock_recursive
(
NAME
) \

113 void *
self
 = 
THREAD_SELF
; \

114 if ((
NAME
).
owner
 != 
self
) \

116 
	`lll_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

117 (
NAME
).
owner
 = 
self
; \

119 ++(
NAME
).
cnt
; \

120 } while (0)

	)

122 #define 
	#__libc_lock_lock_recursive
(
NAME
) \

123 
	`__libc_lock_lock_recursive_fn
 (&(
NAME
))

	)

126 #define 
	#__libc_lock_lock_recursive
(
NAME
) \

127 
	`__libc_maybe_call
 (
__pthread_mutex_lock
, (&(
NAME
).
mutex
), 0)

	)

131 #if 
defined
 
_LIBC
 && (!defined 
NOT_IN_libc
 || defined 
IS_IN_libpthread
)

132 #if 
__OPTION_EGLIBC_BIG_MACROS
 != 1

136 extern int 
__libc_lock_trylock_recursive_fn
 (
__libc_lock_recursive_t
 *);

137 
libc_hidden_proto
 (
__libc_lock_trylock_recursive_fn
);

139 #if 
__OPTION_EGLIBC_BIG_MACROS


140 #define 
	#__libc_lock_trylock_recursive
(
NAME
) \

142 int 
result
 = 0; \

143 void *
self
 = 
THREAD_SELF
; \

144 if ((
NAME
).
owner
 != 
self
) \

146 if (
	`lll_trylock
 ((
NAME
).
lock
) == 0) \

148 (
NAME
).
owner
 = 
self
; \

149 (
NAME
).
cnt
 = 1; \

152 
result
 = 
EBUSY
; \

155 ++(
NAME
).
cnt
; \

156 
result
; \

157 })

	)

159 #define 
	#__libc_lock_trylock_recursive
(
NAME
) \

160 
	`__libc_lock_trylock_recursive_fn
 (&(
NAME
))

	)

163 #define 
	#__libc_lock_trylock_recursive
(
NAME
) \

164 
	`__libc_maybe_call
 (
__pthread_mutex_trylock
, (&(
NAME
)), 0)

	)

168 #if 
defined
 
_LIBC
 && (!defined 
NOT_IN_libc
 || defined 
IS_IN_libpthread
)

169 #if 
__OPTION_EGLIBC_BIG_MACROS
 != 1

173 extern void 
__libc_lock_unlock_recursive_fn
 (
__libc_lock_recursive_t
 *);

174 
libc_hidden_proto
 (
__libc_lock_unlock_recursive_fn
);

176 #if 
__OPTION_EGLIBC_BIG_MACROS


178 #define 
	#__libc_lock_unlock_recursive
(
NAME
) \

180 if (--(
NAME
).
cnt
 == 0) \

182 (
NAME
).
owner
 = 
NULL
; \

183 
	`lll_unlock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

185 } while (0)

	)

187 #define 
	#__libc_lock_unlock_recursive
(
NAME
) \

188 
	`__libc_lock_unlock_recursive_fn
 (&(
NAME
))

	)

191 #define 
	#__libc_lock_unlock_recursive
(
NAME
) \

192 
	`__libc_maybe_call
 (
__pthread_mutex_unlock
, (&(
NAME
)), 0)

	)

199 extern void 
_pthread_cleanup_push_defer
 (struct 
_pthread_cleanup_buffer
 *
buffer
,

200 void (*
routine
) (void *), void *
arg
);

201 extern void 
	`_pthread_cleanup_pop_restore
 (struct 
_pthread_cleanup_buffer
 *
buffer
,

202 int 
execute
);

205 #define 
	#__libc_cleanup_region_start
(
DOIT
, 
FCT
, 
ARG
) \

206 { struct 
_pthread_cleanup_buffer
 
_buffer
; \

207 int 
_avail
; \

208 if (
DOIT
) { \

209 
_avail
 = 
	`PTFAVAIL
 (
_pthread_cleanup_push_defer
); \

210 if (
_avail
) { \

211 
	`__libc_ptf_call_always
 (
_pthread_cleanup_push_defer
, (&
_buffer
, 
FCT
, \

212 
ARG
)); \

214 
_buffer
.
__routine
 = (
FCT
); \

215 
_buffer
.
__arg
 = (
ARG
); \

218 
_avail
 = 0; \

219 }

	)

222 #define 
	#__libc_cleanup_region_end
(
DOIT
) \

223 if (
_avail
) { \

224 
	`__libc_ptf_call_always
 (
_pthread_cleanup_pop_restore
, (&
_buffer
, 
DOIT
));\

225 } else if (
DOIT
) \

226 
_buffer
.
	`__routine
 (_buffer.
__arg
); \

227 
	}

	)
}

232 #ifdef 
_LIBC


233 #include 
	~"libc-lockP.h
"

	@/usr/include/bits/predefs.h

19 #ifndef 
_PREDEFS_H


20 #define 
	#_PREDEFS_H


	)

22 #ifndef 
_STDC_PREDEF_H


27 #define 
	#__STDC_IEC_559__
 1

	)

28 #define 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/endian.h

18 #ifndef 
_ENDIAN_H


19 #define 
	#_ENDIAN_H
 1

	)

21 #include 
	~<features.h
>

31 #define 
	#__LITTLE_ENDIAN
 1234

	)

32 #define 
	#__BIG_ENDIAN
 4321

	)

33 #define 
	#__PDP_ENDIAN
 3412

	)

36 #include 
	~<bits/endian.h
>

40 #ifndef 
__FLOAT_WORD_ORDER


41 #define 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 #define 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 #define 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 #define 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 #define 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


52 #define 
	#__LONG_LONG_PAIR
(
HI
, 
LO
) LO, 
	)
HI

53 #elif 
__BYTE_ORDER
 == 
__BIG_ENDIAN


54 #define 
	#__LONG_LONG_PAIR
(
HI
, 
LO
) HI, 
	)
LO

58 #if 
defined
 
__USE_BSD
 && !defined 
__ASSEMBLER__


60 #include 
	~<bits/byteswap.h
>

62 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


63 #define 
	#htobe16
(
x
) 
	`__bswap_16
 (x)

	)

64 #define 
	#htole16
(
x
) (x)

	)

65 #define 
	#be16toh
(
x
) 
	`__bswap_16
 (x)

	)

66 #define 
	#le16toh
(
x
) (x)

	)

68 #define 
	#htobe32
(
x
) 
	`__bswap_32
 (x)

	)

69 #define 
	#htole32
(
x
) (x)

	)

70 #define 
	#be32toh
(
x
) 
	`__bswap_32
 (x)

	)

71 #define 
	#le32toh
(
x
) (x)

	)

73 #if 
__GLIBC_HAVE_LONG_LONG


74 #define 
	#htobe64
(
x
) 
	`__bswap_64
 (x)

	)

75 #define 
	#htole64
(
x
) (x)

	)

76 #define 
	#be64toh
(
x
) 
	`__bswap_64
 (x)

	)

77 #define 
	#le64toh
(
x
) (x)

	)

81 #define 
	#htobe16
(
x
) (x)

	)

82 #define 
	#htole16
(
x
) 
	`__bswap_16
 (x)

	)

83 #define 
	#be16toh
(
x
) (x)

	)

84 #define 
	#le16toh
(
x
) 
	`__bswap_16
 (x)

	)

86 #define 
	#htobe32
(
x
) (x)

	)

87 #define 
	#htole32
(
x
) 
	`__bswap_32
 (x)

	)

88 #define 
	#be32toh
(
x
) (x)

	)

89 #define 
	#le32toh
(
x
) 
	`__bswap_32
 (x)

	)

91 #if 
__GLIBC_HAVE_LONG_LONG


92 #define 
	#htobe64
(
x
) (x)

	)

93 #define 
	#htole64
(
x
) 
	`__bswap_64
 (x)

	)

94 #define 
	#be64toh
(
x
) (x)

	)

95 #define 
	#le64toh
(
x
) 
	`__bswap_64
 (x)

	)

	@/usr/include/gconv.h

22 #ifndef 
_GCONV_H


23 #define 
	#_GCONV_H
 1

	)

25 #include 
	~<features.h
>

26 #define 
	#__need_mbstate_t


	)

27 #define 
	#__need_wint_t


	)

28 #include 
	~<wchar.h
>

29 #define 
	#__need_size_t


	)

30 #define 
	#__need_wchar_t


	)

31 #include 
	~<stddef.h
>

34 #define 
	#__UNKNOWN_10646_CHAR
 ((
wchar_t
) 0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 struct 
	g__gconv_step
;

65 struct 
	g__gconv_step_data
;

66 struct 
	g__gconv_loaded_object
;

67 struct 
	g__gconv_trans_data
;

71 typedef int (*
	t__gconv_fct
) (struct 
	t__gconv_step
 *, struct 
	t__gconv_step_data
 *,

73 unsigned char **, 
	tsize_t
 *, int, int);

76 typedef 
	$wint_t
 (*
	t__gconv_btowc_fct
) (struct 
	t__gconv_step
 *, unsigned char);

79 typedef int (*
	t__gconv_init_fct
) (struct 
	t__gconv_step
 *);

80 typedef void (*
	t__gconv_end_fct
) (struct 
	t__gconv_step
 *);

84 typedef int (*
	t__gconv_trans_fct
) (struct 
	t__gconv_step
 *,

85 struct 
	t__gconv_step_data
 *, void *,

89 
	tsize_t
 *);

92 typedef int (*
	t__gconv_trans_context_fct
) (void *, const unsigned char *,

97 typedef int (*
	t__gconv_trans_query_fct
) (const char *, const char ***,

98 
	tsize_t
 *);

101 typedef int (*
	t__gconv_trans_init_fct
) (void **, const char *);

102 typedef void (*
	t__gconv_trans_end_fct
) (void *);

104 struct 
	s__gconv_trans_data


107 
__gconv_trans_fct
 
__trans_fct
;

108 
__gconv_trans_context_fct
 
__trans_context_fct
;

109 
__gconv_trans_end_fct
 
__trans_end_fct
;

110 void *
__data
;

111 struct 
__gconv_trans_data
 *
__next
;

116 struct 
	s__gconv_step


118 struct 
__gconv_loaded_object
 *
__shlib_handle
;

119 const char *
__modname
;

121 int 
__counter
;

123 char *
__from_name
;

124 char *
__to_name
;

126 
__gconv_fct
 
__fct
;

127 
__gconv_btowc_fct
 
__btowc_fct
;

128 
__gconv_init_fct
 
__init_fct
;

129 
__gconv_end_fct
 
__end_fct
;

133 int 
__min_needed_from
;

134 int 
__max_needed_from
;

135 int 
__min_needed_to
;

136 int 
__max_needed_to
;

139 int 
__stateful
;

141 void *
__data
;

146 struct 
	s__gconv_step_data


148 unsigned char *
__outbuf
;

149 unsigned char *
__outbufend
;

153 int 
__flags
;

157 int 
__invocation_counter
;

161 int 
__internal_use
;

163 
__mbstate_t
 *
__statep
;

164 
__mbstate_t
 
__state
;

168 struct 
__gconv_trans_data
 *
__trans
;

173 typedef struct 
	s__gconv_info


175 
size_t
 
__nsteps
;

176 struct 
__gconv_step
 *
__steps
;

177 
__extension__
 struct 
__gconv_step_data
 
__data
 
__flexarr
;

178 } *
	t__gconv_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifdef 
_LIBC


7 #error 
Applications
 
may
 
not
 
define
 
the
 
macro
 
_LIBC


10 #define 
	#__stub_chflags


	)

11 #define 
	#__stub_fattach


	)

12 #define 
	#__stub_fchflags


	)

13 #define 
	#__stub_fdetach


	)

14 #define 
	#__stub_gtty


	)

15 #define 
	#__stub_lchmod


	)

16 #define 
	#__stub_revoke


	)

17 #define 
	#__stub_setlogin


	)

18 #define 
	#__stub_sigreturn


	)

19 #define 
	#__stub_sstk


	)

20 #define 
	#__stub_stty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifdef 
_LIBC


7 #error 
Applications
 
may
 
not
 
define
 
the
 
macro
 
_LIBC


10 #define 
	#__stub_bdflush


	)

11 #define 
	#__stub_chflags


	)

12 #define 
	#__stub_fattach


	)

13 #define 
	#__stub_fchflags


	)

14 #define 
	#__stub_fdetach


	)

15 #define 
	#__stub_getmsg


	)

16 #define 
	#__stub_gtty


	)

17 #define 
	#__stub_lchmod


	)

18 #define 
	#__stub_putmsg


	)

19 #define 
	#__stub_revoke


	)

20 #define 
	#__stub_setlogin


	)

21 #define 
	#__stub_sigreturn


	)

22 #define 
	#__stub_sstk


	)

23 #define 
	#__stub_stty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifdef 
_LIBC


7 #error 
Applications
 
may
 
not
 
define
 
the
 
macro
 
_LIBC


10 #define 
	#__stub_bdflush


	)

11 #define 
	#__stub_chflags


	)

12 #define 
	#__stub_create_module


	)

13 #define 
	#__stub_fattach


	)

14 #define 
	#__stub_fchflags


	)

15 #define 
	#__stub_fdetach


	)

16 #define 
	#__stub_get_kernel_syms


	)

17 #define 
	#__stub_getmsg


	)

18 #define 
	#__stub_gtty


	)

19 #define 
	#__stub_lchmod


	)

20 #define 
	#__stub_nfsservctl


	)

21 #define 
	#__stub_putmsg


	)

22 #define 
	#__stub_query_module


	)

23 #define 
	#__stub_revoke


	)

24 #define 
	#__stub_setlogin


	)

25 #define 
	#__stub_sigreturn


	)

26 #define 
	#__stub_sstk


	)

27 #define 
	#__stub_stty


	)

28 #define 
	#__stub_uselib


	)

	@/usr/include/wchar.h

23 #ifndef 
_WCHAR_H


25 #if !
defined
 
__need_mbstate_t
 && !defined 
__need_wint_t


26 #define 
	#_WCHAR_H
 1

	)

27 #include 
	~<features.h
>

30 #ifdef 
_WCHAR_H


32 #define 
	#__need___FILE


	)

33 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


34 #define 
	#__need_FILE


	)

36 #include 
	~<stdio.h
>

38 #define 
	#__need___va_list


	)

39 #include 
	~<stdarg.h
>

41 #include 
	~<bits/wchar.h
>

44 #define 
	#__need_size_t


	)

45 #define 
	#__need_wchar_t


	)

46 #define 
	#__need_NULL


	)

48 #if 
defined
 
_WCHAR_H
 || defined 
__need_wint_t
 || !defined 
__WINT_TYPE__


49 #undef 
__need_wint_t


50 #define 
	#__need_wint_t


	)

51 #include 
	~<stddef.h
>

55 #ifndef 
_WINT_T


60 #define 
	#_WINT_T


	)

61 typedef unsigned int 
	twint_t
;

65 #if 
defined
 
__cplusplus
 && defined 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
defined
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 typedef 
__WINT_TYPE__
 
	twint_t
;

69 
	g__END_NAMESPACE_STD


74 #if 
defined
 
__cplusplus
 && 
__GNUC_PREREQ
 (4, 4)

75 #define 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #if (
defined
 
_WCHAR_H
 || defined 
__need_mbstate_t
) && !defined 
____mbstate_t_defined


80 #define 
	#____mbstate_t_defined
 1

	)

84 int 
	m__count
;

87 #ifdef 
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wint_t
 
	m__wch
;

92 char 
	m__wchb
[4];

93 } 
	m__value
;

94 } 
	t__mbstate_t
;

96 #undef 
__need_mbstate_t


101 #ifdef 
_WCHAR_H


103 #ifndef 
__mbstate_t_defined


104 
__BEGIN_NAMESPACE_C99


106 typedef 
__mbstate_t
 
	tmbstate_t
;

107 
	g__END_NAMESPACE_C99


108 #define 
	#__mbstate_t_defined
 1

	)

111 #ifdef 
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mbstate_t
)

115 #ifndef 
WCHAR_MIN


117 #define 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 #define 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #ifndef 
WEOF


122 #define 
	#WEOF
 (0xffffffffu)

	)

127 #if 
defined
 
__USE_XOPEN
 && !defined 
__USE_UNIX98


128 #include 
	~<wctype.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 struct 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 extern 
wchar_t
 *
	$wcscpy
 (
wchar_t
 *
__restrict
 
__dest
,

148 const 
wchar_t
 *
__restrict
 
__src
) 
__THROW
;

150 extern 
wchar_t
 *
	$wcsncpy
 (
wchar_t
 *
__restrict
 
__dest
,

151 const 
wchar_t
 *
__restrict
 
__src
, 
size_t
 
__n
)

152 
__THROW
;

155 extern 
wchar_t
 *
	$wcscat
 (
wchar_t
 *
__restrict
 
__dest
,

156 const 
wchar_t
 *
__restrict
 
__src
) 
__THROW
;

158 extern 
wchar_t
 *
	$wcsncat
 (
wchar_t
 *
__restrict
 
__dest
,

159 const 
wchar_t
 *
__restrict
 
__src
, 
size_t
 
__n
)

160 
__THROW
;

163 extern int 
	$wcscmp
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
)

164 
__THROW
 
__attribute_pure__
;

166 extern int 
	$wcsncmp
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__attribute_pure__
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_XOPEN2K8


172 extern int 
	$wcscasecmp
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
) 
__THROW
;

175 extern int 
	$wcsncasecmp
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
,

176 
size_t
 
__n
) 
__THROW
;

180 #include 
	~<xlocale.h
>

182 extern int 
	$wcscasecmp_l
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
,

183 
__locale_t
 
__loc
) 
__THROW
;

185 extern int 
	$wcsncasecmp_l
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
,

186 
size_t
 
__n
, 
__locale_t
 
__loc
) 
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 extern int 
	$wcscoll
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
) 
__THROW
;

196 extern 
size_t
 
	$wcsxfrm
 (
wchar_t
 *
__restrict
 
__s1
,

197 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
) 
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifdef 
__USE_XOPEN2K8


206 extern int 
	$wcscoll_l
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
,

207 
__locale_t
 
__loc
) 
__THROW
;

212 extern 
size_t
 
	$wcsxfrm_l
 (
wchar_t
 *
__s1
, const wchar_t *
__s2
,

213 
size_t
 
__n
, 
__locale_t
 
__loc
) 
__THROW
;

216 extern 
wchar_t
 *
	$wcsdup
 (const 
wchar_t
 *
__s
) 
__THROW
 
__attribute_malloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 extern "C++" 
wchar_t
 *
	$wcschr
 (
wchar_t
 *
__wcs
, wchar_t 
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr") 
__attribute_pure__
;

224 extern "C++" const 
wchar_t
 *
	$wcschr
 (const 
wchar_t
 *
__wcs
, wchar_t 
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr") 
__attribute_pure__
;

227 extern 
wchar_t
 *
	$wcschr
 (const 
wchar_t
 *
__wcs
, wchar_t 
__wc
)

228 
__THROW
 
__attribute_pure__
;

231 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 extern "C++" 
wchar_t
 *
	$wcsrchr
 (
wchar_t
 *
__wcs
, wchar_t 
__wc
)

233 
__THROW
 
	`__asm
 ("wcsrchr") 
__attribute_pure__
;

234 extern "C++" const 
wchar_t
 *
	$wcsrchr
 (const 
wchar_t
 *
__wcs
, wchar_t 
__wc
)

235 
__THROW
 
	`__asm
 ("wcsrchr") 
__attribute_pure__
;

237 extern 
wchar_t
 *
	$wcsrchr
 (const 
wchar_t
 *
__wcs
, wchar_t 
__wc
)

238 
__THROW
 
__attribute_pure__
;

240 
__END_NAMESPACE_STD


242 #ifdef 
__USE_GNU


245 extern 
wchar_t
 *
	$wcschrnul
 (const 
wchar_t
 *
__s
, wchar_t 
__wc
)

246 
__THROW
 
__attribute_pure__
;

249 
__BEGIN_NAMESPACE_STD


252 extern 
size_t
 
	$wcscspn
 (const 
wchar_t
 *
__wcs
, const wchar_t *
__reject
)

253 
__THROW
 
__attribute_pure__
;

256 extern 
size_t
 
	$wcsspn
 (const 
wchar_t
 *
__wcs
, const wchar_t *
__accept
)

257 
__THROW
 
__attribute_pure__
;

259 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 extern "C++" 
wchar_t
 *
	$wcspbrk
 (
wchar_t
 *
__wcs
, const wchar_t *
__accept
)

261 
__THROW
 
	`__asm
 ("wcspbrk") 
__attribute_pure__
;

262 extern "C++" const 
wchar_t
 *
	$wcspbrk
 (const 
wchar_t
 *
__wcs
,

263 const 
wchar_t
 *
__accept
)

264 
__THROW
 
	`__asm
 ("wcspbrk") 
__attribute_pure__
;

266 extern 
wchar_t
 *
	$wcspbrk
 (const 
wchar_t
 *
__wcs
, const wchar_t *
__accept
)

267 
__THROW
 
__attribute_pure__
;

270 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 extern "C++" 
wchar_t
 *
	$wcsstr
 (
wchar_t
 *
__haystack
, const wchar_t *
__needle
)

272 
__THROW
 
	`__asm
 ("wcsstr") 
__attribute_pure__
;

273 extern "C++" const 
wchar_t
 *
	$wcsstr
 (const 
wchar_t
 *
__haystack
,

274 const 
wchar_t
 *
__needle
)

275 
__THROW
 
	`__asm
 ("wcsstr") 
__attribute_pure__
;

277 extern 
wchar_t
 *
	$wcsstr
 (const 
wchar_t
 *
__haystack
, const wchar_t *
__needle
)

278 
__THROW
 
__attribute_pure__
;

282 extern 
wchar_t
 *
	$wcstok
 (
wchar_t
 *
__restrict
 
__s
,

283 const 
wchar_t
 *
__restrict
 
__delim
,

284 
wchar_t
 **
__restrict
 
__ptr
) 
__THROW
;

287 extern 
size_t
 
	$wcslen
 (const 
wchar_t
 *
__s
) 
__THROW
 
__attribute_pure__
;

288 
__END_NAMESPACE_STD


290 #ifdef 
__USE_XOPEN


292 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 extern "C++" 
wchar_t
 *
	$wcswcs
 (
wchar_t
 *
__haystack
, const wchar_t *
__needle
)

294 
__THROW
 
	`__asm
 ("wcswcs") 
__attribute_pure__
;

295 extern "C++" const 
wchar_t
 *
	$wcswcs
 (const 
wchar_t
 *
__haystack
,

296 const 
wchar_t
 *
__needle
)

297 
__THROW
 
	`__asm
 ("wcswcs") 
__attribute_pure__
;

299 extern 
wchar_t
 *
	$wcswcs
 (const 
wchar_t
 *
__haystack
, const wchar_t *
__needle
)

300 
__THROW
 
__attribute_pure__
;

304 #ifdef 
__USE_XOPEN2K8


306 extern 
size_t
 
	$wcsnlen
 (const 
wchar_t
 *
__s
, 
size_t
 
__maxlen
)

307 
__THROW
 
__attribute_pure__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifdef 
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 extern "C++" 
wchar_t
 *
	$wmemchr
 (
wchar_t
 *
__s
, wchar_t 
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr") 
__attribute_pure__
;

316 extern "C++" const 
wchar_t
 *
	$wmemchr
 (const 
wchar_t
 *
__s
, wchar_t 
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr") 
__attribute_pure__
;

320 extern 
wchar_t
 *
	$wmemchr
 (const 
wchar_t
 *
__s
, wchar_t 
__c
, 
size_t
 
__n
)

321 
__THROW
 
__attribute_pure__
;

325 extern int 
	$wmemcmp
 (const 
wchar_t
 *
__s1
, const wchar_t *
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__attribute_pure__
;

329 extern 
wchar_t
 *
	$wmemcpy
 (
wchar_t
 *
__restrict
 
__s1
,

330 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
) 
__THROW
;

334 extern 
wchar_t
 *
	$wmemmove
 (
wchar_t
 *
__s1
, const wchar_t *
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 extern 
wchar_t
 *
	$wmemset
 (
wchar_t
 *
__s
, wchar_t 
__c
, 
size_t
 
__n
) 
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_GNU


344 extern 
wchar_t
 *
	$wmempcpy
 (
wchar_t
 *
__restrict
 
__s1
,

345 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 extern 
wint_t
 
	$btowc
 (int 
__c
) 
__THROW
;

357 extern int 
	$wctob
 (
wint_t
 
__c
) 
__THROW
;

361 extern int 
	$mbsinit
 (const 
mbstate_t
 *
__ps
) 
__THROW
 
__attribute_pure__
;

365 extern 
size_t
 
	$mbrtowc
 (
wchar_t
 *
__restrict
 
__pwc
,

366 const char *
__restrict
 
__s
, 
size_t
 
__n
,

367 
mbstate_t
 *
__restrict
 
__p
) 
__THROW
;

370 extern 
size_t
 
	$wcrtomb
 (char *
__restrict
 
__s
, 
wchar_t
 
__wc
,

371 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

374 extern 
size_t
 
	$__mbrlen
 (const char *
__restrict
 
__s
, 
size_t
 
__n
,

375 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

376 extern 
size_t
 
	$mbrlen
 (const char *
__restrict
 
__s
, 
size_t
 
__n
,

377 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifdef 
__USE_EXTERN_INLINES


386 extern 
wint_t
 
	$__btowc_alias
 (int 
__c
) 
	`__asm
 ("btowc");

387 
__extern_inline
 
wint_t


388 
	`__NTH
 (
	$btowc
 (int 
__c
))

389 { return (
	`__builtin_constant_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wint_t
) 
__c
 : 
	`__btowc_alias
 (__c)); 
	}
}

392 extern int 
	$__wctob_alias
 (
wint_t
 
__c
) 
	`__asm
 ("wctob");

393 
__extern_inline
 int

394 
	`__NTH
 (
	$wctob
 (
wint_t
 
__wc
))

395 { return (
	`__builtin_constant_p
 (
__wc
) && __wc >= 
L
'\0' && __wc <= L'\x7f'

396 ? (int) 
__wc
 : 
	`__wctob_alias
 (__wc)); 
	}
}

398 
__extern_inline
 
size_t


399 
__NTH
 (
	$mbrlen
 (const char *
__restrict
 
__s
, 
size_t
 
__n
,

400 
mbstate_t
 *
__restrict
 
__ps
))

401 { return (
__ps
 != 
NULL


402 ? 
	`mbrtowc
 (
NULL
, 
__s
, 
__n
, 
__ps
) : 
	`__mbrlen
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 extern 
size_t
 
	$mbsrtowcs
 (
wchar_t
 *
__restrict
 
__dst
,

409 const char **
__restrict
 
__src
, 
size_t
 
__len
,

410 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

414 extern 
size_t
 
	$wcsrtombs
 (char *
__restrict
 
__dst
,

415 const 
wchar_t
 **
__restrict
 
__src
, 
size_t
 
__len
,

416 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 extern 
size_t
 
	$mbsnrtowcs
 (
wchar_t
 *
__restrict
 
__dst
,

424 const char **
__restrict
 
__src
, 
size_t
 
__nmc
,

425 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

429 extern 
size_t
 
	$wcsnrtombs
 (char *
__restrict
 
__dst
,

430 const 
wchar_t
 **
__restrict
 
__src
,

431 
size_t
 
__nwc
, size_t 
__len
,

432 
mbstate_t
 *
__restrict
 
__ps
) 
__THROW
;

437 #ifdef 
__USE_XOPEN


439 extern int 
	$wcwidth
 (
wchar_t
 
__c
) 
__THROW
;

443 extern int 
	$wcswidth
 (const 
wchar_t
 *
__s
, 
size_t
 
__n
) 
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 extern double 
	$wcstod
 (const 
wchar_t
 *
__restrict
 
__nptr
,

451 
wchar_t
 **
__restrict
 
__endptr
) 
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifdef 
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 extern float 
	$wcstof
 (const 
wchar_t
 *
__restrict
 
__nptr
,

458 
wchar_t
 **
__restrict
 
__endptr
) 
__THROW
;

459 extern long double 
	$wcstold
 (const 
wchar_t
 *
__restrict
 
__nptr
,

460 
wchar_t
 **
__restrict
 
__endptr
) 
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 extern long int 
	$wcstol
 (const 
wchar_t
 *
__restrict
 
__nptr
,

469 
wchar_t
 **
__restrict
 
__endptr
, int 
__base
) 
__THROW
;

473 extern unsigned long int 
	$wcstoul
 (const 
wchar_t
 *
__restrict
 
__nptr
,

474 
wchar_t
 **
__restrict
 
__endptr
, int 
__base
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #if 
defined
 
__USE_ISOC99
 || (defined 
__GNUC__
 && defined 
__USE_GNU
)

479 
__BEGIN_NAMESPACE_C99


482 
__extension__


483 extern long long int 
	$wcstoll
 (const 
wchar_t
 *
__restrict
 
__nptr
,

484 
wchar_t
 **
__restrict
 
__endptr
, int 
__base
)

485 
__THROW
;

489 
__extension__


490 extern unsigned long long int 
	$wcstoull
 (const 
wchar_t
 *
__restrict
 
__nptr
,

491 
wchar_t
 **
__restrict
 
__endptr
,

492 int 
__base
) 
__THROW
;

493 
__END_NAMESPACE_C99


496 #if 
defined
 
__GNUC__
 && defined 
__USE_GNU


499 
__extension__


500 extern long long int 
	$wcstoq
 (const 
wchar_t
 *
__restrict
 
__nptr
,

501 
wchar_t
 **
__restrict
 
__endptr
, int 
__base
)

502 
__THROW
;

506 
__extension__


507 extern unsigned long long int 
	$wcstouq
 (const 
wchar_t
 *
__restrict
 
__nptr
,

508 
wchar_t
 **
__restrict
 
__endptr
,

509 int 
__base
) 
__THROW
;

512 #ifdef 
__USE_GNU


526 #include 
	~<xlocale.h
>

530 extern long int 
	$wcstol_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

531 
wchar_t
 **
__restrict
 
__endptr
, int 
__base
,

532 
__locale_t
 
__loc
) 
__THROW
;

534 extern unsigned long int 
	$wcstoul_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

535 
wchar_t
 **
__restrict
 
__endptr
,

536 int 
__base
, 
__locale_t
 
__loc
) 
__THROW
;

538 
__extension__


539 extern long long int 
	$wcstoll_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

540 
wchar_t
 **
__restrict
 
__endptr
,

541 int 
__base
, 
__locale_t
 
__loc
) 
__THROW
;

543 
__extension__


544 extern unsigned long long int 
	$wcstoull_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

545 
wchar_t
 **
__restrict
 
__endptr
,

546 int 
__base
, 
__locale_t
 
__loc
)

547 
__THROW
;

549 extern double 
	$wcstod_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

550 
wchar_t
 **
__restrict
 
__endptr
, 
__locale_t
 
__loc
)

551 
__THROW
;

553 extern float 
	$wcstof_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

554 
wchar_t
 **
__restrict
 
__endptr
, 
__locale_t
 
__loc
)

555 
__THROW
;

557 extern long double 
	$wcstold_l
 (const 
wchar_t
 *
__restrict
 
__nptr
,

558 
wchar_t
 **
__restrict
 
__endptr
,

559 
__locale_t
 
__loc
) 
__THROW
;

563 #ifdef 
__USE_XOPEN2K8


566 extern 
wchar_t
 *
	$wcpcpy
 (
wchar_t
 *
__restrict
 
__dest
,

567 const 
wchar_t
 *
__restrict
 
__src
) 
__THROW
;

571 extern 
wchar_t
 *
	$wcpncpy
 (
wchar_t
 *
__restrict
 
__dest
,

572 const 
wchar_t
 *
__restrict
 
__src
, 
size_t
 
__n
)

573 
__THROW
;

580 extern 
__FILE
 *
	$open_wmemstream
 (
wchar_t
 **
__bufloc
, 
size_t
 *
__sizeloc
) 
__THROW
;

583 #if 
defined
 
__USE_ISOC95
 || defined 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 extern int 
	$fwide
 (
__FILE
 *
__fp
, int 
__mode
) 
__THROW
;

594 extern int 
	`fwprintf
 (
__FILE
 *
__restrict
 
__stream
,

595 const 
wchar_t
 *
__restrict
 
__format
, ...)

601 extern int 
	`wprintf
 (const 
wchar_t
 *
__restrict
 
__format
, ...)

604 extern int 
	$swprintf
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

605 const 
wchar_t
 *
__restrict
 
__format
, ...)

606 
__THROW
 ;

612 extern int 
	`vfwprintf
 (
__FILE
 *
__restrict
 
__s
,

613 const 
wchar_t
 *
__restrict
 
__format
,

614 
__gnuc_va_list
 
__arg
)

620 extern int 
	`vwprintf
 (const 
wchar_t
 *
__restrict
 
__format
,

621 
__gnuc_va_list
 
__arg
)

625 extern int 
	$vswprintf
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

626 const 
wchar_t
 *
__restrict
 
__format
,

627 
__gnuc_va_list
 
__arg
)

628 
__THROW
 ;

635 extern int 
	`fwscanf
 (
__FILE
 *
__restrict
 
__stream
,

636 const 
wchar_t
 *
__restrict
 
__format
, ...)

642 extern int 
	`wscanf
 (const 
wchar_t
 *
__restrict
 
__format
, ...)

645 extern int 
	$swscanf
 (const 
wchar_t
 *
__restrict
 
__s
,

646 const 
wchar_t
 *
__restrict
 
__format
, ...)

647 
__THROW
 ;

649 #if 
defined
 
__USE_ISOC99
 && !defined 
__USE_GNU
 \

650 && (!
defined
 
__LDBL_COMPAT
 || !defined 
__REDIRECT
) \

651 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

652 #ifdef 
__REDIRECT


656 extern int 
	`__REDIRECT
 (
fwscanf
, (
__FILE
 *
__restrict
 
__stream
,

657 const 
wchar_t
 *
__restrict
 
__format
, ...),

658 
__isoc99_fwscanf
)

660 extern int 
	`__REDIRECT
 (
wscanf
, (const 
wchar_t
 *
__restrict
 
__format
, ...),

661 
__isoc99_wscanf
)

663 extern int 
	`__REDIRECT_NTH
 (
swscanf
, (const 
wchar_t
 *
__restrict
 
__s
,

664 const 
wchar_t
 *
__restrict
 
__format
,

665 ...), 
__isoc99_swscanf
)

668 extern int 
	`__isoc99_fwscanf
 (
__FILE
 *
__restrict
 
__stream
,

669 const 
wchar_t
 *
__restrict
 
__format
, ...);

670 extern int 
	`__isoc99_wscanf
 (const 
wchar_t
 *
__restrict
 
__format
, ...);

671 extern int 
	$__isoc99_swscanf
 (const 
wchar_t
 *
__restrict
 
__s
,

672 const 
wchar_t
 *
__restrict
 
__format
, ...)

673 
__THROW
;

674 #define 
	#fwscanf
 
__isoc99_fwscanf


	)

675 #define 
	#wscanf
 
__isoc99_wscanf


	)

676 #define 
	#swscanf
 
__isoc99_swscanf


	)

680 
__END_NAMESPACE_STD


683 #ifdef 
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 extern int 
	`vfwscanf
 (
__FILE
 *
__restrict
 
__s
,

690 const 
wchar_t
 *
__restrict
 
__format
,

691 
__gnuc_va_list
 
__arg
)

697 extern int 
	`vwscanf
 (const 
wchar_t
 *
__restrict
 
__format
,

698 
__gnuc_va_list
 
__arg
)

701 extern int 
	$vswscanf
 (const 
wchar_t
 *
__restrict
 
__s
,

702 const 
wchar_t
 *
__restrict
 
__format
,

703 
__gnuc_va_list
 
__arg
)

704 
__THROW
 ;

706 #if !
defined
 
__USE_GNU
 \

707 && (!
defined
 
__LDBL_COMPAT
 || !defined 
__REDIRECT
) \

708 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

709 #ifdef 
__REDIRECT


710 extern int 
	`__REDIRECT
 (
vfwscanf
, (
__FILE
 *
__restrict
 
__s
,

711 const 
wchar_t
 *
__restrict
 
__format
,

712 
__gnuc_va_list
 
__arg
), 
__isoc99_vfwscanf
)

714 extern int 
	`__REDIRECT
 (
vwscanf
, (const 
wchar_t
 *
__restrict
 
__format
,

715 
__gnuc_va_list
 
__arg
), 
__isoc99_vwscanf
)

717 extern int 
	`__REDIRECT_NTH
 (
vswscanf
, (const 
wchar_t
 *
__restrict
 
__s
,

718 const 
wchar_t
 *
__restrict
 
__format
,

719 
__gnuc_va_list
 
__arg
), 
__isoc99_vswscanf
)

722 extern int 
	`__isoc99_vfwscanf
 (
__FILE
 *
__restrict
 
__s
,

723 const 
wchar_t
 *
__restrict
 
__format
,

724 
__gnuc_va_list
 
__arg
);

725 extern int 
	`__isoc99_vwscanf
 (const 
wchar_t
 *
__restrict
 
__format
,

726 
__gnuc_va_list
 
__arg
);

727 extern int 
	$__isoc99_vswscanf
 (const 
wchar_t
 *
__restrict
 
__s
,

728 const 
wchar_t
 *
__restrict
 
__format
,

729 
__gnuc_va_list
 
__arg
) 
__THROW
;

730 #define 
	#vfwscanf
 
__isoc99_vfwscanf


	)

731 #define 
	#vwscanf
 
__isoc99_vwscanf


	)

732 #define 
	#vswscanf
 
__isoc99_vswscanf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 extern 
wint_t
 
	`fgetwc
 (
__FILE
 *
__stream
);

746 extern 
wint_t
 
	`getwc
 (
__FILE
 *
__stream
);

752 extern 
wint_t
 
	`getwchar
 (void);

759 extern 
wint_t
 
	`fputwc
 (
wchar_t
 
__wc
, 
__FILE
 *
__stream
);

760 extern 
wint_t
 
	`putwc
 (
wchar_t
 
__wc
, 
__FILE
 *
__stream
);

766 extern 
wint_t
 
	`putwchar
 (
wchar_t
 
__wc
);

774 extern 
wchar_t
 *
	`fgetws
 (wchar_t *
__restrict
 
__ws
, int 
__n
,

775 
__FILE
 *
__restrict
 
__stream
);

781 extern int 
	`fputws
 (const 
wchar_t
 *
__restrict
 
__ws
,

782 
__FILE
 *
__restrict
 
__stream
);

789 extern 
wint_t
 
	`ungetwc
 (wint_t 
__wc
, 
__FILE
 *
__stream
);

790 
__END_NAMESPACE_STD


793 #ifdef 
__USE_GNU


801 extern 
wint_t
 
	`getwc_unlocked
 (
__FILE
 *
__stream
);

802 extern 
wint_t
 
	`getwchar_unlocked
 (void);

810 extern 
wint_t
 
	`fgetwc_unlocked
 (
__FILE
 *
__stream
);

818 extern 
wint_t
 
	`fputwc_unlocked
 (
wchar_t
 
__wc
, 
__FILE
 *
__stream
);

827 extern 
wint_t
 
	`putwc_unlocked
 (
wchar_t
 
__wc
, 
__FILE
 *
__stream
);

828 extern 
wint_t
 
	`putwchar_unlocked
 (
wchar_t
 
__wc
);

837 extern 
wchar_t
 *
	`fgetws_unlocked
 (wchar_t *
__restrict
 
__ws
, int 
__n
,

838 
__FILE
 *
__restrict
 
__stream
);

846 extern int 
	`fputws_unlocked
 (const 
wchar_t
 *
__restrict
 
__ws
,

847 
__FILE
 *
__restrict
 
__stream
);

851 
__BEGIN_NAMESPACE_C99


855 extern 
size_t
 
	$wcsftime
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__maxsize
,

856 const 
wchar_t
 *
__restrict
 
__format
,

857 const struct 
tm
 *
__restrict
 
__tp
) 
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifdef 
__USE_GNU


861 #include 
	~<xlocale.h
>

865 extern 
size_t
 
	$wcsftime_l
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__maxsize
,

866 const 
wchar_t
 *
__restrict
 
__format
,

867 const struct 
tm
 *
__restrict
 
__tp
,

868 
__locale_t
 
__loc
) 
__THROW
;

877 #if 
defined
 
__USE_UNIX98
 && !defined 
__USE_GNU


878 #define 
	#__need_iswxxx


	)

879 #include 
	~<wctype.h
>

883 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


884 #include 
	~<bits/wchar2.h
>

887 #ifdef 
__LDBL_COMPAT


888 #include 
	~<bits/wchar-ldbl.h
>

891 
__END_DECLS


899 #undef 
__need_mbstate_t


900 #undef 
__need_wint_t


	@/usr/include/xlocale.h

20 #ifndef 
_XLOCALE_H


21 #define 
	#_XLOCALE_H
 1

	)

27 typedef struct 
	s__locale_struct


30 struct 
__locale_data
 *
	m__locales
[13];

33 const unsigned short int *
	m__ctype_b
;

34 const int *
	m__ctype_tolower
;

35 const int *
	m__ctype_toupper
;

38 const char *
	m__names
[13];

39 } *
	t__locale_t
;

42 typedef 
__locale_t
 
	tlocale_t
;

	@/usr/include/bits/byteswap.h

19 #if !
defined
 
_BYTESWAP_H
 && !defined 
_NETINET_IN_H
 && !defined 
_ENDIAN_H


23 #ifndef 
_BITS_BYTESWAP_H


24 #define 
	#_BITS_BYTESWAP_H
 1

	)

26 #include 
	~<features.h
>

27 #include 
	~<bits/types.h
>

28 #include 
	~<bits/wordsize.h
>

31 #define 
	#__bswap_constant_16
(
x
) \

32 ((unsigned short int) ((((
x
) >> 8) & 0xff) | (((x) & 0xff) << 8)))

	)

35 #include 
	~<bits/byteswap-16.h
>

38 #define 
	#__bswap_constant_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
) & 0x0000ff00) << 8) | (((x) & 0x000000ff) << 24))

	)

42 #ifdef 
__GNUC__


43 #if 
__GNUC_PREREQ
 (4, 3)

44 static 
__inline
 unsigned int

45 
	$__bswap_32
 (unsigned int 
__bsx
)

47 return 
	`__builtin_bswap32
 (
__bsx
);

48 
	}
}

49 #elif 
__GNUC__
 >= 2

50 #if 
__WORDSIZE
 == 64 || (
defined
 
__i486__
 || defined 
__pentium__
 \

51 || 
defined
 
	g__pentiumpro__
 || defined 
	g__pentium4__
 \

52 || 
defined
 
	g__k8__
 || defined 
	g__athlon__
 \

53 || 
defined
 
	g__k6__
 || defined 
	g__nocona__
 \

54 || 
defined
 
	g__core2__
 || defined 
	g__geode__
 \

55 || 
defined
 
	g__amdfam10__
)

58 #define 
	#__bswap_32
(
x
) \

59 (
__extension__
 \

60 ({ register unsigned int 
__v
, 
__x
 = (
x
); \

61 if (
	`__builtin_constant_p
 (
__x
)) \

62 
__v
 = 
	`__bswap_constant_32
 (
__x
); \

64 
	`__asm__
 ("bswap %0" : "=r" (
__v
) : "0" (
__x
)); \

65 
__v
; }))

	)

67 #define 
	#__bswap_32
(
x
) \

68 (
__extension__
 \

69 ({ register unsigned int 
__v
, 
__x
 = (
x
); \

70 if (
	`__builtin_constant_p
 (
__x
)) \

71 
__v
 = 
	`__bswap_constant_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "=r" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 #define 
	#__bswap_32
(
x
) \

83 (
__extension__
 \

84 ({ register unsigned int 
__x
 = (
x
); 
	`__bswap_constant_32
 (__x); }))

	)

87 static 
__inline
 unsigned int

88 
	$__bswap_32
 (unsigned int 
__bsx
)

90 return 
	`__bswap_constant_32
 (
__bsx
);

91 
	}
}

95 #if 
__GNUC_PREREQ
 (2, 0)

97 #define 
	#__bswap_constant_64
(
x
) \

98 (
	`__extension__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
) & 0x00000000000000ffull) << 56)))

	)

107 #if 
__GNUC_PREREQ
 (4, 3)

108 static 
__inline
 
__uint64_t


109 
	$__bswap_64
 (
__uint64_t
 
__bsx
)

111 return 
	`__builtin_bswap64
 (
__bsx
);

112 
	}
}

113 #elif 
__WORDSIZE
 == 64

114 #define 
	#__bswap_64
(
x
) \

115 (
__extension__
 \

116 ({ register 
__uint64_t
 
__v
, 
__x
 = (
x
); \

117 if (
	`__builtin_constant_p
 (
__x
)) \

118 
__v
 = 
	`__bswap_constant_64
 (
__x
); \

120 
	`__asm__
 ("bswap %q0" : "=r" (
__v
) : "0" (
__x
)); \

121 
__v
; }))

	)

123 #define 
	#__bswap_64
(
x
) \

124 (
__extension__
 \

125 ({ union { 
__extension__
 
__uint64_t
 
__ll
; \

126 unsigned int 
__l
[2]; } 
__w
, 
__r
; \

127 if (
	`__builtin_constant_p
 (
x
)) \

128 
__r
.
__ll
 = 
	`__bswap_constant_64
 (
x
); \

131 
__w
.
__ll
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bswap_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bswap_32
 (
__w
.__l[0]); \

135 
__r
.
__ll
; }))

	)

137 #elif 
__GLIBC_HAVE_LONG_LONG


138 #define 
	#__bswap_constant_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
) & 0x00000000000000ffull) << 56))

	)

148 static 
__inline
 
__uint64_t


149 
	$__bswap_64
 (
__uint64_t
 
__bsx
)

151 return 
	`__bswap_constant_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #ifndef 
_ENDIAN_H


7 #define 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/wchar-ldbl.h

19 #ifndef 
_WCHAR_H


23 #if 
defined
 
__USE_ISOC95
 || defined 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fwprintf
);

26 
__LDBL_REDIR_DECL
 (
wprintf
);

27 
__LDBL_REDIR_DECL
 (
swprintf
);

28 
__LDBL_REDIR_DECL
 (
vfwprintf
);

29 
__LDBL_REDIR_DECL
 (
vwprintf
);

30 
__LDBL_REDIR_DECL
 (
vswprintf
);

31 #if 
defined
 
__USE_ISOC99
 && !defined 
__USE_GNU
 \

32 && !
defined
 
	g__REDIRECT
 \

33 && (
defined
 
	g__STRICT_ANSI__
 || defined 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwscanf
, 
__nldbl___isoc99_fwscanf
)

35 
	$__LDBL_REDIR1_DECL
 (
wscanf
, 
__nldbl___isoc99_wscanf
)

36 
	$__LDBL_REDIR1_DECL
 (
swscanf
, 
__nldbl___isoc99_swscanf
)

38 
	`__LDBL_REDIR_DECL
 (
fwscanf
);

39 
	`__LDBL_REDIR_DECL
 (
wscanf
);

40 
	`__LDBL_REDIR_DECL
 (
swscanf
);

42 
__END_NAMESPACE_C99


45 #ifdef 
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wcstold
, 
wcstod
);

48 #if !
defined
 
__USE_GNU
 && !defined 
__REDIRECT
 \

49 && (
defined
 
__STRICT_ANSI__
 || defined 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwscanf
, 
__nldbl___isoc99_vfwscanf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwscanf
, 
__nldbl___isoc99_vwscanf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswscanf
, 
__nldbl___isoc99_vswscanf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwscanf
);

55 
	`__LDBL_REDIR_DECL
 (
vwscanf
);

56 
	`__LDBL_REDIR_DECL
 (
vswscanf
);

58 
__END_NAMESPACE_C99


61 #ifdef 
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wcstold_l
, 
wcstod_l
);

65 #if 
__USE_FORTIFY_LEVEL
 > 0 && 
defined
 
__fortify_function


66 
	$__LDBL_REDIR_DECL
 (
__swprintf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vswprintf_chk
)

68 #if 
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fwprintf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__wprintf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfwprintf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vwprintf_chk
)

	@/usr/include/bits/wchar.h

19 #ifndef 
_BITS_WCHAR_H


20 #define 
	#_BITS_WCHAR_H
 1

	)

33 #ifdef 
__WCHAR_MAX__


34 #define 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #elif 
L
'\0' - 1 > 0

36 #define 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 #define 
	#__WCHAR_MAX
 (0x7fffffff + 
L
'\0')

	)

41 #ifdef 
__WCHAR_MIN__


42 #define 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #elif 
L
'\0' - 1 > 0

44 #define 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 #define 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wchar2.h

19 #ifndef 
_WCHAR_H


24 extern 
wchar_t
 *
	$__wmemcpy_chk
 (
wchar_t
 *
__restrict
 
__s1
,

25 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
) 
__THROW
;

27 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wmemcpy_alias
,

28 (
wchar_t
 *
__restrict
 
__s1
,

29 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
),

30 
wmemcpy
);

31 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wmemcpy_chk_warn
,

32 (
wchar_t
 *
__restrict
 
__s1
,

33 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmemcpy_chk
)

35 
	`__warnattr
 ("wmemcpy called with length bigger than size of destination "

38 
__fortify_function
 
wchar_t
 *

39 
	`__NTH
 (
	$wmemcpy
 (
wchar_t
 *
__restrict
 
__s1
, const wchar_t *__restrict 
__s2
,

40 
size_t
 
__n
))

42 if (
	`__bos0
 (
__s1
) != (
size_t
) -1)

44 if (!
	`__builtin_constant_p
 (
__n
))

45 return 
	`__wmemcpy_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
));

48 if (
__n
 > 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
))

49 return 
	`__wmemcpy_chk_warn
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
));

52 return 
	`__wmemcpy_alias
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 extern 
wchar_t
 *
	$__wmemmove_chk
 (
wchar_t
 *
__s1
, const wchar_t *
__s2
,

57 
size_t
 
__n
, size_t 
__ns1
) 
__THROW
;

58 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_alias
, (wchar_t *
__s1
,

59 const 
wchar_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_warn
,

62 (
wchar_t
 *
__s1
, const wchar_t *
__s2
,

63 
size_t
 
__n
, size_t 
__ns1
), 
__wmemmove_chk
)

64 
	`__warnattr
 ("wmemmove called with length bigger than size of destination "

67 
__fortify_function
 
wchar_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wchar_t
 *
__s1
, const wchar_t *
__s2
, 
size_t
 
__n
))

70 if (
	`__bos0
 (
__s1
) != (
size_t
) -1)

72 if (!
	`__builtin_constant_p
 (
__n
))

73 return 
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
));

76 if (
__n
 > 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
))

77 return 
	`__wmemmove_chk_warn
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
));

80 return 
	`__wmemmove_alias
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifdef 
__USE_GNU


85 extern 
wchar_t
 *
	$__wmempcpy_chk
 (
wchar_t
 *
__restrict
 
__s1
,

86 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
) 
__THROW
;

88 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wmempcpy_alias
,

89 (
wchar_t
 *
__restrict
 
__s1
,

90 const 
wchar_t
 *
__restrict
 
__s2
,

91 
size_t
 
__n
), 
wmempcpy
);

92 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wmempcpy_chk_warn
,

93 (
wchar_t
 *
__restrict
 
__s1
,

94 const 
wchar_t
 *
__restrict
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmempcpy_chk
)

96 
	`__warnattr
 ("wmempcpy called with length bigger than size of destination "

99 
__fortify_function
 
wchar_t
 *

100 
	`__NTH
 (
	$wmempcpy
 (
wchar_t
 *
__restrict
 
__s1
, const wchar_t *__restrict 
__s2
,

101 
size_t
 
__n
))

103 if (
	`__bos0
 (
__s1
) != (
size_t
) -1)

105 if (!
	`__builtin_constant_p
 (
__n
))

106 return 
	`__wmempcpy_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
));

109 if (
__n
 > 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
))

110 return 
	`__wmempcpy_chk_warn
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
) / sizeof (
wchar_t
));

113 return 
	`__wmempcpy_alias
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 extern 
wchar_t
 *
	$__wmemset_chk
 (
wchar_t
 *
__s
, wchar_t 
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
) 
__THROW
;

120 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wmemset_alias
, (wchar_t *
__s
, wchar_t 
__c
,

121 
size_t
 
__n
), 
wmemset
);

122 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wmemset_chk_warn
,

123 (
wchar_t
 *
__s
, wchar_t 
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmemset_chk
)

125 
	`__warnattr
 ("wmemset called with length bigger than size of destination "

128 
__fortify_function
 
wchar_t
 *

129 
	`__NTH
 (
	$wmemset
 (
wchar_t
 *
__s
, wchar_t 
__c
, 
size_t
 
__n
))

131 if (
	`__bos0
 (
__s
) != (
size_t
) -1)

133 if (!
	`__builtin_constant_p
 (
__n
))

134 return 
	`__wmemset_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__s) / sizeof (
wchar_t
));

136 if (
__n
 > 
	`__bos0
 (
__s
) / sizeof (
wchar_t
))

137 return 
	`__wmemset_chk_warn
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
) / sizeof (
wchar_t
));

140 return 
	`__wmemset_alias
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 extern 
wchar_t
 *
	$__wcscpy_chk
 (
wchar_t
 *
__restrict
 
__dest
,

145 const 
wchar_t
 *
__restrict
 
__src
,

146 
size_t
 
__n
) 
__THROW
;

147 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wcscpy_alias
,

148 (
wchar_t
 *
__restrict
 
__dest
,

149 const 
wchar_t
 *
__restrict
 
__src
), 
wcscpy
);

151 
__fortify_function
 
wchar_t
 *

152 
	`__NTH
 (
	$wcscpy
 (
wchar_t
 *
__restrict
 
__dest
, const wchar_t *__restrict 
__src
))

154 if (
	`__bos
 (
__dest
) != (
size_t
) -1)

155 return 
	`__wcscpy_chk
 (
__dest
, 
__src
, 
	`__bos
 (__dest) / sizeof (
wchar_t
));

156 return 
	`__wcscpy_alias
 (
__dest
, 
__src
);

157 
	}
}

160 extern 
wchar_t
 *
	$__wcpcpy_chk
 (
wchar_t
 *
__restrict
 
__dest
,

161 const 
wchar_t
 *
__restrict
 
__src
,

162 
size_t
 
__destlen
) 
__THROW
;

163 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wcpcpy_alias
,

164 (
wchar_t
 *
__restrict
 
__dest
,

165 const 
wchar_t
 *
__restrict
 
__src
), 
wcpcpy
);

167 
__fortify_function
 
wchar_t
 *

168 
	`__NTH
 (
	$wcpcpy
 (
wchar_t
 *
__restrict
 
__dest
, const wchar_t *__restrict 
__src
))

170 if (
	`__bos
 (
__dest
) != (
size_t
) -1)

171 return 
	`__wcpcpy_chk
 (
__dest
, 
__src
, 
	`__bos
 (__dest) / sizeof (
wchar_t
));

172 return 
	`__wcpcpy_alias
 (
__dest
, 
__src
);

173 
	}
}

176 extern 
wchar_t
 *
	$__wcsncpy_chk
 (
wchar_t
 *
__restrict
 
__dest
,

177 const 
wchar_t
 *
__restrict
 
__src
, 
size_t
 
__n
,

178 
size_t
 
__destlen
) 
__THROW
;

179 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wcsncpy_alias
,

180 (
wchar_t
 *
__restrict
 
__dest
,

181 const 
wchar_t
 *
__restrict
 
__src
,

182 
size_t
 
__n
), 
wcsncpy
);

183 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wcsncpy_chk_warn
,

184 (
wchar_t
 *
__restrict
 
__dest
,

185 const 
wchar_t
 *
__restrict
 
__src
,

186 
size_t
 
__n
, size_t 
__destlen
), 
__wcsncpy_chk
)

187 
	`__warnattr
 ("wcsncpy called with length bigger than size of destination "

190 
__fortify_function
 
wchar_t
 *

191 
	`__NTH
 (
	$wcsncpy
 (
wchar_t
 *
__restrict
 
__dest
, const wchar_t *__restrict 
__src
,

192 
size_t
 
__n
))

194 if (
	`__bos
 (
__dest
) != (
size_t
) -1)

196 if (!
	`__builtin_constant_p
 (
__n
))

197 return 
	`__wcsncpy_chk
 (
__dest
, 
__src
, 
__n
,

198 
	`__bos
 (
__dest
) / sizeof (
wchar_t
));

199 if (
__n
 > 
	`__bos
 (
__dest
) / sizeof (
wchar_t
))

200 return 
	`__wcsncpy_chk_warn
 (
__dest
, 
__src
, 
__n
,

201 
	`__bos
 (
__dest
) / sizeof (
wchar_t
));

203 return 
	`__wcsncpy_alias
 (
__dest
, 
__src
, 
__n
);

204 
	}
}

207 extern 
wchar_t
 *
	$__wcpncpy_chk
 (
wchar_t
 *
__restrict
 
__dest
,

208 const 
wchar_t
 *
__restrict
 
__src
, 
size_t
 
__n
,

209 
size_t
 
__destlen
) 
__THROW
;

210 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wcpncpy_alias
,

211 (
wchar_t
 *
__restrict
 
__dest
,

212 const 
wchar_t
 *
__restrict
 
__src
,

213 
size_t
 
__n
), 
wcpncpy
);

214 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wcpncpy_chk_warn
,

215 (
wchar_t
 *
__restrict
 
__dest
,

216 const 
wchar_t
 *
__restrict
 
__src
,

217 
size_t
 
__n
, size_t 
__destlen
), 
__wcpncpy_chk
)

218 
	`__warnattr
 ("wcpncpy called with length bigger than size of destination "

221 
__fortify_function
 
wchar_t
 *

222 
	`__NTH
 (
	$wcpncpy
 (
wchar_t
 *
__restrict
 
__dest
, const wchar_t *__restrict 
__src
,

223 
size_t
 
__n
))

225 if (
	`__bos
 (
__dest
) != (
size_t
) -1)

227 if (!
	`__builtin_constant_p
 (
__n
))

228 return 
	`__wcpncpy_chk
 (
__dest
, 
__src
, 
__n
,

229 
	`__bos
 (
__dest
) / sizeof (
wchar_t
));

230 if (
__n
 > 
	`__bos
 (
__dest
) / sizeof (
wchar_t
))

231 return 
	`__wcpncpy_chk_warn
 (
__dest
, 
__src
, 
__n
,

232 
	`__bos
 (
__dest
) / sizeof (
wchar_t
));

234 return 
	`__wcpncpy_alias
 (
__dest
, 
__src
, 
__n
);

235 
	}
}

238 extern 
wchar_t
 *
	$__wcscat_chk
 (
wchar_t
 *
__restrict
 
__dest
,

239 const 
wchar_t
 *
__restrict
 
__src
,

240 
size_t
 
__destlen
) 
__THROW
;

241 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wcscat_alias
,

242 (
wchar_t
 *
__restrict
 
__dest
,

243 const 
wchar_t
 *
__restrict
 
__src
), 
wcscat
);

245 
__fortify_function
 
wchar_t
 *

246 
	`__NTH
 (
	$wcscat
 (
wchar_t
 *
__restrict
 
__dest
, const wchar_t *__restrict 
__src
))

248 if (
	`__bos
 (
__dest
) != (
size_t
) -1)

249 return 
	`__wcscat_chk
 (
__dest
, 
__src
, 
	`__bos
 (__dest) / sizeof (
wchar_t
));

250 return 
	`__wcscat_alias
 (
__dest
, 
__src
);

251 
	}
}

254 extern 
wchar_t
 *
	$__wcsncat_chk
 (
wchar_t
 *
__restrict
 
__dest
,

255 const 
wchar_t
 *
__restrict
 
__src
,

256 
size_t
 
__n
, size_t 
__destlen
) 
__THROW
;

257 extern 
wchar_t
 *
	`__REDIRECT_NTH
 (
__wcsncat_alias
,

258 (
wchar_t
 *
__restrict
 
__dest
,

259 const 
wchar_t
 *
__restrict
 
__src
,

260 
size_t
 
__n
), 
wcsncat
);

262 
__fortify_function
 
wchar_t
 *

263 
	`__NTH
 (
	$wcsncat
 (
wchar_t
 *
__restrict
 
__dest
, const wchar_t *__restrict 
__src
,

264 
size_t
 
__n
))

266 if (
	`__bos
 (
__dest
) != (
size_t
) -1)

267 return 
	`__wcsncat_chk
 (
__dest
, 
__src
, 
__n
,

268 
	`__bos
 (
__dest
) / sizeof (
wchar_t
));

269 return 
	`__wcsncat_alias
 (
__dest
, 
__src
, 
__n
);

270 
	}
}

273 extern int 
	$__swprintf_chk
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

274 int 
__flag
, 
size_t
 
__s_len
,

275 const 
wchar_t
 *
__restrict
 
__format
, ...)

276 
__THROW
 ;

278 extern int 
	`__REDIRECT_NTH_LDBL
 (
__swprintf_alias
,

279 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

280 const 
wchar_t
 *
__restrict
 
__fmt
, ...),

281 
swprintf
);

283 #ifdef 
__va_arg_pack


284 
__fortify_function
 int

285 
	`__NTH
 (
	$swprintf
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

286 const 
wchar_t
 *
__restrict
 
__fmt
, ...))

288 if (
	`__bos
 (
__s
) != (
size_t
) -1 || 
__USE_FORTIFY_LEVEL
 > 1)

289 return 
	`__swprintf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
) / sizeof (
wchar_t
),

291 
__fmt
, 
	`__va_arg_pack
 ());

292 return 
	`__swprintf_alias
 (
__s
, 
__n
, 
__fmt
, 
	`__va_arg_pack
 ());

293 
	}
}

294 #elif !
defined
 
__cplusplus


296 #define 
	#swprintf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
) != (
size_t
) -1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__swprintf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
) / sizeof (
wchar_t
), 
__VA_ARGS__
) \

300 : 
	`swprintf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 extern int 
	$__vswprintf_chk
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

304 int 
__flag
, 
size_t
 
__s_len
,

305 const 
wchar_t
 *
__restrict
 
__format
,

306 
__gnuc_va_list
 
__arg
)

307 
__THROW
 ;

309 extern int 
	`__REDIRECT_NTH_LDBL
 (
__vswprintf_alias
,

310 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

311 const 
wchar_t
 *
__restrict
 
__fmt
,

312 
__gnuc_va_list
 
__ap
), 
vswprintf
);

314 
__fortify_function
 int

315 
	`__NTH
 (
	$vswprintf
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__n
,

316 const 
wchar_t
 *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__ap
))

318 if (
	`__bos
 (
__s
) != (
size_t
) -1 || 
__USE_FORTIFY_LEVEL
 > 1)

319 return 
	`__vswprintf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
) / sizeof (
wchar_t
), 
__fmt
, 
__ap
);

321 return 
	`__vswprintf_alias
 (
__s
, 
__n
, 
__fmt
, 
__ap
);

322 
	}
}

325 #if 
__USE_FORTIFY_LEVEL
 > 1

327 extern int 
__fwprintf_chk
 (
__FILE
 *
__restrict
 
__stream
, int 
__flag
,

328 const 
wchar_t
 *
__restrict
 
__format
, ...);

329 extern int 
__wprintf_chk
 (int 
__flag
, const 
wchar_t
 *
__restrict
 
__format
,

331 extern int 
__vfwprintf_chk
 (
__FILE
 *
__restrict
 
__stream
, int 
__flag
,

332 const 
wchar_t
 *
__restrict
 
__format
,

333 
__gnuc_va_list
 
__ap
);

334 extern int 
__vwprintf_chk
 (int 
__flag
, const 
wchar_t
 *
__restrict
 
__format
,

335 
__gnuc_va_list
 
__ap
);

337 #ifdef 
__va_arg_pack


338 
__fortify_function
 int

339 
	$wprintf
 (const 
wchar_t
 *
__restrict
 
__fmt
, ...)

341 return 
	`__wprintf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_arg_pack
 ());

342 
	}
}

344 
__fortify_function
 int

345 
	$fwprintf
 (
__FILE
 *
__restrict
 
__stream
, const 
wchar_t
 *__restrict 
__fmt
, ...)

347 return 
	`__fwprintf_chk
 (
__stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_arg_pack
 ());

349 
	}
}

350 #elif !
defined
 
__cplusplus


351 #define 
	#wprintf
(...) \

352 
	`__wprintf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 #define 
	#fwprintf
(
stream
, ...) \

354 
	`__fwprintf_chk
 (
stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__fortify_function
 int

358 
	$vwprintf
 (const 
wchar_t
 *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__ap
)

360 return 
	`__vwprintf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

361 
	}
}

363 
__fortify_function
 int

364 
	$vfwprintf
 (
__FILE
 *
__restrict
 
__stream
,

365 const 
wchar_t
 *
__restrict
 
__fmt
, 
__gnuc_va_list
 
__ap
)

367 return 
	`__vfwprintf_chk
 (
__stream
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__ap
);

368 
	}
}

372 extern 
wchar_t
 *
	$__fgetws_chk
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

373 
__FILE
 *
__restrict
 
__stream
) 
__wur
;

374 extern 
wchar_t
 *
	`__REDIRECT
 (
__fgetws_alias
,

375 (
wchar_t
 *
__restrict
 
__s
, int 
__n
,

376 
__FILE
 *
__restrict
 
__stream
), 
fgetws
) 
__wur
;

377 extern 
wchar_t
 *
	`__REDIRECT
 (
__fgetws_chk_warn
,

378 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

379 
__FILE
 *
__restrict
 
__stream
), 
__fgetws_chk
)

380 
__wur
 
	`__warnattr
 ("fgetws called with bigger size than length "

383 
__fortify_function
 
__wur
 
wchar_t
 *

384 
	$fgetws
 (
wchar_t
 *
__restrict
 
__s
, int 
__n
, 
__FILE
 *__restrict 
__stream
)

386 if (
	`__bos
 (
__s
) != (
size_t
) -1)

388 if (!
	`__builtin_constant_p
 (
__n
) || __n <= 0)

389 return 
	`__fgetws_chk
 (
__s
, 
	`__bos
 (__s) / sizeof (
wchar_t
),

390 
__n
, 
__stream
);

392 if ((
size_t
) 
__n
 > 
	`__bos
 (
__s
) / sizeof (
wchar_t
))

393 return 
	`__fgetws_chk_warn
 (
__s
, 
	`__bos
 (__s) / sizeof (
wchar_t
),

394 
__n
, 
__stream
);

396 return 
	`__fgetws_alias
 (
__s
, 
__n
, 
__stream
);

397 
	}
}

399 #ifdef 
__USE_GNU


400 extern 
wchar_t
 *
	$__fgetws_unlocked_chk
 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__size
,

401 int 
__n
, 
__FILE
 *
__restrict
 
__stream
)

402 
__wur
;

403 extern 
wchar_t
 *
	`__REDIRECT
 (
__fgetws_unlocked_alias
,

404 (
wchar_t
 *
__restrict
 
__s
, int 
__n
,

405 
__FILE
 *
__restrict
 
__stream
), 
fgetws_unlocked
)

406 
__wur
;

407 extern 
wchar_t
 *
	`__REDIRECT
 (
__fgetws_unlocked_chk_warn
,

408 (
wchar_t
 *
__restrict
 
__s
, 
size_t
 
__size
, int 
__n
,

409 
__FILE
 *
__restrict
 
__stream
),

410 
__fgetws_unlocked_chk
)

411 
__wur
 
	`__warnattr
 ("fgetws_unlocked called with bigger size than length "

414 
__fortify_function
 
__wur
 
wchar_t
 *

415 
	$fgetws_unlocked
 (
wchar_t
 *
__restrict
 
__s
, int 
__n
, 
__FILE
 *__restrict 
__stream
)

417 if (
	`__bos
 (
__s
) != (
size_t
) -1)

419 if (!
	`__builtin_constant_p
 (
__n
) || __n <= 0)

420 return 
	`__fgetws_unlocked_chk
 (
__s
, 
	`__bos
 (__s) / sizeof (
wchar_t
),

421 
__n
, 
__stream
);

423 if ((
size_t
) 
__n
 > 
	`__bos
 (
__s
) / sizeof (
wchar_t
))

424 return 
	`__fgetws_unlocked_chk_warn
 (
__s
, 
	`__bos
 (__s) / sizeof (
wchar_t
),

425 
__n
, 
__stream
);

427 return 
	`__fgetws_unlocked_alias
 (
__s
, 
__n
, 
__stream
);

428 
	}
}

432 extern 
size_t
 
	$__wcrtomb_chk
 (char *
__restrict
 
__s
, 
wchar_t
 
__wchar
,

433 
mbstate_t
 *
__restrict
 
__p
,

434 
size_t
 
__buflen
) 
__THROW
 
__wur
;

435 extern 
size_t
 
	`__REDIRECT_NTH
 (
__wcrtomb_alias
,

436 (char *
__restrict
 
__s
, 
wchar_t
 
__wchar
,

437 
mbstate_t
 *
__restrict
 
__ps
), 
wcrtomb
) 
__wur
;

439 
__fortify_function
 
__wur
 
size_t


440 
	`__NTH
 (
	$wcrtomb
 (char *
__restrict
 
__s
, 
wchar_t
 
__wchar
,

441 
mbstate_t
 *
__restrict
 
__ps
))

446 #define 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #if 
defined
 
MB_LEN_MAX
 && MB_LEN_MAX != 
__WCHAR_MB_LEN_MAX


450 if (
	`__bos
 (
__s
) != (
size_t
) -1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451 return 
	`__wcrtomb_chk
 (
__s
, 
__wchar
, 
__ps
, 
	`__bos
 (__s));

452 return 
	`__wcrtomb_alias
 (
__s
, 
__wchar
, 
__ps
);

453 
	}
}

456 extern 
size_t
 
	$__mbsrtowcs_chk
 (
wchar_t
 *
__restrict
 
__dst
,

457 const char **
__restrict
 
__src
,

458 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
,

459 
size_t
 
__dstlen
) 
__THROW
;

460 extern 
size_t
 
	`__REDIRECT_NTH
 (
__mbsrtowcs_alias
,

461 (
wchar_t
 *
__restrict
 
__dst
,

462 const char **
__restrict
 
__src
,

463 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
),

464 
mbsrtowcs
);

465 extern 
size_t
 
	`__REDIRECT_NTH
 (
__mbsrtowcs_chk_warn
,

466 (
wchar_t
 *
__restrict
 
__dst
,

467 const char **
__restrict
 
__src
,

468 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
,

469 
size_t
 
__dstlen
), 
__mbsrtowcs_chk
)

470 
	`__warnattr
 ("mbsrtowcs called with dst buffer smaller than len "

473 
__fortify_function
 
size_t


474 
	`__NTH
 (
	$mbsrtowcs
 (
wchar_t
 *
__restrict
 
__dst
, const char **__restrict 
__src
,

475 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
))

477 if (
	`__bos
 (
__dst
) != (
size_t
) -1)

479 if (!
	`__builtin_constant_p
 (
__len
))

480 return 
	`__mbsrtowcs_chk
 (
__dst
, 
__src
, 
__len
, 
__ps
,

481 
	`__bos
 (
__dst
) / sizeof (
wchar_t
));

483 if (
__len
 > 
	`__bos
 (
__dst
) / sizeof (
wchar_t
))

484 return 
	`__mbsrtowcs_chk_warn
 (
__dst
, 
__src
, 
__len
, 
__ps
,

485 
	`__bos
 (
__dst
) / sizeof (
wchar_t
));

487 return 
	`__mbsrtowcs_alias
 (
__dst
, 
__src
, 
__len
, 
__ps
);

488 
	}
}

491 extern 
size_t
 
	$__wcsrtombs_chk
 (char *
__restrict
 
__dst
,

492 const 
wchar_t
 **
__restrict
 
__src
,

493 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
,

494 
size_t
 
__dstlen
) 
__THROW
;

495 extern 
size_t
 
	`__REDIRECT_NTH
 (
__wcsrtombs_alias
,

496 (char *
__restrict
 
__dst
,

497 const 
wchar_t
 **
__restrict
 
__src
,

498 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
),

499 
wcsrtombs
);

500 extern 
size_t
 
	`__REDIRECT_NTH
 (
__wcsrtombs_chk_warn
,

501 (char *
__restrict
 
__dst
,

502 const 
wchar_t
 **
__restrict
 
__src
,

503 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
,

504 
size_t
 
__dstlen
), 
__wcsrtombs_chk
)

505 
	`__warnattr
 ("wcsrtombs called with dst buffer smaller than len");

507 
__fortify_function
 
size_t


508 
	`__NTH
 (
	$wcsrtombs
 (char *
__restrict
 
__dst
, const 
wchar_t
 **__restrict 
__src
,

509 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
))

511 if (
	`__bos
 (
__dst
) != (
size_t
) -1)

513 if (!
	`__builtin_constant_p
 (
__len
))

514 return 
	`__wcsrtombs_chk
 (
__dst
, 
__src
, 
__len
, 
__ps
, 
	`__bos
 (__dst));

516 if (
__len
 > 
	`__bos
 (
__dst
))

517 return 
	`__wcsrtombs_chk_warn
 (
__dst
, 
__src
, 
__len
, 
__ps
, 
	`__bos
 (__dst));

519 return 
	`__wcsrtombs_alias
 (
__dst
, 
__src
, 
__len
, 
__ps
);

520 
	}
}

523 #ifdef 
__USE_GNU


524 extern 
size_t
 
	$__mbsnrtowcs_chk
 (
wchar_t
 *
__restrict
 
__dst
,

525 const char **
__restrict
 
__src
, 
size_t
 
__nmc
,

526 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
,

527 
size_t
 
__dstlen
) 
__THROW
;

528 extern 
size_t
 
	`__REDIRECT_NTH
 (
__mbsnrtowcs_alias
,

529 (
wchar_t
 *
__restrict
 
__dst
,

530 const char **
__restrict
 
__src
, 
size_t
 
__nmc
,

531 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
),

532 
mbsnrtowcs
);

533 extern 
size_t
 
	`__REDIRECT_NTH
 (
__mbsnrtowcs_chk_warn
,

534 (
wchar_t
 *
__restrict
 
__dst
,

535 const char **
__restrict
 
__src
, 
size_t
 
__nmc
,

536 
size_t
 
__len
, 
mbstate_t
 *
__restrict
 
__ps
,

537 
size_t
 
__dstlen
), 
__mbsnrtowcs_chk
)

538 
	`__warnattr
 ("mbsnrtowcs called with dst buffer smaller than len "

541 
__fortify_function
 
size_t


542 
	`__NTH
 (
	$mbsnrtowcs
 (
wchar_t
 *
__restrict
 
__dst
, const char **__restrict 
__src
,

543 
size_t
 
__nmc
, size_t 
__len
, 
mbstate_t
 *
__restrict
 
__ps
))

545 if (
	`__bos
 (
__dst
) != (
size_t
) -1)

547 if (!
	`__builtin_constant_p
 (
__len
))

548 return 
	`__mbsnrtowcs_chk
 (
__dst
, 
__src
, 
__nmc
, 
__len
, 
__ps
,

549 
	`__bos
 (
__dst
) / sizeof (
wchar_t
));

551 if (
__len
 > 
	`__bos
 (
__dst
) / sizeof (
wchar_t
))

552 return 
	`__mbsnrtowcs_chk_warn
 (
__dst
, 
__src
, 
__nmc
, 
__len
, 
__ps
,

553 
	`__bos
 (
__dst
) / sizeof (
wchar_t
));

555 return 
	`__mbsnrtowcs_alias
 (
__dst
, 
__src
, 
__nmc
, 
__len
, 
__ps
);

556 
	}
}

559 extern 
size_t
 
	$__wcsnrtombs_chk
 (char *
__restrict
 
__dst
,

560 const 
wchar_t
 **
__restrict
 
__src
,

561 
size_t
 
__nwc
, size_t 
__len
,

562 
mbstate_t
 *
__restrict
 
__ps
, 
size_t
 
__dstlen
)

563 
__THROW
;

564 extern 
size_t
 
	`__REDIRECT_NTH
 (
__wcsnrtombs_alias
,

565 (char *
__restrict
 
__dst
,

566 const 
wchar_t
 **
__restrict
 
__src
,

567 
size_t
 
__nwc
, size_t 
__len
,

568 
mbstate_t
 *
__restrict
 
__ps
), 
wcsnrtombs
);

569 extern 
size_t
 
	`__REDIRECT_NTH
 (
__wcsnrtombs_chk_warn
,

570 (char *
__restrict
 
__dst
,

571 const 
wchar_t
 **
__restrict
 
__src
,

572 
size_t
 
__nwc
, size_t 
__len
,

573 
mbstate_t
 *
__restrict
 
__ps
,

574 
size_t
 
__dstlen
), 
__wcsnrtombs_chk
)

575 
	`__warnattr
 ("wcsnrtombs called with dst buffer smaller than len");

577 
__fortify_function
 
size_t


578 
	`__NTH
 (
	$wcsnrtombs
 (char *
__restrict
 
__dst
, const 
wchar_t
 **__restrict 
__src
,

579 
size_t
 
__nwc
, size_t 
__len
, 
mbstate_t
 *
__restrict
 
__ps
))

581 if (
	`__bos
 (
__dst
) != (
size_t
) -1)

583 if (!
	`__builtin_constant_p
 (
__len
))

584 return 
	`__wcsnrtombs_chk
 (
__dst
, 
__src
, 
__nwc
, 
__len
, 
__ps
,

585 
	`__bos
 (
__dst
));

587 if (
__len
 > 
	`__bos
 (
__dst
))

588 return 
	`__wcsnrtombs_chk_warn
 (
__dst
, 
__src
, 
__nwc
, 
__len
, 
__ps
,

589 
	`__bos
 (
__dst
));

591 return 
	`__wcsnrtombs_alias
 (
__dst
, 
__src
, 
__nwc
, 
__len
, 
__ps
);

592 
	}
}

	@/usr/include/errno.h

22 #ifndef 
_ERRNO_H


26 #ifndef 
__need_Emath


27 #define 
	#_ERRNO_H
 1

	)

28 #include 
	~<features.h
>

31 
	g__BEGIN_DECLS


35 #include 
	~<bits/errno.h
>

36 #undef 
__need_Emath


38 #ifdef 
_ERRNO_H


45 #ifndef 
errno


46 extern int 
errno
;

49 #ifdef 
__USE_GNU


54 extern char *
program_invocation_name
, *
program_invocation_short_name
;

58 
	g__END_DECLS


66 #if 
defined
 
__USE_GNU
 || defined 
__need_error_t


67 #ifndef 
__error_t_defined


68 typedef int 
	terror_t
;

69 #define 
	#__error_t_defined
 1

	)

71 #undef 
__need_error_t


	@/usr/include/gnu/option-groups.h

10 #ifndef 
__GNU_OPTION_GROUPS_H


11 #define 
	#__GNU_OPTION_GROUPS_H


	)

13 #define 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 #define 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 #define 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 #define 
	#__OPTION_EGLIBC_BSD
 1

	)

17 #define 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 #define 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 #define 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 #define 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 #define 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 #define 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 #define 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 #define 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 #define 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 #define 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 #define 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 #define 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 #define 
	#__OPTION_EGLIBC_IDN
 1

	)

30 #define 
	#__OPTION_EGLIBC_INET
 1

	)

31 #define 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 #define 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 #define 
	#__OPTION_EGLIBC_LIBM_BIG
 1

	)

34 #define 
	#__OPTION_EGLIBC_LOCALES
 1

	)

35 #define 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

36 #define 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

37 #define 
	#__OPTION_EGLIBC_NIS
 1

	)

38 #define 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

39 #define 
	#__OPTION_EGLIBC_RCMD
 1

	)

40 #define 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

41 #define 
	#__OPTION_EGLIBC_SPAWN
 1

	)

42 #define 
	#__OPTION_EGLIBC_STREAMS
 1

	)

43 #define 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

44 #define 
	#__OPTION_EGLIBC_UTMP
 1

	)

45 #define 
	#__OPTION_EGLIBC_UTMPX
 1

	)

46 #define 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

47 #define 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

48 #define 
	#__OPTION_POSIX_REGEXP
 1

	)

49 #define 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

50 #define 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/pthread.h

18 #ifndef 
_PTHREAD_H


19 #define 
	#_PTHREAD_H
 1

	)

21 #include 
	~<features.h
>

22 #include 
	~<endian.h
>

23 #include 
	~<sched.h
>

24 #include 
	~<time.h
>

26 #include 
	~<bits/pthreadtypes.h
>

27 #include 
	~<bits/setjmp.h
>

28 #include 
	~<bits/wordsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 #define 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 #define 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifdef 
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifdef 
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #if 
defined
 
__USE_POSIX199506
 || defined 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #ifdef 
__PTHREAD_MUTEX_HAVE_PREV


87 #define 
	#PTHREAD_MUTEX_INITIALIZER
 \

88 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

89 #ifdef 
__USE_GNU


90 #define 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

91 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

92 #define 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

94 #define 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

98 #define 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 0 } } }

	)

100 #ifdef 
__USE_GNU


101 #define 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

103 #define 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

105 #define 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

112 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


115 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

116 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

118 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 #ifndef 
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


125 #if 
__WORDSIZE
 == 64

126 #define 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

131 #define 
	#PTHREAD_RWLOCK_INITIALIZER
 \

132 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

133 #ifdef 
__USE_GNU


134 #ifdef 
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


135 #define 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

139 #if 
__BYTE_ORDER
 == 
__LITTLE_ENDIAN


140 #define 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

141 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

142 0, 0, 0, 0 } }

	)

144 #define 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

145 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

146 0 } }

	)

156 
	mPTHREAD_INHERIT_SCHED
,

157 #define 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

158 
	mPTHREAD_EXPLICIT_SCHED


159 #define 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

166 
	mPTHREAD_SCOPE_SYSTEM
,

167 #define 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

168 
	mPTHREAD_SCOPE_PROCESS


169 #define 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

176 
	mPTHREAD_PROCESS_PRIVATE
,

177 #define 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

178 
	mPTHREAD_PROCESS_SHARED


179 #define 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

185 #define 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (void *) 0, 0, 0 } }

	)

189 struct 
	s_pthread_cleanup_buffer


191 void (*
	m__routine
) (void *);

192 void *
	m__arg
;

193 int 
	m__canceltype
;

194 struct 
_pthread_cleanup_buffer
 *
	m__prev
;

200 
	mPTHREAD_CANCEL_ENABLE
,

201 #define 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

202 
	mPTHREAD_CANCEL_DISABLE


203 #define 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

207 
	mPTHREAD_CANCEL_DEFERRED
,

208 #define 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

209 
	mPTHREAD_CANCEL_ASYNCHRONOUS


210 #define 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

212 #define 
	#PTHREAD_CANCELED
 ((void *) -1)

	)

216 #define 
	#PTHREAD_ONCE_INIT
 0

	)

219 #ifdef 
__USE_XOPEN2K


223 #define 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

227 
__BEGIN_DECLS


232 extern int 
pthread_create
 (
pthread_t
 *
__restrict
 
__newthread
,

233 const 
pthread_attr_t
 *
__restrict
 
__attr
,

234 void *(*
__start_routine
) (void *),

235 void *
__restrict
 
__arg
) 
__THROWNL
 
__nonnull
 ((1, 3));

241 extern void 
	$pthread_exit
 (void *
__retval
) 
	`__attribute__
 ((
__noreturn__
));

249 extern int 
	`pthread_join
 (
pthread_t
 
__th
, void **
__thread_return
);

251 #ifdef 
__USE_GNU


254 extern int 
	$pthread_tryjoin_np
 (
pthread_t
 
__th
, void **
__thread_return
) 
__THROW
;

262 extern int 
	`pthread_timedjoin_np
 (
pthread_t
 
__th
, void **
__thread_return
,

263 const struct 
timespec
 *
__abstime
);

270 extern int 
	$pthread_detach
 (
pthread_t
 
__th
) 
__THROW
;

274 extern 
pthread_t
 
	$pthread_self
 (void) 
__THROW
 
	`__attribute__
 ((
__const__
));

277 extern int 
	$pthread_equal
 (
pthread_t
 
__thread1
, pthread_t 
__thread2
)

278 
__THROW
 
	`__attribute__
 ((
__const__
));

286 extern int 
	$pthread_attr_init
 (
pthread_attr_t
 *
__attr
) 
__THROW
 
	`__nonnull
 ((1));

289 extern int 
	$pthread_attr_destroy
 (
pthread_attr_t
 *
__attr
)

290 
__THROW
 
	`__nonnull
 ((1));

293 extern int 
	$pthread_attr_getdetachstate
 (const 
pthread_attr_t
 *
__attr
,

294 int *
__detachstate
)

295 
__THROW
 
	`__nonnull
 ((1, 2));

298 extern int 
	$pthread_attr_setdetachstate
 (
pthread_attr_t
 *
__attr
,

299 int 
__detachstate
)

300 
__THROW
 
	`__nonnull
 ((1));

304 extern int 
	$pthread_attr_getguardsize
 (const 
pthread_attr_t
 *
__attr
,

305 
size_t
 *
__guardsize
)

306 
__THROW
 
	`__nonnull
 ((1, 2));

309 extern int 
	$pthread_attr_setguardsize
 (
pthread_attr_t
 *
__attr
,

310 
size_t
 
__guardsize
)

311 
__THROW
 
	`__nonnull
 ((1));

315 extern int 
	$pthread_attr_getschedparam
 (const 
pthread_attr_t
 *
__restrict
 
__attr
,

316 struct 
sched_param
 *
__restrict
 
__param
)

317 
__THROW
 
	`__nonnull
 ((1, 2));

320 extern int 
	$pthread_attr_setschedparam
 (
pthread_attr_t
 *
__restrict
 
__attr
,

321 const struct 
sched_param
 *
__restrict


322 
__param
) 
__THROW
 
	`__nonnull
 ((1, 2));

325 extern int 
	$pthread_attr_getschedpolicy
 (const 
pthread_attr_t
 *
__restrict


326 
__attr
, int *
__restrict
 
__policy
)

327 
__THROW
 
	`__nonnull
 ((1, 2));

330 extern int 
	$pthread_attr_setschedpolicy
 (
pthread_attr_t
 *
__attr
, int 
__policy
)

331 
__THROW
 
	`__nonnull
 ((1));

334 extern int 
	$pthread_attr_getinheritsched
 (const 
pthread_attr_t
 *
__restrict


335 
__attr
, int *
__restrict
 
__inherit
)

336 
__THROW
 
	`__nonnull
 ((1, 2));

339 extern int 
	$pthread_attr_setinheritsched
 (
pthread_attr_t
 *
__attr
,

340 int 
__inherit
)

341 
__THROW
 
	`__nonnull
 ((1));

345 extern int 
	$pthread_attr_getscope
 (const 
pthread_attr_t
 *
__restrict
 
__attr
,

346 int *
__restrict
 
__scope
)

347 
__THROW
 
	`__nonnull
 ((1, 2));

350 extern int 
	$pthread_attr_setscope
 (
pthread_attr_t
 *
__attr
, int 
__scope
)

351 
__THROW
 
	`__nonnull
 ((1));

354 extern int 
	$pthread_attr_getstackaddr
 (const 
pthread_attr_t
 *
__restrict


355 
__attr
, void **
__restrict
 
__stackaddr
)

356 
__THROW
 
	`__nonnull
 ((1, 2)) 
__attribute_deprecated__
;

362 extern int 
	$pthread_attr_setstackaddr
 (
pthread_attr_t
 *
__attr
,

363 void *
__stackaddr
)

364 
__THROW
 
	`__nonnull
 ((1)) 
__attribute_deprecated__
;

367 extern int 
	$pthread_attr_getstacksize
 (const 
pthread_attr_t
 *
__restrict


368 
__attr
, 
size_t
 *
__restrict
 
__stacksize
)

369 
__THROW
 
	`__nonnull
 ((1, 2));

374 extern int 
	$pthread_attr_setstacksize
 (
pthread_attr_t
 *
__attr
,

375 
size_t
 
__stacksize
)

376 
__THROW
 
	`__nonnull
 ((1));

378 #ifdef 
__USE_XOPEN2K


380 extern int 
	$pthread_attr_getstack
 (const 
pthread_attr_t
 *
__restrict
 
__attr
,

381 void **
__restrict
 
__stackaddr
,

382 
size_t
 *
__restrict
 
__stacksize
)

383 
__THROW
 
	`__nonnull
 ((1, 2, 3));

388 extern int 
	$pthread_attr_setstack
 (
pthread_attr_t
 *
__attr
, void *
__stackaddr
,

389 
size_t
 
__stacksize
) 
__THROW
 
	`__nonnull
 ((1));

392 #ifdef 
__USE_GNU


395 extern int 
	$pthread_attr_setaffinity_np
 (
pthread_attr_t
 *
__attr
,

396 
size_t
 
__cpusetsize
,

397 const 
cpu_set_t
 *
__cpuset
)

398 
__THROW
 
	`__nonnull
 ((1, 3));

402 extern int 
	$pthread_attr_getaffinity_np
 (const 
pthread_attr_t
 *
__attr
,

403 
size_t
 
__cpusetsize
,

404 
cpu_set_t
 *
__cpuset
)

405 
__THROW
 
	`__nonnull
 ((1, 3));

411 extern int 
	$pthread_getattr_np
 (
pthread_t
 
__th
, 
pthread_attr_t
 *
__attr
)

412 
__THROW
 
	`__nonnull
 ((2));

420 extern int 
	$pthread_setschedparam
 (
pthread_t
 
__target_thread
, int 
__policy
,

421 const struct 
sched_param
 *
__param
)

422 
__THROW
 
	`__nonnull
 ((3));

425 extern int 
	$pthread_getschedparam
 (
pthread_t
 
__target_thread
,

426 int *
__restrict
 
__policy
,

427 struct 
sched_param
 *
__restrict
 
__param
)

428 
__THROW
 
	`__nonnull
 ((2, 3));

431 extern int 
	$pthread_setschedprio
 (
pthread_t
 
__target_thread
, int 
__prio
)

432 
__THROW
;

435 #ifdef 
__USE_GNU


437 extern int 
	$pthread_getname_np
 (
pthread_t
 
__target_thread
, char *
__buf
,

438 
size_t
 
__buflen
)

439 
__THROW
 
	`__nonnull
 ((2));

442 extern int 
	$pthread_setname_np
 (
pthread_t
 
__target_thread
, const char *
__name
)

443 
__THROW
 
	`__nonnull
 ((2));

447 #ifdef 
__USE_UNIX98


449 extern int 
	$pthread_getconcurrency
 (void) 
__THROW
;

452 extern int 
	$pthread_setconcurrency
 (int 
__level
) 
__THROW
;

455 #ifdef 
__USE_GNU


460 extern int 
	$pthread_yield
 (void) 
__THROW
;

465 extern int 
	$pthread_setaffinity_np
 (
pthread_t
 
__th
, 
size_t
 
__cpusetsize
,

466 const 
cpu_set_t
 *
__cpuset
)

467 
__THROW
 
	`__nonnull
 ((3));

470 extern int 
	$pthread_getaffinity_np
 (
pthread_t
 
__th
, 
size_t
 
__cpusetsize
,

471 
cpu_set_t
 *
__cpuset
)

472 
__THROW
 
	`__nonnull
 ((3));

485 extern int 
	`pthread_once
 (
pthread_once_t
 *
__once_control
,

486 void (*
__init_routine
) (void)) 
	`__nonnull
 ((1, 2));

497 extern int 
	`pthread_setcancelstate
 (int 
__state
, int *
__oldstate
);

501 extern int 
	`pthread_setcanceltype
 (int 
__type
, int *
__oldtype
);

504 extern int 
	`pthread_cancel
 (
pthread_t
 
__th
);

509 extern void 
	`pthread_testcancel
 (void);

518 
__jmp_buf
 
__cancel_jmp_buf
;

519 int 
__mask_was_saved
;

520 } 
__cancel_jmp_buf
[1];

521 void *
__pad
[4];

522 } 
	t__pthread_unwind_buf_t
 
	t__attribute__
 ((
	t__aligned__
));

525 #ifndef 
__cleanup_fct_attribute


526 #define 
	#__cleanup_fct_attribute


	)

531 struct 
	s__pthread_cleanup_frame


533 void (*
__cancel_routine
) (void *);

534 void *
__cancel_arg
;

535 int 
__do_it
;

536 int 
__cancel_type
;

539 #if 
defined
 
__GNUC__
 && defined 
__EXCEPTIONS


540 #ifdef 
__cplusplus


542 class 
	c__pthread_cleanup_class


544 void (*
__cancel_routine
) (void *);

545 void *
__cancel_arg
;

546 int 
__do_it
;

547 int 
__cancel_type
;

549 
public
:

550 
	`__pthread_cleanup_class
 (void (*
__fct
) (void *), void *
__arg
)

551 : 
	`__cancel_routine
 (
__fct
), 
	`__cancel_arg
 (
__arg
), 
	$__do_it
 (1) { }

552 ~
	$__pthread_cleanup_class
 () { if (
__do_it
) 
	`__cancel_routine
 (
__cancel_arg
); 
	}
}

553 void 
	$__setdoit
 (int 
__newval
) { 
__do_it
 = __newval; 
	}
}

554 void 
	$__defer
 () { 
	`pthread_setcanceltype
 (
PTHREAD_CANCEL_DEFERRED
,

555 &
__cancel_type
); 
	}
}

556 void 
	$__restore
 () const { 
	`pthread_setcanceltype
 (
__cancel_type
, 0); 
	}
}

566 #define 
	#pthread_cleanup_push
(
routine
, 
arg
) \

568 
__pthread_cleanup_class
 
	`__clframe
 (
routine
, 
arg
)

	)

572 #define 
	#pthread_cleanup_pop
(
execute
) \

573 
__clframe
.
	`__setdoit
 (
execute
); \

574 } while (0)

	)

576 #ifdef 
__USE_GNU


580 #define 
	#pthread_cleanup_push_defer_np
(
routine
, 
arg
) \

582 
__pthread_cleanup_class
 
	`__clframe
 (
routine
, 
arg
); \

583 
__clframe
.
	`__defer
 ()

	)

588 #define 
	#pthread_cleanup_pop_restore_np
(
execute
) \

589 
__clframe
.
	`__restore
 (); \

590 
__clframe
.
	`__setdoit
 (
execute
); \

591 } while (0)

	)

598 
__extern_inline
 void

599 
	$__pthread_cleanup_routine
 (struct 
__pthread_cleanup_frame
 *
__frame
)

601 if (
__frame
->
__do_it
)

602 
__frame
->
	`__cancel_routine
 (__frame->
__cancel_arg
);

603 
	}
}

612 #define 
	#pthread_cleanup_push
(
routine
, 
arg
) \

614 struct 
__pthread_cleanup_frame
 
__clframe
 \

615 
	`__attribute__
 ((
	`__cleanup__
 (
__pthread_cleanup_routine
))) \

616 = { .
__cancel_routine
 = (
routine
), .
__cancel_arg
 = (
arg
), \

617 .
__do_it
 = 1 };

	)

621 #define 
	#pthread_cleanup_pop
(
execute
) \

622 
__clframe
.
__do_it
 = (
execute
); \

623 } while (0)

	)

625 #ifdef 
__USE_GNU


629 #define 
	#pthread_cleanup_push_defer_np
(
routine
, 
arg
) \

631 struct 
__pthread_cleanup_frame
 
__clframe
 \

632 
	`__attribute__
 ((
	`__cleanup__
 (
__pthread_cleanup_routine
))) \

633 = { .
__cancel_routine
 = (
routine
), .
__cancel_arg
 = (
arg
), \

634 .
__do_it
 = 1 }; \

635 (void) 
	`pthread_setcanceltype
 (
PTHREAD_CANCEL_DEFERRED
, \

636 &
__clframe
.
__cancel_type
)

	)

641 #define 
	#pthread_cleanup_pop_restore_np
(
execute
) \

642 (void) 
	`pthread_setcanceltype
 (
__clframe
.
__cancel_type
, 
NULL
); \

643 
__clframe
.
__do_it
 = (
execute
); \

644 } while (0)

	)

655 #define 
	#pthread_cleanup_push
(
routine
, 
arg
) \

657 
__pthread_unwind_buf_t
 
__cancel_buf
; \

658 void (*
__cancel_routine
) (void *) = (
routine
); \

659 void *
__cancel_arg
 = (
arg
); \

660 int 
__not_first_call
 = 
	`__sigsetjmp
 ((struct 
__jmp_buf_tag
 *) (void *) \

661 
__cancel_buf
.
__cancel_jmp_buf
, 0); \

662 if (
	`__glibc_unlikely
 (
__not_first_call
)) \

664 
	`__cancel_routine
 (
__cancel_arg
); \

665 
	`__pthread_unwind_next
 (&
__cancel_buf
); \

669 
	`__pthread_register_cancel
 (&
__cancel_buf
); \

670 do {

	)

671 extern void 
__pthread_register_cancel
 (
__pthread_unwind_buf_t
 *
__buf
)

672 
__cleanup_fct_attribute
;

676 #define 
	#pthread_cleanup_pop
(
execute
) \

679 
	`__pthread_unregister_cancel
 (&
__cancel_buf
); \

680 if (
execute
) \

681 
	`__cancel_routine
 (
__cancel_arg
); \

682 } while (0)

	)

683 extern void 
	$__pthread_unregister_cancel
 (
__pthread_unwind_buf_t
 *
__buf
)

684 
__cleanup_fct_attribute
;

686 #ifdef 
__USE_GNU


690 #define 
	#pthread_cleanup_push_defer_np
(
routine
, 
arg
) \

692 
__pthread_unwind_buf_t
 
__cancel_buf
; \

693 void (*
__cancel_routine
) (void *) = (
routine
); \

694 void *
__cancel_arg
 = (
arg
); \

695 int 
__not_first_call
 = 
	`__sigsetjmp
 ((struct 
__jmp_buf_tag
 *) (void *) \

696 
__cancel_buf
.
__cancel_jmp_buf
, 0); \

697 if (
	`__glibc_unlikely
 (
__not_first_call
)) \

699 
	`__cancel_routine
 (
__cancel_arg
); \

700 
	`__pthread_unwind_next
 (&
__cancel_buf
); \

704 
	`__pthread_register_cancel_defer
 (&
__cancel_buf
); \

705 do {

	)

706 extern void 
	`__pthread_register_cancel_defer
 (
__pthread_unwind_buf_t
 *
__buf
)

707 
__cleanup_fct_attribute
;

712 #define 
	#pthread_cleanup_pop_restore_np
(
execute
) \

715 
	`__pthread_unregister_cancel_restore
 (&
__cancel_buf
); \

716 if (
execute
) \

717 
	`__cancel_routine
 (
__cancel_arg
); \

718 
	}
} while (0)

	)

719 extern void 
	$__pthread_unregister_cancel_restore
 (
__pthread_unwind_buf_t
 *
__buf
)

720 
__cleanup_fct_attribute
;

724 extern void 
	$__pthread_unwind_next
 (
__pthread_unwind_buf_t
 *
__buf
)

725 
__cleanup_fct_attribute
 
	`__attribute__
 ((
__noreturn__
))

726 #ifndef 
SHARED


727 
	`__attribute__
 ((
__weak__
))

733 struct 
__jmp_buf_tag
;

734 extern int 
	$__sigsetjmp
 (struct 
__jmp_buf_tag
 *
__env
, int 
__savemask
) 
__THROWNL
;

740 extern int 
	$pthread_mutex_init
 (
pthread_mutex_t
 *
__mutex
,

741 const 
pthread_mutexattr_t
 *
__mutexattr
)

742 
__THROW
 
	`__nonnull
 ((1));

745 extern int 
	$pthread_mutex_destroy
 (
pthread_mutex_t
 *
__mutex
)

746 
__THROW
 
	`__nonnull
 ((1));

749 extern int 
	$pthread_mutex_trylock
 (
pthread_mutex_t
 *
__mutex
)

750 
__THROWNL
 
	`__nonnull
 ((1));

753 extern int 
	$pthread_mutex_lock
 (
pthread_mutex_t
 *
__mutex
)

754 
__THROWNL
 
	`__nonnull
 ((1));

756 #ifdef 
__USE_XOPEN2K


758 extern int 
	$pthread_mutex_timedlock
 (
pthread_mutex_t
 *
__restrict
 
__mutex
,

759 const struct 
timespec
 *
__restrict


760 
__abstime
) 
__THROWNL
 
	`__nonnull
 ((1, 2));

764 extern int 
	$pthread_mutex_unlock
 (
pthread_mutex_t
 *
__mutex
)

765 
__THROWNL
 
	`__nonnull
 ((1));

769 extern int 
	$pthread_mutex_getprioceiling
 (const 
pthread_mutex_t
 *

770 
__restrict
 
__mutex
,

771 int *
__restrict
 
__prioceiling
)

772 
__THROW
 
	`__nonnull
 ((1, 2));

776 extern int 
	$pthread_mutex_setprioceiling
 (
pthread_mutex_t
 *
__restrict
 
__mutex
,

777 int 
__prioceiling
,

778 int *
__restrict
 
__old_ceiling
)

779 
__THROW
 
	`__nonnull
 ((1, 3));

782 #ifdef 
__USE_XOPEN2K8


784 extern int 
	$pthread_mutex_consistent
 (
pthread_mutex_t
 *
__mutex
)

785 
__THROW
 
	`__nonnull
 ((1));

786 #ifdef 
__USE_GNU


787 extern int 
	$pthread_mutex_consistent_np
 (
pthread_mutex_t
 *
__mutex
)

788 
__THROW
 
	`__nonnull
 ((1));

797 extern int 
	$pthread_mutexattr_init
 (
pthread_mutexattr_t
 *
__attr
)

798 
__THROW
 
	`__nonnull
 ((1));

801 extern int 
	$pthread_mutexattr_destroy
 (
pthread_mutexattr_t
 *
__attr
)

802 
__THROW
 
	`__nonnull
 ((1));

805 extern int 
	$pthread_mutexattr_getpshared
 (const 
pthread_mutexattr_t
 *

806 
__restrict
 
__attr
,

807 int *
__restrict
 
__pshared
)

808 
__THROW
 
	`__nonnull
 ((1, 2));

811 extern int 
	$pthread_mutexattr_setpshared
 (
pthread_mutexattr_t
 *
__attr
,

812 int 
__pshared
)

813 
__THROW
 
	`__nonnull
 ((1));

815 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K8


817 extern int 
	$pthread_mutexattr_gettype
 (const 
pthread_mutexattr_t
 *
__restrict


818 
__attr
, int *
__restrict
 
__kind
)

819 
__THROW
 
	`__nonnull
 ((1, 2));

824 extern int 
	$pthread_mutexattr_settype
 (
pthread_mutexattr_t
 *
__attr
, int 
__kind
)

825 
__THROW
 
	`__nonnull
 ((1));

829 extern int 
	$pthread_mutexattr_getprotocol
 (const 
pthread_mutexattr_t
 *

830 
__restrict
 
__attr
,

831 int *
__restrict
 
__protocol
)

832 
__THROW
 
	`__nonnull
 ((1, 2));

836 extern int 
	$pthread_mutexattr_setprotocol
 (
pthread_mutexattr_t
 *
__attr
,

837 int 
__protocol
)

838 
__THROW
 
	`__nonnull
 ((1));

841 extern int 
	$pthread_mutexattr_getprioceiling
 (const 
pthread_mutexattr_t
 *

842 
__restrict
 
__attr
,

843 int *
__restrict
 
__prioceiling
)

844 
__THROW
 
	`__nonnull
 ((1, 2));

847 extern int 
	$pthread_mutexattr_setprioceiling
 (
pthread_mutexattr_t
 *
__attr
,

848 int 
__prioceiling
)

849 
__THROW
 
	`__nonnull
 ((1));

851 #ifdef 
__USE_XOPEN2K


853 extern int 
	$pthread_mutexattr_getrobust
 (const 
pthread_mutexattr_t
 *
__attr
,

854 int *
__robustness
)

855 
__THROW
 
	`__nonnull
 ((1, 2));

856 #ifdef 
__USE_GNU


857 extern int 
	$pthread_mutexattr_getrobust_np
 (const 
pthread_mutexattr_t
 *
__attr
,

858 int *
__robustness
)

859 
__THROW
 
	`__nonnull
 ((1, 2));

863 extern int 
	$pthread_mutexattr_setrobust
 (
pthread_mutexattr_t
 *
__attr
,

864 int 
__robustness
)

865 
__THROW
 
	`__nonnull
 ((1));

866 #ifdef 
__USE_GNU


867 extern int 
	$pthread_mutexattr_setrobust_np
 (
pthread_mutexattr_t
 *
__attr
,

868 int 
__robustness
)

869 
__THROW
 
	`__nonnull
 ((1));

874 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


879 extern int 
	$pthread_rwlock_init
 (
pthread_rwlock_t
 *
__restrict
 
__rwlock
,

880 const 
pthread_rwlockattr_t
 *
__restrict


881 
__attr
) 
__THROW
 
	`__nonnull
 ((1));

884 extern int 
	$pthread_rwlock_destroy
 (
pthread_rwlock_t
 *
__rwlock
)

885 
__THROW
 
	`__nonnull
 ((1));

888 extern int 
	$pthread_rwlock_rdlock
 (
pthread_rwlock_t
 *
__rwlock
)

889 
__THROWNL
 
	`__nonnull
 ((1));

892 extern int 
	$pthread_rwlock_tryrdlock
 (
pthread_rwlock_t
 *
__rwlock
)

893 
__THROWNL
 
	`__nonnull
 ((1));

895 #ifdef 
__USE_XOPEN2K


897 extern int 
	$pthread_rwlock_timedrdlock
 (
pthread_rwlock_t
 *
__restrict
 
__rwlock
,

898 const struct 
timespec
 *
__restrict


899 
__abstime
) 
__THROWNL
 
	`__nonnull
 ((1, 2));

903 extern int 
	$pthread_rwlock_wrlock
 (
pthread_rwlock_t
 *
__rwlock
)

904 
__THROWNL
 
	`__nonnull
 ((1));

907 extern int 
	$pthread_rwlock_trywrlock
 (
pthread_rwlock_t
 *
__rwlock
)

908 
__THROWNL
 
	`__nonnull
 ((1));

910 #ifdef 
__USE_XOPEN2K


912 extern int 
	$pthread_rwlock_timedwrlock
 (
pthread_rwlock_t
 *
__restrict
 
__rwlock
,

913 const struct 
timespec
 *
__restrict


914 
__abstime
) 
__THROWNL
 
	`__nonnull
 ((1, 2));

918 extern int 
	$pthread_rwlock_unlock
 (
pthread_rwlock_t
 *
__rwlock
)

919 
__THROWNL
 
	`__nonnull
 ((1));

925 extern int 
	$pthread_rwlockattr_init
 (
pthread_rwlockattr_t
 *
__attr
)

926 
__THROW
 
	`__nonnull
 ((1));

929 extern int 
	$pthread_rwlockattr_destroy
 (
pthread_rwlockattr_t
 *
__attr
)

930 
__THROW
 
	`__nonnull
 ((1));

933 extern int 
	$pthread_rwlockattr_getpshared
 (const 
pthread_rwlockattr_t
 *

934 
__restrict
 
__attr
,

935 int *
__restrict
 
__pshared
)

936 
__THROW
 
	`__nonnull
 ((1, 2));

939 extern int 
	$pthread_rwlockattr_setpshared
 (
pthread_rwlockattr_t
 *
__attr
,

940 int 
__pshared
)

941 
__THROW
 
	`__nonnull
 ((1));

944 extern int 
	$pthread_rwlockattr_getkind_np
 (const 
pthread_rwlockattr_t
 *

945 
__restrict
 
__attr
,

946 int *
__restrict
 
__pref
)

947 
__THROW
 
	`__nonnull
 ((1, 2));

950 extern int 
	$pthread_rwlockattr_setkind_np
 (
pthread_rwlockattr_t
 *
__attr
,

951 int 
__pref
) 
__THROW
 
	`__nonnull
 ((1));

959 extern int 
	$pthread_cond_init
 (
pthread_cond_t
 *
__restrict
 
__cond
,

960 const 
pthread_condattr_t
 *
__restrict
 
__cond_attr
)

961 
__THROW
 
	`__nonnull
 ((1));

964 extern int 
	$pthread_cond_destroy
 (
pthread_cond_t
 *
__cond
)

965 
__THROW
 
	`__nonnull
 ((1));

968 extern int 
	$pthread_cond_signal
 (
pthread_cond_t
 *
__cond
)

969 
__THROWNL
 
	`__nonnull
 ((1));

972 extern int 
	$pthread_cond_broadcast
 (
pthread_cond_t
 *
__cond
)

973 
__THROWNL
 
	`__nonnull
 ((1));

980 extern int 
	$pthread_cond_wait
 (
pthread_cond_t
 *
__restrict
 
__cond
,

981 
pthread_mutex_t
 *
__restrict
 
__mutex
)

982 
	`__nonnull
 ((1, 2));

991 extern int 
	$pthread_cond_timedwait
 (
pthread_cond_t
 *
__restrict
 
__cond
,

992 
pthread_mutex_t
 *
__restrict
 
__mutex
,

993 const struct 
timespec
 *
__restrict
 
__abstime
)

994 
	`__nonnull
 ((1, 2, 3));

999 extern int 
	$pthread_condattr_init
 (
pthread_condattr_t
 *
__attr
)

1000 
__THROW
 
	`__nonnull
 ((1));

1003 extern int 
	$pthread_condattr_destroy
 (
pthread_condattr_t
 *
__attr
)

1004 
__THROW
 
	`__nonnull
 ((1));

1007 extern int 
	$pthread_condattr_getpshared
 (const 
pthread_condattr_t
 *

1008 
__restrict
 
__attr
,

1009 int *
__restrict
 
__pshared
)

1010 
__THROW
 
	`__nonnull
 ((1, 2));

1013 extern int 
	$pthread_condattr_setpshared
 (
pthread_condattr_t
 *
__attr
,

1014 int 
__pshared
) 
__THROW
 
	`__nonnull
 ((1));

1016 #ifdef 
__USE_XOPEN2K


1018 extern int 
	$pthread_condattr_getclock
 (const 
pthread_condattr_t
 *

1019 
__restrict
 
__attr
,

1020 
__clockid_t
 *
__restrict
 
__clock_id
)

1021 
__THROW
 
	`__nonnull
 ((1, 2));

1024 extern int 
	$pthread_condattr_setclock
 (
pthread_condattr_t
 *
__attr
,

1025 
__clockid_t
 
__clock_id
)

1026 
__THROW
 
	`__nonnull
 ((1));

1030 #ifdef 
__USE_XOPEN2K


1035 extern int 
	$pthread_spin_init
 (
pthread_spinlock_t
 *
__lock
, int 
__pshared
)

1036 
__THROW
 
	`__nonnull
 ((1));

1039 extern int 
	$pthread_spin_destroy
 (
pthread_spinlock_t
 *
__lock
)

1040 
__THROW
 
	`__nonnull
 ((1));

1043 extern int 
	$pthread_spin_lock
 (
pthread_spinlock_t
 *
__lock
)

1044 
__THROWNL
 
	`__nonnull
 ((1));

1047 extern int 
	$pthread_spin_trylock
 (
pthread_spinlock_t
 *
__lock
)

1048 
__THROWNL
 
	`__nonnull
 ((1));

1051 extern int 
	$pthread_spin_unlock
 (
pthread_spinlock_t
 *
__lock
)

1052 
__THROWNL
 
	`__nonnull
 ((1));

1059 extern int 
	$pthread_barrier_init
 (
pthread_barrier_t
 *
__restrict
 
__barrier
,

1060 const 
pthread_barrierattr_t
 *
__restrict


1061 
__attr
, unsigned int 
__count
)

1062 
__THROW
 
	`__nonnull
 ((1));

1065 extern int 
	$pthread_barrier_destroy
 (
pthread_barrier_t
 *
__barrier
)

1066 
__THROW
 
	`__nonnull
 ((1));

1069 extern int 
	$pthread_barrier_wait
 (
pthread_barrier_t
 *
__barrier
)

1070 
__THROWNL
 
	`__nonnull
 ((1));

1074 extern int 
	$pthread_barrierattr_init
 (
pthread_barrierattr_t
 *
__attr
)

1075 
__THROW
 
	`__nonnull
 ((1));

1078 extern int 
	$pthread_barrierattr_destroy
 (
pthread_barrierattr_t
 *
__attr
)

1079 
__THROW
 
	`__nonnull
 ((1));

1082 extern int 
	$pthread_barrierattr_getpshared
 (const 
pthread_barrierattr_t
 *

1083 
__restrict
 
__attr
,

1084 int *
__restrict
 
__pshared
)

1085 
__THROW
 
	`__nonnull
 ((1, 2));

1088 extern int 
	$pthread_barrierattr_setpshared
 (
pthread_barrierattr_t
 *
__attr
,

1089 int 
__pshared
)

1090 
__THROW
 
	`__nonnull
 ((1));

1102 extern int 
	`pthread_key_create
 (
pthread_key_t
 *
__key
,

1103 void (*
__destr_function
) (void *))

1104 
__THROW
 
	`__nonnull
 ((1));

1107 extern int 
	$pthread_key_delete
 (
pthread_key_t
 
__key
) 
__THROW
;

1110 extern void *
	$pthread_getspecific
 (
pthread_key_t
 
__key
) 
__THROW
;

1113 extern int 
	$pthread_setspecific
 (
pthread_key_t
 
__key
,

1114 const void *
__pointer
) 
__THROW
 ;

1117 #ifdef 
__USE_XOPEN2K


1119 extern int 
	$pthread_getcpuclockid
 (
pthread_t
 
__thread_id
,

1120 
__clockid_t
 *
__clock_id
)

1121 
__THROW
 
	`__nonnull
 ((2));

1136 extern int 
	`pthread_atfork
 (void (*
__prepare
) (void),

1137 void (*
__parent
) (void),

1138 void (*
__child
) (void)) 
__THROW
;

1141 #ifdef 
__USE_EXTERN_INLINES


1143 
__extern_inline
 int

1144 
	`__NTH
 (
	$pthread_equal
 (
pthread_t
 
__thread1
, pthread_t 
__thread2
))

1146 return 
__thread1
 == 
__thread2
;

1147 
	}
}

1150 
	g__END_DECLS


	@/usr/include/wctype.h

23 #ifndef 
_WCTYPE_H


25 #include 
	~<features.h
>

26 #include 
	~<bits/types.h
>

28 #ifndef 
__need_iswxxx


29 #define 
	#_WCTYPE_H
 1

	)

32 #define 
	#__need_wint_t


	)

33 #include 
	~<wchar.h
>

37 #ifndef 
WEOF


38 #define 
	#WEOF
 (0xffffffffu)

	)

41 #undef 
__need_iswxxx


46 #ifndef 
__iswxxx_defined


47 #define 
	#__iswxxx_defined
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 typedef unsigned long int 
	twctype_t
;

53 
	g__END_NAMESPACE_C99


55 #ifndef 
_ISwbit


60 #include 
	~<endian.h
>

61 #if 
__BYTE_ORDER
 == 
__BIG_ENDIAN


62 #define 
	#_ISwbit
(
bit
) (1 << (bit))

	)

64 #define 
	#_ISwbit
(
bit
) \

65 ((
bit
) < 8 ? (int) ((1UL << (bit)) << 24) \

66 : ((
bit
) < 16 ? (int) ((1UL << (bit)) << 8) \

67 : ((
bit
) < 24 ? (int) ((1UL << (bit)) >> 8) \

68 : (int) ((1UL << (
bit
)) >> 24))))

	)

73 
	m__ISwupper
 = 0,

74 
	m__ISwlower
 = 1,

75 
	m__ISwalpha
 = 2,

76 
	m__ISwdigit
 = 3,

77 
	m__ISwxdigit
 = 4,

78 
	m__ISwspace
 = 5,

79 
	m__ISwprint
 = 6,

80 
	m__ISwgraph
 = 7,

81 
	m__ISwblank
 = 8,

82 
	m__ISwcntrl
 = 9,

83 
	m__ISwpunct
 = 10,

84 
	m__ISwalnum
 = 11,

86 
	m_ISwupper
 = 
_ISwbit
 (
__ISwupper
),

87 
	m_ISwlower
 = 
_ISwbit
 (
__ISwlower
),

88 
	m_ISwalpha
 = 
_ISwbit
 (
__ISwalpha
),

89 
	m_ISwdigit
 = 
_ISwbit
 (
__ISwdigit
),

90 
	m_ISwxdigit
 = 
_ISwbit
 (
__ISwxdigit
),

91 
	m_ISwspace
 = 
_ISwbit
 (
__ISwspace
),

92 
	m_ISwprint
 = 
_ISwbit
 (
__ISwprint
),

93 
	m_ISwgraph
 = 
_ISwbit
 (
__ISwgraph
),

94 
	m_ISwblank
 = 
_ISwbit
 (
__ISwblank
),

95 
	m_ISwcntrl
 = 
_ISwbit
 (
__ISwcntrl
),

96 
	m_ISwpunct
 = 
_ISwbit
 (
__ISwpunct
),

97 
	m_ISwalnum
 = 
_ISwbit
 (
__ISwalnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 extern int 
	$iswalnum
 (
wint_t
 
__wc
) 
__THROW
;

117 extern int 
	$iswalpha
 (
wint_t
 
__wc
) 
__THROW
;

120 extern int 
	$iswcntrl
 (
wint_t
 
__wc
) 
__THROW
;

124 extern int 
	$iswdigit
 (
wint_t
 
__wc
) 
__THROW
;

128 extern int 
	$iswgraph
 (
wint_t
 
__wc
) 
__THROW
;

133 extern int 
	$iswlower
 (
wint_t
 
__wc
) 
__THROW
;

136 extern int 
	$iswprint
 (
wint_t
 
__wc
) 
__THROW
;

141 extern int 
	$iswpunct
 (
wint_t
 
__wc
) 
__THROW
;

146 extern int 
	$iswspace
 (
wint_t
 
__wc
) 
__THROW
;

151 extern int 
	$iswupper
 (
wint_t
 
__wc
) 
__THROW
;

156 extern int 
	$iswxdigit
 (
wint_t
 
__wc
) 
__THROW
;

161 #ifdef 
__USE_ISOC99


162 extern int 
	$iswblank
 (
wint_t
 
__wc
) 
__THROW
;

171 extern 
wctype_t
 
	$wctype
 (const char *
__property
) 
__THROW
;

175 extern int 
	$iswctype
 (
wint_t
 
__wc
, 
wctype_t
 
__desc
) 
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 typedef const 
	t__int32_t
 *
	twctrans_t
;

187 
__END_NAMESPACE_C99


188 #ifdef 
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
wctrans_t
)

192 
__BEGIN_NAMESPACE_C99


194 extern 
wint_t
 
	$towlower
 (
wint_t
 
__wc
) 
__THROW
;

197 extern 
wint_t
 
	$towupper
 (
wint_t
 
__wc
) 
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifdef 
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 extern 
wctrans_t
 
	$wctrans
 (const char *
__property
) 
__THROW
;

221 extern 
wint_t
 
	$towctrans
 (
wint_t
 
__wc
, 
wctrans_t
 
__desc
) 
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifdef 
__USE_XOPEN2K8


226 #include 
	~<xlocale.h
>

230 extern int 
	$iswalnum_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

236 extern int 
	$iswalpha_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

239 extern int 
	$iswcntrl_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

243 extern int 
	$iswdigit_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

247 extern int 
	$iswgraph_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

252 extern int 
	$iswlower_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

255 extern int 
	$iswprint_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

260 extern int 
	$iswpunct_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

265 extern int 
	$iswspace_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

270 extern int 
	$iswupper_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

275 extern int 
	$iswxdigit_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

280 extern int 
	$iswblank_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

284 extern 
wctype_t
 
	$wctype_l
 (const char *
__property
, 
__locale_t
 
__locale
)

285 
__THROW
;

289 extern int 
	$iswctype_l
 (
wint_t
 
__wc
, 
wctype_t
 
__desc
, 
__locale_t
 
__locale
)

290 
__THROW
;

298 extern 
wint_t
 
	$towlower_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

301 extern 
wint_t
 
	$towupper_l
 (
wint_t
 
__wc
, 
__locale_t
 
__locale
) 
__THROW
;

305 extern 
wctrans_t
 
	$wctrans_l
 (const char *
__property
, 
__locale_t
 
__locale
)

306 
__THROW
;

309 extern 
wint_t
 
	$towctrans_l
 (
wint_t
 
__wc
, 
wctrans_t
 
__desc
,

310 
__locale_t
 
__locale
) 
__THROW
;

314 
__END_DECLS


	@/usr/include/bits/byteswap-16.h

19 #ifndef 
_BITS_BYTESWAP_H


23 #ifdef 
__GNUC__


24 #if 
__GNUC__
 >= 2

25 #define 
	#__bswap_16
(
x
) \

26 (
__extension__
 \

27 ({ register unsigned short int 
__v
, 
__x
 = (unsigned short int) (
x
); \

28 if (
	`__builtin_constant_p
 (
__x
)) \

29 
__v
 = 
	`__bswap_constant_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "=r" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 #define 
	#__bswap_16
(
x
) \

39 (
__extension__
 \

40 ({ register unsigned short int 
__x
 = (unsigned short int) (
x
); \

41 
	`__bswap_constant_16
 (
__x
); }))

	)

44 static 
__inline
 unsigned short int

45 
	$__bswap_16
 (unsigned short int 
__bsx
)

47 return 
	`__bswap_constant_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/errno.h

19 #ifdef 
_ERRNO_H


21 #undef 
EDOM


22 #undef 
EILSEQ


23 #undef 
ERANGE


24 #include 
	~<linux/errno.h
>

27 #define 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #ifndef 
ECANCELED


31 #define 
	#ECANCELED
 125

	)

35 #ifndef 
EOWNERDEAD


36 #define 
	#EOWNERDEAD
 130

	)

37 #define 
	#ENOTRECOVERABLE
 131

	)

40 #ifndef 
ERFKILL


41 #define 
	#ERFKILL
 132

	)

44 #ifndef 
EHWPOISON


45 #define 
	#EHWPOISON
 133

	)

48 #ifndef 
__ASSEMBLER__


50 extern int *
	$__errno_location
 (void) 
__THROW
 
	`__attribute__
 ((
__const__
));

52 #if !
defined
 
_LIBC
 || defined 
_LIBC_REENTRANT


54 #define 
	#errno
 (*
	`__errno_location
 ())

	)

59 #if !
defined
 
_ERRNO_H
 && defined 
__need_Emath


63 #define 
	#EDOM
 33

	)

64 #define 
	#EILSEQ
 84

	)

65 #define 
	#ERANGE
 34

	)

	@/usr/include/bits/pthreadtypes.h

18 #ifndef 
_BITS_PTHREADTYPES_H


19 #define 
	#_BITS_PTHREADTYPES_H
 1

	)

21 #include 
	~<bits/wordsize.h
>

23 #ifdef 
__x86_64__


24 #if 
__WORDSIZE
 == 64

25 #define 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 #define 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 #define 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 #define 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 #define 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 #define 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 #define 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 #define 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 #define 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 #define 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 #define 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 #define 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 #define 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 #define 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 #define 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 #define 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 #define 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 #define 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 #define 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 #define 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 #define 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 #define 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 #define 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 #define 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 #define 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 #define 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 #define 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 typedef unsigned long int 
	tpthread_t
;

63 union 
	upthread_attr_t


65 char 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 long int 
	m__align
;

68 #ifndef 
__have_pthread_attr_t


69 typedef union 
pthread_attr_t
 
	tpthread_attr_t
;

70 #define 
	#__have_pthread_attr_t
 1

	)

74 #ifdef 
__x86_64__


75 typedef struct 
	s__pthread_internal_list


77 struct 
__pthread_internal_list
 *
	m__prev
;

78 struct 
__pthread_internal_list
 *
	m__next
;

79 } 
	t__pthread_list_t
;

81 typedef struct 
	s__pthread_internal_slist


83 struct 
__pthread_internal_slist
 *
	m__next
;

84 } 
	t__pthread_slist_t
;

92 struct 
	s__pthread_mutex_s


94 int 
	m__lock
;

95 unsigned int 
	m__count
;

96 int 
	m__owner
;

97 #ifdef 
__x86_64__


98 unsigned int 
	m__nusers
;

102 int 
	m__kind
;

103 #ifdef 
__x86_64__


104 int 
	m__spins
;

105 
__pthread_list_t
 
	m__list
;

106 #define 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 unsigned int 
	m__nusers
;

109 
__extension__
 union

111 int 
	m__spins
;

112 
__pthread_slist_t
 
	m__list
;

115 } 
	m__data
;

116 char 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

117 long int 
	m__align
;

118 } 
	tpthread_mutex_t
;

122 char 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

123 int 
	m__align
;

124 } 
	tpthread_mutexattr_t
;

133 int 
	m__lock
;

134 unsigned int 
	m__futex
;

135 
__extension__
 unsigned long long int 
	m__total_seq
;

136 
__extension__
 unsigned long long int 
	m__wakeup_seq
;

137 
__extension__
 unsigned long long int 
	m__woken_seq
;

138 void *
	m__mutex
;

139 unsigned int 
	m__nwaiters
;

140 unsigned int 
	m__broadcast_seq
;

141 } 
	m__data
;

142 char 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

143 
__extension__
 long long int 
	m__align
;

144 } 
	tpthread_cond_t
;

148 char 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

149 int 
	m__align
;

150 } 
	tpthread_condattr_t
;

154 typedef unsigned int 
	tpthread_key_t
;

158 typedef int 
	tpthread_once_t
;

161 #if 
defined
 
__USE_UNIX98
 || defined 
__USE_XOPEN2K


166 #ifdef 
__x86_64__


169 int 
	m__lock
;

170 unsigned int 
	m__nr_readers
;

171 unsigned int 
	m__readers_wakeup
;

172 unsigned int 
	m__writer_wakeup
;

173 unsigned int 
	m__nr_readers_queued
;

174 unsigned int 
	m__nr_writers_queued
;

175 int 
	m__writer
;

176 int 
	m__shared
;

177 unsigned long int 
	m__pad1
;

178 unsigned long int 
	m__pad2
;

181 unsigned int 
	m__flags
;

182 #define 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

183 } 
	m__data
;

187 int 
	m__lock
;

188 unsigned int 
	m__nr_readers
;

189 unsigned int 
	m__readers_wakeup
;

190 unsigned int 
	m__writer_wakeup
;

191 unsigned int 
	m__nr_readers_queued
;

192 unsigned int 
	m__nr_writers_queued
;

195 unsigned char 
	m__flags
;

196 unsigned char 
	m__shared
;

197 unsigned char 
	m__pad1
;

198 unsigned char 
	m__pad2
;

199 int 
	m__writer
;

200 } 
	m__data
;

202 char 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

203 long int 
	m__align
;

204 } 
	tpthread_rwlock_t
;

208 char 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

209 long int 
	m__align
;

210 } 
	tpthread_rwlockattr_t
;

214 #ifdef 
__USE_XOPEN2K


216 typedef volatile int 
	tpthread_spinlock_t
;

223 char 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

224 long int 
	m__align
;

225 } 
	tpthread_barrier_t
;

229 char 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

230 int 
	m__align
;

231 } 
	tpthread_barrierattr_t
;

235 #ifndef 
__x86_64__


237 #define 
	#__cleanup_fct_attribute
 
	`__attribute__
 ((
	`__regparm__
 (1)))

	)

	@/usr/include/bits/setjmp.h

19 #ifndef 
_BITS_SETJMP_H


20 #define 
	#_BITS_SETJMP_H
 1

	)

22 #if !
defined
 
_SETJMP_H
 && !defined 
_PTHREAD_H


26 #include 
	~<bits/wordsize.h
>

28 #ifndef 
_ASM


30 #if 
__WORDSIZE
 == 64

31 typedef long int 
	t__jmp_buf
[8];

32 #elif 
defined
 
__x86_64__


33 typedef long long int 
	t__jmp_buf
[8];

35 typedef int 
	t__jmp_buf
[6];

	@/usr/include/sched.h

20 #ifndef 
_SCHED_H


21 #define 
	#_SCHED_H
 1

	)

23 #include 
	~<features.h
>

26 #include 
	~<bits/types.h
>

28 #define 
	#__need_size_t


	)

29 #include 
	~<stddef.h
>

31 #define 
	#__need_time_t


	)

32 #define 
	#__need_timespec


	)

33 #include 
	~<time.h
>

35 #ifndef 
__pid_t_defined


36 typedef 
__pid_t
 
	tpid_t
;

37 #define 
	#__pid_t_defined


	)

42 #include 
	~<bits/sched.h
>

44 #define 
	#sched_priority
 
__sched_priority


	)

47 
__BEGIN_DECLS


50 extern int 
	$sched_setparam
 (
__pid_t
 
__pid
, const struct 
sched_param
 *
__param
)

51 
__THROW
;

54 extern int 
	$sched_getparam
 (
__pid_t
 
__pid
, struct 
sched_param
 *
__param
) 
__THROW
;

57 extern int 
	$sched_setscheduler
 (
__pid_t
 
__pid
, int 
__policy
,

58 const struct 
sched_param
 *
__param
) 
__THROW
;

61 extern int 
	$sched_getscheduler
 (
__pid_t
 
__pid
) 
__THROW
;

64 extern int 
	$sched_yield
 (void) 
__THROW
;

67 extern int 
	$sched_get_priority_max
 (int 
__algorithm
) 
__THROW
;

70 extern int 
	$sched_get_priority_min
 (int 
__algorithm
) 
__THROW
;

73 extern int 
	$sched_rr_get_interval
 (
__pid_t
 
__pid
, struct 
timespec
 *
__t
) 
__THROW
;

76 #ifdef 
__USE_GNU


78 #define 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

79 #define 
	#CPU_SET
(
cpu
, 
cpusetp
) 
	`__CPU_SET_S
 (cpu, sizeof (
cpu_set_t
), cpusetp)

	)

80 #define 
	#CPU_CLR
(
cpu
, 
cpusetp
) 
	`__CPU_CLR_S
 (cpu, sizeof (
cpu_set_t
), cpusetp)

	)

81 #define 
	#CPU_ISSET
(
cpu
, 
cpusetp
) 
	`__CPU_ISSET_S
 (cpu, sizeof (
cpu_set_t
), \

82 
cpusetp
)

	)

83 #define 
	#CPU_ZERO
(
cpusetp
) 
	`__CPU_ZERO_S
 (sizeof (
cpu_set_t
), cpusetp)

	)

84 #define 
	#CPU_COUNT
(
cpusetp
) 
	`__CPU_COUNT_S
 (sizeof (
cpu_set_t
), cpusetp)

	)

86 #define 
	#CPU_SET_S
(
cpu
, 
setsize
, 
cpusetp
) 
	`__CPU_SET_S
 (cpu, setsize, cpusetp)

	)

87 #define 
	#CPU_CLR_S
(
cpu
, 
setsize
, 
cpusetp
) 
	`__CPU_CLR_S
 (cpu, setsize, cpusetp)

	)

88 #define 
	#CPU_ISSET_S
(
cpu
, 
setsize
, 
cpusetp
) 
	`__CPU_ISSET_S
 (cpu, setsize, \

89 
cpusetp
)

	)

90 #define 
	#CPU_ZERO_S
(
setsize
, 
cpusetp
) 
	`__CPU_ZERO_S
 (setsize, cpusetp)

	)

91 #define 
	#CPU_COUNT_S
(
setsize
, 
cpusetp
) 
	`__CPU_COUNT_S
 (setsize, cpusetp)

	)

93 #define 
	#CPU_EQUAL
(
cpusetp1
, 
cpusetp2
) \

94 
	`__CPU_EQUAL_S
 (sizeof (
cpu_set_t
), 
cpusetp1
, 
cpusetp2
)

	)

95 #define 
	#CPU_EQUAL_S
(
setsize
, 
cpusetp1
, 
cpusetp2
) \

96 
	`__CPU_EQUAL_S
 (
setsize
, 
cpusetp1
, 
cpusetp2
)

	)

98 #define 
	#CPU_AND
(
destset
, 
srcset1
, 
srcset2
) \

99 
	`__CPU_OP_S
 (sizeof (
cpu_set_t
), 
destset
, 
srcset1
, 
srcset2
, &)

	)

100 #define 
	#CPU_OR
(
destset
, 
srcset1
, 
srcset2
) \

101 
	`__CPU_OP_S
 (sizeof (
cpu_set_t
), 
destset
, 
srcset1
, 
srcset2
, |)

	)

102 #define 
	#CPU_XOR
(
destset
, 
srcset1
, 
srcset2
) \

103 
	`__CPU_OP_S
 (sizeof (
cpu_set_t
), 
destset
, 
srcset1
, 
srcset2
, ^)

	)

104 #define 
	#CPU_AND_S
(
setsize
, 
destset
, 
srcset1
, 
srcset2
) \

105 
	`__CPU_OP_S
 (
setsize
, 
destset
, 
srcset1
, 
srcset2
, &)

	)

106 #define 
	#CPU_OR_S
(
setsize
, 
destset
, 
srcset1
, 
srcset2
) \

107 
	`__CPU_OP_S
 (
setsize
, 
destset
, 
srcset1
, 
srcset2
, |)

	)

108 #define 
	#CPU_XOR_S
(
setsize
, 
destset
, 
srcset1
, 
srcset2
) \

109 
	`__CPU_OP_S
 (
setsize
, 
destset
, 
srcset1
, 
srcset2
, ^)

	)

111 #define 
	#CPU_ALLOC_SIZE
(
count
) 
	`__CPU_ALLOC_SIZE
 (count)

	)

112 #define 
	#CPU_ALLOC
(
count
) 
	`__CPU_ALLOC
 (count)

	)

113 #define 
	#CPU_FREE
(
cpuset
) 
	`__CPU_FREE
 (cpuset)

	)

117 extern int 
	$sched_setaffinity
 (
__pid_t
 
__pid
, 
size_t
 
__cpusetsize
,

118 const 
cpu_set_t
 *
__cpuset
) 
__THROW
;

121 extern int 
	$sched_getaffinity
 (
__pid_t
 
__pid
, 
size_t
 
__cpusetsize
,

122 
cpu_set_t
 *
__cpuset
) 
__THROW
;

125 
__END_DECLS


	@/usr/include/time.h

22 #ifndef 
_TIME_H


24 #if (! 
defined
 
__need_time_t
 && !defined 
__need_clock_t
 && \

25 ! 
defined
 
	g__need_timespec
)

26 #define 
	#_TIME_H
 1

	)

27 #include 
	~<features.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 #define 
	#__need_size_t


	)

36 #define 
	#__need_NULL


	)

37 #include 
	~<stddef.h
>

41 #include 
	~<bits/time.h
>

44 #if !
defined
 
__STRICT_ANSI__
 && !defined 
__USE_XOPEN2K


45 #ifndef 
CLK_TCK


46 #define 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #if !
defined
 
__clock_t_defined
 && (defined 
_TIME_H
 || defined 
__need_clock_t
)

53 #define 
	#__clock_t_defined
 1

	)

55 #include 
	~<bits/types.h
>

57 
__BEGIN_NAMESPACE_STD


59 typedef 
__clock_t
 
	tclock_t
;

60 
	g__END_NAMESPACE_STD


61 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_POSIX
 || defined 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
clock_t
)

66 #undef 
__need_clock_t


68 #if !
defined
 
__time_t_defined
 && (defined 
_TIME_H
 || defined 
__need_time_t
)

69 #define 
	#__time_t_defined
 1

	)

71 #include 
	~<bits/types.h
>

73 
__BEGIN_NAMESPACE_STD


75 typedef 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC
 || defined 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #undef 
__need_time_t


84 #if !
defined
 
__clockid_t_defined
 && \

85 ((
defined
 
_TIME_H
 && defined 
__USE_POSIX199309
) || defined 
__need_clockid_t
)

86 #define 
	#__clockid_t_defined
 1

	)

88 #include 
	~<bits/types.h
>

91 typedef 
__clockid_t
 
	tclockid_t
;

94 #undef 
__clockid_time_t


96 #if !
defined
 
__timer_t_defined
 && \

97 ((
defined
 
_TIME_H
 && defined 
__USE_POSIX199309
) || defined 
__need_timer_t
)

98 #define 
	#__timer_t_defined
 1

	)

100 #include 
	~<bits/types.h
>

103 typedef 
__timer_t
 
	ttimer_t
;

106 #undef 
__need_timer_t


109 #if (!
defined
 
__timespec_defined
 \

110 && ((
defined
 
_TIME_H
 \

111 && (
defined
 
__USE_POSIX199309
 || defined 
__USE_MISC
 \

112 || 
defined
 
__USE_ISOC11
)) \

113 || 
defined
 
__need_timespec
))

114 #define 
	#__timespec_defined
 1

	)

116 #include 
	~<bits/types.h
>

120 struct 
	stimespec


122 
__time_t
 
tv_sec
;

123 
__syscall_slong_t
 
tv_nsec
;

127 #undef 
__need_timespec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 struct 
	stm


135 int 
tm_sec
;

136 int 
tm_min
;

137 int 
tm_hour
;

138 int 
tm_mday
;

139 int 
tm_mon
;

140 int 
tm_year
;

141 int 
tm_wday
;

142 int 
tm_yday
;

143 int 
tm_isdst
;

145 #ifdef 
__USE_BSD


146 long int 
tm_gmtoff
;

147 const char *
tm_zone
;

149 long int 
__tm_gmtoff
;

150 const char *
__tm_zone
;

153 
__END_NAMESPACE_STD


154 #if 
defined
 
__USE_XOPEN
 || defined 
__USE_POSIX
 || defined 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifdef 
__USE_POSIX199309


161 struct 
	sitimerspec


163 struct 
timespec
 
it_interval
;

164 struct 
timespec
 
it_value
;

168 struct 
sigevent
;

172 #ifdef 
__USE_XOPEN2K


173 #ifndef 
__pid_t_defined


174 typedef 
__pid_t
 
	tpid_t
;

175 #define 
	#__pid_t_defined


	)

180 #ifdef 
__USE_ISOC11


182 #define 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 extern 
clock_t
 
	$clock
 (void) 
__THROW
;

192 extern 
time_t
 
	$time
 (
time_t
 *
__timer
) 
__THROW
;

195 extern double 
	$difftime
 (
time_t
 
__time1
, time_t 
__time0
)

196 
__THROW
 
	`__attribute__
 ((
__const__
));

199 extern 
time_t
 
	$mktime
 (struct 
tm
 *
__tp
) 
__THROW
;

205 extern 
size_t
 
	$strftime
 (char *
__restrict
 
__s
, 
size_t
 
__maxsize
,

206 const char *
__restrict
 
__format
,

207 const struct 
tm
 *
__restrict
 
__tp
) 
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifdef 
__USE_XOPEN


213 extern char *
	$strptime
 (const char *
__restrict
 
__s
,

214 const char *
__restrict
 
__fmt
, struct 
tm
 *
__tp
)

215 
__THROW
;

218 #ifdef 
__USE_XOPEN2K8


221 #include 
	~<xlocale.h
>

223 extern 
size_t
 
	$strftime_l
 (char *
__restrict
 
__s
, 
size_t
 
__maxsize
,

224 const char *
__restrict
 
__format
,

225 const struct 
tm
 *
__restrict
 
__tp
,

226 
__locale_t
 
__loc
) 
__THROW
;

229 #ifdef 
__USE_GNU


230 extern char *
	$strptime_l
 (const char *
__restrict
 
__s
,

231 const char *
__restrict
 
__fmt
, struct 
tm
 *
__tp
,

232 
__locale_t
 
__loc
) 
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 extern struct 
tm
 *
	$gmtime
 (const 
time_t
 *
__timer
) 
__THROW
;

243 extern struct 
tm
 *
	$localtime
 (const 
time_t
 *
__timer
) 
__THROW
;

244 
__END_NAMESPACE_STD


246 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


249 extern struct 
tm
 *
	$gmtime_r
 (const 
time_t
 *
__restrict
 
__timer
,

250 struct 
tm
 *
__restrict
 
__tp
) 
__THROW
;

254 extern struct 
tm
 *
	$localtime_r
 (const 
time_t
 *
__restrict
 
__timer
,

255 struct 
tm
 *
__restrict
 
__tp
) 
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 extern char *
	$asctime
 (const struct 
tm
 *
__tp
) 
__THROW
;

264 extern char *
	$ctime
 (const 
time_t
 *
__timer
) 
__THROW
;

265 
__END_NAMESPACE_STD


267 #if 
defined
 
__USE_POSIX
 || defined 
__USE_MISC


272 extern char *
	$asctime_r
 (const struct 
tm
 *
__restrict
 
__tp
,

273 char *
__restrict
 
__buf
) 
__THROW
;

276 extern char *
	$ctime_r
 (const 
time_t
 *
__restrict
 
__timer
,

277 char *
__restrict
 
__buf
) 
__THROW
;

282 extern char *
__tzname
[2];

283 extern int 
__daylight
;

284 extern long int 
__timezone
;

287 #ifdef 
__USE_POSIX


289 extern char *
tzname
[2];

293 extern void 
	$tzset
 (void) 
__THROW
;

296 #if 
defined
 
__USE_SVID
 || defined 
__USE_XOPEN


297 extern int 
daylight
;

298 extern long int 
timezone
;

301 #ifdef 
__USE_SVID


304 extern int 
	$stime
 (const 
time_t
 *
__when
) 
__THROW
;

310 #define 
	#__isleap
(
year
) \

311 ((
year
) % 4 == 0 && ((year) % 100 != 0 || (year) % 400 == 0))

	)

314 #ifdef 
__USE_MISC


319 extern 
time_t
 
	$timegm
 (struct 
tm
 *
__tp
) 
__THROW
;

322 extern 
time_t
 
	$timelocal
 (struct 
tm
 *
__tp
) 
__THROW
;

325 extern int 
	$dysize
 (int 
__year
) 
__THROW
 
	`__attribute__
 ((
__const__
));

329 #ifdef 
__USE_POSIX199309


334 extern int 
	`nanosleep
 (const struct 
timespec
 *
__requested_time
,

335 struct 
timespec
 *
__remaining
);

339 extern int 
	$clock_getres
 (
clockid_t
 
__clock_id
, struct 
timespec
 *
__res
) 
__THROW
;

342 extern int 
	$clock_gettime
 (
clockid_t
 
__clock_id
, struct 
timespec
 *
__tp
) 
__THROW
;

345 extern int 
	$clock_settime
 (
clockid_t
 
__clock_id
, const struct 
timespec
 *
__tp
)

346 
__THROW
;

348 #ifdef 
__USE_XOPEN2K


353 extern int 
	`clock_nanosleep
 (
clockid_t
 
__clock_id
, int 
__flags
,

354 const struct 
timespec
 *
__req
,

355 struct 
timespec
 *
__rem
);

358 extern int 
	$clock_getcpuclockid
 (
pid_t
 
__pid
, 
clockid_t
 *
__clock_id
) 
__THROW
;

363 extern int 
	$timer_create
 (
clockid_t
 
__clock_id
,

364 struct 
sigevent
 *
__restrict
 
__evp
,

365 
timer_t
 *
__restrict
 
__timerid
) 
__THROW
;

368 extern int 
	$timer_delete
 (
timer_t
 
__timerid
) 
__THROW
;

371 extern int 
	$timer_settime
 (
timer_t
 
__timerid
, int 
__flags
,

372 const struct 
itimerspec
 *
__restrict
 
__value
,

373 struct 
itimerspec
 *
__restrict
 
__ovalue
) 
__THROW
;

376 extern int 
	$timer_gettime
 (
timer_t
 
__timerid
, struct 
itimerspec
 *
__value
)

377 
__THROW
;

380 extern int 
	$timer_getoverrun
 (
timer_t
 
__timerid
) 
__THROW
;

384 #ifdef 
__USE_ISOC11


386 extern int 
	$timespec_get
 (struct 
timespec
 *
__ts
, int 
__base
)

387 
__THROW
 
	`__nonnull
 ((1));

391 #ifdef 
__USE_XOPEN_EXTENDED


403 extern int 
getdate_err
;

412 extern struct 
tm
 *
	`getdate
 (const char *
__string
);

415 #ifdef 
__USE_GNU


426 extern int 
	`getdate_r
 (const char *
__restrict
 
__string
,

427 struct 
tm
 *
__restrict
 
__resbufp
);

430 
__END_DECLS


	@/usr/include/bits/sched.h

21 #ifndef 
__need_schedparam


23 #ifndef 
_SCHED_H


29 #define 
	#SCHED_OTHER
 0

	)

30 #define 
	#SCHED_FIFO
 1

	)

31 #define 
	#SCHED_RR
 2

	)

32 #ifdef 
__USE_GNU


33 #define 
	#SCHED_BATCH
 3

	)

34 #define 
	#SCHED_IDLE
 5

	)

36 #define 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

39 #ifdef 
__USE_GNU


41 #define 
	#CSIGNAL
 0x000000ff

	)

42 #define 
	#CLONE_VM
 0x00000100

	)

43 #define 
	#CLONE_FS
 0x00000200

	)

44 #define 
	#CLONE_FILES
 0x00000400

	)

45 #define 
	#CLONE_SIGHAND
 0x00000800

	)

46 #define 
	#CLONE_PTRACE
 0x00002000

	)

47 #define 
	#CLONE_VFORK
 0x00004000

	)

49 #define 
	#CLONE_PARENT
 0x00008000

	)

51 #define 
	#CLONE_THREAD
 0x00010000

	)

52 #define 
	#CLONE_NEWNS
 0x00020000

	)

53 #define 
	#CLONE_SYSVSEM
 0x00040000

	)

54 #define 
	#CLONE_SETTLS
 0x00080000

	)

55 #define 
	#CLONE_PARENT_SETTID
 0x00100000

	)

57 #define 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

59 #define 
	#CLONE_DETACHED
 0x00400000

	)

60 #define 
	#CLONE_UNTRACED
 0x00800000

	)

62 #define 
	#CLONE_CHILD_SETTID
 0x01000000

	)

64 #define 
	#CLONE_NEWUTS
 0x04000000

	)

65 #define 
	#CLONE_NEWIPC
 0x08000000

	)

66 #define 
	#CLONE_NEWUSER
 0x10000000

	)

67 #define 
	#CLONE_NEWPID
 0x20000000

	)

68 #define 
	#CLONE_NEWNET
 0x40000000

	)

69 #define 
	#CLONE_IO
 0x80000000

	)

73 struct 
	ssched_param


75 int 
	m__sched_priority
;

78 
	g__BEGIN_DECLS


80 #ifdef 
__USE_GNU


82 extern int 
clone
 (int (*
__fn
) (void *
__arg
), void *
__child_stack
,

83 int 
__flags
, void *
__arg
, ...) 
__THROW
;

86 extern int 
	$unshare
 (int 
__flags
) 
__THROW
;

89 extern int 
	$sched_getcpu
 (void) 
__THROW
;

92 extern int 
	$setns
 (int 
__fd
, int 
__nstype
) 
__THROW
;

96 
__END_DECLS


100 #if !
defined
 
__defined_schedparam
 \

101 && (
defined
 
__need_schedparam
 || defined 
_SCHED_H
)

102 #define 
	#__defined_schedparam
 1

	)

104 struct 
	s__sched_param


106 int 
__sched_priority
;

108 #undef 
__need_schedparam


112 #if 
defined
 
_SCHED_H
 && !defined 
__cpu_set_t_defined


113 #define 
	#__cpu_set_t_defined


	)

115 #define 
	#__CPU_SETSIZE
 1024

	)

116 #define 
	#__NCPUBITS
 (8 * sizeof (
__cpu_mask
))

	)

119 typedef unsigned long int 
	t__cpu_mask
;

122 #define 
	#__CPUELT
(
cpu
) ((cpu) / 
__NCPUBITS
)

	)

123 #define 
	#__CPUMASK
(
cpu
) ((
__cpu_mask
) 1 << ((cpu) % 
__NCPUBITS
))

	)

128 
__cpu_mask
 
__bits
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

129 } 
	tcpu_set_t
;

132 #if 
	`__GNUC_PREREQ
 (2, 91)

133 #define 
	#__CPU_ZERO_S
(
setsize
, 
cpusetp
) \

134 do 
	`__builtin_memset
 (
cpusetp
, '\0', 
setsize
); while (0)

	)

136 #define 
	#__CPU_ZERO_S
(
setsize
, 
cpusetp
) \

138 
size_t
 
__i
; \

139 
size_t
 
__imax
 = (
setsize
) / sizeof (
__cpu_mask
); \

140 
__cpu_mask
 *
__bits
 = (
cpusetp
)->__bits; \

141 for (
__i
 = 0; __i < 
__imax
; ++__i) \

142 
__bits
[
__i
] = 0; \

143 
	}
} while (0)

	)

145 #define 
	#__CPU_SET_S
(
cpu
, 
setsize
, 
cpusetp
) \

146 (
__extension__
 \

147 ({ 
size_t
 
__cpu
 = (
cpu
); \

148 
__cpu
 < 8 * (
setsize
) \

149 ? (((
__cpu_mask
 *) ((
cpusetp
)->
__bits
))[
	`__CPUELT
 (
__cpu
)] \

150 |= 
	`__CPUMASK
 (
__cpu
)) \

151 : 0; }))

	)

152 #define 
	#__CPU_CLR_S
(
cpu
, 
setsize
, 
cpusetp
) \

153 (
__extension__
 \

154 ({ 
size_t
 
__cpu
 = (
cpu
); \

155 
__cpu
 < 8 * (
setsize
) \

156 ? (((
__cpu_mask
 *) ((
cpusetp
)->
__bits
))[
	`__CPUELT
 (
__cpu
)] \

157 &= ~
	`__CPUMASK
 (
__cpu
)) \

158 : 0; }))

	)

159 #define 
	#__CPU_ISSET_S
(
cpu
, 
setsize
, 
cpusetp
) \

160 (
__extension__
 \

161 ({ 
size_t
 
__cpu
 = (
cpu
); \

162 
__cpu
 < 8 * (
setsize
) \

163 ? ((((const 
__cpu_mask
 *) ((
cpusetp
)->
__bits
))[
	`__CPUELT
 (
__cpu
)] \

164 & 
	`__CPUMASK
 (
__cpu
))) != 0 \

165 : 0; }))

	)

167 #define 
	#__CPU_COUNT_S
(
setsize
, 
cpusetp
) \

168 
	`__sched_cpucount
 (
setsize
, 
cpusetp
)

	)

170 #if 
__GNUC_PREREQ
 (2, 91)

171 #define 
	#__CPU_EQUAL_S
(
setsize
, 
cpusetp1
, 
cpusetp2
) \

172 (
	`__builtin_memcmp
 (
cpusetp1
, 
cpusetp2
, 
setsize
) == 0)

	)

174 #define 
	#__CPU_EQUAL_S
(
setsize
, 
cpusetp1
, 
cpusetp2
) \

175 (
__extension__
 \

176 ({ const 
__cpu_mask
 *
__arr1
 = (
cpusetp1
)->
__bits
; \

177 const 
__cpu_mask
 *
__arr2
 = (
cpusetp2
)->
__bits
; \

178 
size_t
 
__imax
 = (
setsize
) / sizeof (
__cpu_mask
); \

179 
size_t
 
__i
; \

180 for (
__i
 = 0; __i < 
__imax
; ++__i) \

181 if (
__arr1
[
__i
] != 
__arr2
[__i]) \

183 
__i
 == 
__imax
; }))

	)

186 #define 
	#__CPU_OP_S
(
setsize
, 
destset
, 
srcset1
, 
srcset2
, 
op
) \

187 (
__extension__
 \

188 ({ 
cpu_set_t
 *
__dest
 = (
destset
); \

189 const 
__cpu_mask
 *
__arr1
 = (
srcset1
)->
__bits
; \

190 const 
__cpu_mask
 *
__arr2
 = (
srcset2
)->
__bits
; \

191 
size_t
 
__imax
 = (
setsize
) / sizeof (
__cpu_mask
); \

192 
size_t
 
__i
; \

193 for (
__i
 = 0; __i < 
__imax
; ++__i) \

194 ((
__cpu_mask
 *) 
__dest
->
__bits
)[
__i
] = 
__arr1
[__i] 
op
 
__arr2
[__i]; \

195 
__dest
; }))

	)

197 #define 
	#__CPU_ALLOC_SIZE
(
count
) \

198 ((((
count
) + 
__NCPUBITS
 - 1) / __NCPUBITS) * sizeof (
__cpu_mask
))

	)

199 #define 
	#__CPU_ALLOC
(
count
) 
	`__sched_cpualloc
 (count)

	)

200 #define 
	#__CPU_FREE
(
cpuset
) 
	`__sched_cpufree
 (cpuset)

	)

202 
__BEGIN_DECLS


204 extern int 
	$__sched_cpucount
 (
size_t
 
__setsize
, const 
cpu_set_t
 *
__setp
)

205 
__THROW
;

206 extern 
cpu_set_t
 *
	$__sched_cpualloc
 (
size_t
 
__count
) 
__THROW
 
__wur
;

207 extern void 
	$__sched_cpufree
 (
cpu_set_t
 *
__set
) 
__THROW
;

209 
__END_DECLS


	@/usr/include/bits/time.h

23 #if 
defined
 
__need_timeval
 || defined 
__USE_GNU


24 #ifndef 
_STRUCT_TIMEVAL


25 #define 
	#_STRUCT_TIMEVAL
 1

	)

26 #include 
	~<bits/types.h
>

30 struct 
	stimeval


32 
__time_t
 
	mtv_sec
;

33 
__suseconds_t
 
	mtv_usec
;

38 #ifndef 
__need_timeval


39 #ifndef 
_BITS_TIME_H


40 #define 
	#_BITS_TIME_H
 1

	)

48 #define 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #if (!
defined
 
__STRICT_ANSI__
 || defined 
__USE_POSIX
) \

51 && !
defined
 
	g__USE_XOPEN2K


54 #include 
	~<bits/types.h
>

55 extern long int 
__sysconf
 (int);

56 #define 
	#CLK_TCK
 ((
__clock_t
) 
	`__sysconf
 (2))

	)

59 #ifdef 
__USE_POSIX199309


61 #define 
	#CLOCK_REALTIME
 0

	)

63 #define 
	#CLOCK_MONOTONIC
 1

	)

65 #define 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 #define 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 #define 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 #define 
	#CLOCK_REALTIME_COARSE
 5

	)

73 #define 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 #define 
	#CLOCK_BOOTTIME
 7

	)

77 #define 
	#CLOCK_REALTIME_ALARM
 8

	)

79 #define 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 #define 
	#TIMER_ABSTIME
 1

	)

85 #ifdef 
__USE_GNU


86 #include 
	~<bits/timex.h
>

88 
__BEGIN_DECLS


91 extern int 
	$clock_adjtime
 (
__clockid_t
 
__clock_id
, struct 
timex
 *
__utx
) 
__THROW
;

93 
__END_DECLS


99 #undef 
__need_timeval


	@/usr/include/linux/errno.h

1 #include 
	~<asm/errno.h
>

	@/usr/include/asm/errno.h

1 #include 
	~<asm-generic/errno.h
>

	@/usr/include/bits/timex.h

18 #ifndef 
_BITS_TIMEX_H


19 #define 
	#_BITS_TIMEX_H
 1

	)

21 #include 
	~<bits/types.h
>

25 struct 
	stimex


27 unsigned int 
	mmodes
;

28 
__syscall_slong_t
 
	moffset
;

29 
__syscall_slong_t
 
	mfreq
;

30 
__syscall_slong_t
 
	mmaxerror
;

31 
__syscall_slong_t
 
	mesterror
;

32 int 
	mstatus
;

33 
__syscall_slong_t
 
	mconstant
;

34 
__syscall_slong_t
 
	mprecision
;

35 
__syscall_slong_t
 
	mtolerance
;

36 struct 
timeval
 
	mtime
;

37 
__syscall_slong_t
 
	mtick
;

38 
__syscall_slong_t
 
	mppsfreq
;

39 
__syscall_slong_t
 
	mjitter
;

40 int 
	mshift
;

41 
__syscall_slong_t
 
	mstabil
;

42 
__syscall_slong_t
 
	mjitcnt
;

43 
__syscall_slong_t
 
	mcalcnt
;

44 
__syscall_slong_t
 
	merrcnt
;

45 
__syscall_slong_t
 
	mstbcnt
;

47 int 
	mtai
;

56 #define 
	#ADJ_OFFSET
 0x0001

	)

57 #define 
	#ADJ_FREQUENCY
 0x0002

	)

58 #define 
	#ADJ_MAXERROR
 0x0004

	)

59 #define 
	#ADJ_ESTERROR
 0x0008

	)

60 #define 
	#ADJ_STATUS
 0x0010

	)

61 #define 
	#ADJ_TIMECONST
 0x0020

	)

62 #define 
	#ADJ_TAI
 0x0080

	)

63 #define 
	#ADJ_MICRO
 0x1000

	)

64 #define 
	#ADJ_NANO
 0x2000

	)

65 #define 
	#ADJ_TICK
 0x4000

	)

66 #define 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 #define 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 #define 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 #define 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 #define 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 #define 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 #define 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 #define 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 #define 
	#MOD_CLKB
 
ADJ_TICK


	)

77 #define 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 #define 
	#MOD_TAI
 
ADJ_TAI


	)

79 #define 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 #define 
	#MOD_NANO
 
ADJ_NANO


	)

84 #define 
	#STA_PLL
 0x0001

	)

85 #define 
	#STA_PPSFREQ
 0x0002

	)

86 #define 
	#STA_PPSTIME
 0x0004

	)

87 #define 
	#STA_FLL
 0x0008

	)

89 #define 
	#STA_INS
 0x0010

	)

90 #define 
	#STA_DEL
 0x0020

	)

91 #define 
	#STA_UNSYNC
 0x0040

	)

92 #define 
	#STA_FREQHOLD
 0x0080

	)

94 #define 
	#STA_PPSSIGNAL
 0x0100

	)

95 #define 
	#STA_PPSJITTER
 0x0200

	)

96 #define 
	#STA_PPSWANDER
 0x0400

	)

97 #define 
	#STA_PPSERROR
 0x0800

	)

99 #define 
	#STA_CLOCKERR
 0x1000

	)

100 #define 
	#STA_NANO
 0x2000

	)

101 #define 
	#STA_MODE
 0x4000

	)

102 #define 
	#STA_CLK
 0x8000

	)

105 #define 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/asm-generic/errno.h

1 #ifndef 
_ASM_GENERIC_ERRNO_H


2 #define 
	#_ASM_GENERIC_ERRNO_H


	)

4 #include 
	~<asm-generic/errno-base.h
>

6 #define 
	#EDEADLK
 35

	)

7 #define 
	#ENAMETOOLONG
 36

	)

8 #define 
	#ENOLCK
 37

	)

9 #define 
	#ENOSYS
 38

	)

10 #define 
	#ENOTEMPTY
 39

	)

11 #define 
	#ELOOP
 40

	)

12 #define 
	#EWOULDBLOCK
 
EAGAIN


	)

13 #define 
	#ENOMSG
 42

	)

14 #define 
	#EIDRM
 43

	)

15 #define 
	#ECHRNG
 44

	)

16 #define 
	#EL2NSYNC
 45

	)

17 #define 
	#EL3HLT
 46

	)

18 #define 
	#EL3RST
 47

	)

19 #define 
	#ELNRNG
 48

	)

20 #define 
	#EUNATCH
 49

	)

21 #define 
	#ENOCSI
 50

	)

22 #define 
	#EL2HLT
 51

	)

23 #define 
	#EBADE
 52

	)

24 #define 
	#EBADR
 53

	)

25 #define 
	#EXFULL
 54

	)

26 #define 
	#ENOANO
 55

	)

27 #define 
	#EBADRQC
 56

	)

28 #define 
	#EBADSLT
 57

	)

30 #define 
	#EDEADLOCK
 
EDEADLK


	)

32 #define 
	#EBFONT
 59

	)

33 #define 
	#ENOSTR
 60

	)

34 #define 
	#ENODATA
 61

	)

35 #define 
	#ETIME
 62

	)

36 #define 
	#ENOSR
 63

	)

37 #define 
	#ENONET
 64

	)

38 #define 
	#ENOPKG
 65

	)

39 #define 
	#EREMOTE
 66

	)

40 #define 
	#ENOLINK
 67

	)

41 #define 
	#EADV
 68

	)

42 #define 
	#ESRMNT
 69

	)

43 #define 
	#ECOMM
 70

	)

44 #define 
	#EPROTO
 71

	)

45 #define 
	#EMULTIHOP
 72

	)

46 #define 
	#EDOTDOT
 73

	)

47 #define 
	#EBADMSG
 74

	)

48 #define 
	#EOVERFLOW
 75

	)

49 #define 
	#ENOTUNIQ
 76

	)

50 #define 
	#EBADFD
 77

	)

51 #define 
	#EREMCHG
 78

	)

52 #define 
	#ELIBACC
 79

	)

53 #define 
	#ELIBBAD
 80

	)

54 #define 
	#ELIBSCN
 81

	)

55 #define 
	#ELIBMAX
 82

	)

56 #define 
	#ELIBEXEC
 83

	)

57 #define 
	#EILSEQ
 84

	)

58 #define 
	#ERESTART
 85

	)

59 #define 
	#ESTRPIPE
 86

	)

60 #define 
	#EUSERS
 87

	)

61 #define 
	#ENOTSOCK
 88

	)

62 #define 
	#EDESTADDRREQ
 89

	)

63 #define 
	#EMSGSIZE
 90

	)

64 #define 
	#EPROTOTYPE
 91

	)

65 #define 
	#ENOPROTOOPT
 92

	)

66 #define 
	#EPROTONOSUPPORT
 93

	)

67 #define 
	#ESOCKTNOSUPPORT
 94

	)

68 #define 
	#EOPNOTSUPP
 95

	)

69 #define 
	#EPFNOSUPPORT
 96

	)

70 #define 
	#EAFNOSUPPORT
 97

	)

71 #define 
	#EADDRINUSE
 98

	)

72 #define 
	#EADDRNOTAVAIL
 99

	)

73 #define 
	#ENETDOWN
 100

	)

74 #define 
	#ENETUNREACH
 101

	)

75 #define 
	#ENETRESET
 102

	)

76 #define 
	#ECONNABORTED
 103

	)

77 #define 
	#ECONNRESET
 104

	)

78 #define 
	#ENOBUFS
 105

	)

79 #define 
	#EISCONN
 106

	)

80 #define 
	#ENOTCONN
 107

	)

81 #define 
	#ESHUTDOWN
 108

	)

82 #define 
	#ETOOMANYREFS
 109

	)

83 #define 
	#ETIMEDOUT
 110

	)

84 #define 
	#ECONNREFUSED
 111

	)

85 #define 
	#EHOSTDOWN
 112

	)

86 #define 
	#EHOSTUNREACH
 113

	)

87 #define 
	#EALREADY
 114

	)

88 #define 
	#EINPROGRESS
 115

	)

89 #define 
	#ESTALE
 116

	)

90 #define 
	#EUCLEAN
 117

	)

91 #define 
	#ENOTNAM
 118

	)

92 #define 
	#ENAVAIL
 119

	)

93 #define 
	#EISNAM
 120

	)

94 #define 
	#EREMOTEIO
 121

	)

95 #define 
	#EDQUOT
 122

	)

97 #define 
	#ENOMEDIUM
 123

	)

98 #define 
	#EMEDIUMTYPE
 124

	)

99 #define 
	#ECANCELED
 125

	)

100 #define 
	#ENOKEY
 126

	)

101 #define 
	#EKEYEXPIRED
 127

	)

102 #define 
	#EKEYREVOKED
 128

	)

103 #define 
	#EKEYREJECTED
 129

	)

106 #define 
	#EOWNERDEAD
 130

	)

107 #define 
	#ENOTRECOVERABLE
 131

	)

109 #define 
	#ERFKILL
 132

	)

111 #define 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/errno-base.h

1 #ifndef 
_ASM_GENERIC_ERRNO_BASE_H


2 #define 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 #define 
	#EPERM
 1

	)

5 #define 
	#ENOENT
 2

	)

6 #define 
	#ESRCH
 3

	)

7 #define 
	#EINTR
 4

	)

8 #define 
	#EIO
 5

	)

9 #define 
	#ENXIO
 6

	)

10 #define 
	#E2BIG
 7

	)

11 #define 
	#ENOEXEC
 8

	)

12 #define 
	#EBADF
 9

	)

13 #define 
	#ECHILD
 10

	)

14 #define 
	#EAGAIN
 11

	)

15 #define 
	#ENOMEM
 12

	)

16 #define 
	#EACCES
 13

	)

17 #define 
	#EFAULT
 14

	)

18 #define 
	#ENOTBLK
 15

	)

19 #define 
	#EBUSY
 16

	)

20 #define 
	#EEXIST
 17

	)

21 #define 
	#EXDEV
 18

	)

22 #define 
	#ENODEV
 19

	)

23 #define 
	#ENOTDIR
 20

	)

24 #define 
	#EISDIR
 21

	)

25 #define 
	#EINVAL
 22

	)

26 #define 
	#ENFILE
 23

	)

27 #define 
	#EMFILE
 24

	)

28 #define 
	#ENOTTY
 25

	)

29 #define 
	#ETXTBSY
 26

	)

30 #define 
	#EFBIG
 27

	)

31 #define 
	#ENOSPC
 28

	)

32 #define 
	#ESPIPE
 29

	)

33 #define 
	#EROFS
 30

	)

34 #define 
	#EMLINK
 31

	)

35 #define 
	#EPIPE
 32

	)

36 #define 
	#EDOM
 33

	)

37 #define 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
51
1378
/home/hdp/public/a老师程序/score1/score.c
/usr/include/stdio.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/_G_config.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/bits/libc-lock.h
/usr/include/bits/predefs.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/wchar.h
/usr/include/xlocale.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/errno.h
/usr/include/gnu/option-groups.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/errno.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/time.h
/usr/include/bits/sched.h
/usr/include/bits/time.h
/usr/include/linux/errno.h
/usr/include/asm/errno.h
/usr/include/bits/timex.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/errno-base.h
